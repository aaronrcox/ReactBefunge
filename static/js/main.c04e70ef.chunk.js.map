{"version":3,"sources":["Components/TextGrid/store/actions.js","Components/TextGrid/store/reducers.js","Components/TextGrid/store/epics.js","store/store.js","Components/TextGrid/TextGrid.js","Components/Terminal/Terminal.js","Components/Toolbar/Toolbar.js","Components/BefungeIde/BefungeInterpreter.js","Components/BefungeIde/BefungeIde.js","serviceWorker.js","index.js","App.js"],"names":["NO_OP","SETUP_GRID","INITIALISE_GRID","MOUSE_MOVED","MOUSE_DOWN","MOUSE_UP","SCROLL_VIEW","DRAG","KEY_DOWN","SET_HOVER_CELL","SET_CELL_VALUE","SET_TARGET_CELL","MOVE_TARGET_CELL","INSERT_ROW","INSERT_COL","DELETE_ROW","DELETE_COL","SET_SELECTION_AREA","CLEAR_SELECTION_AREA","SET_TYPEING_DIRECTION","none","type","setupGrid","width","height","text","cellWidth","cellHeight","payload","initialiseGrid","mouseMoved","mousePos","mouseDown","mouseUp","scrollView","xOffset","yOffset","drag","keyDown","setHoverCell","setCellValue","setTargetCell","rowIndex","colIndex","moveTargetCell","x","y","invert","setSelectionArea","clearSelectionArea","insertRow","insertCol","deleteRow","deleteCol","setTypeingDir","initialState","rows","cols","cells","insertMode","viewport","hover","target","dir","selection","isMouseDown","isDragging","startRowIndex","startColIndex","endRowIndex","endColIndex","selectedCells","calculateViewport","v","vLeft","vRight","vTop","vBottom","epics","combineEpics","action","state","pipe","ofType","actions","mergeMap","value","Math","floor","replace","split","map","line","mx","mouseX","my","mouseY","hoverState","newActions","push","key","isShiftDown","cbResult","callback","cbActions","preventDefault","length","undefined","includes","epicMiddleware","createEpicMiddleware","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","arr","_fillArrCells","modifier","xDir","yDir","dx","dy","max","_moveTarget","splice","console","log","sri","min","eri","sci","eci","r","c","applyMiddleware","run","textGridEpics","TextGrid","forwardRef","props","ref","useImperativeHandle","test","getCells","getState","dispatch","useDispatch","vRows","useSelector","vXOffset","vYOffset","rowsArr","Array","fill","elementRef","useRef","useEffect","current","offsetWidth","offsetHeight","config","scrollLeft","scrollTop","className","onScroll","event","draggable","tabIndex","onKeyDown","shiftKey","events","onMouseMove","bounds","currentTarget","getBoundingClientRect","clientX","left","clientY","top","onMouseUp","onMouseDown","focus","onMouseLeave","cr","TextGridRow","rowId","TextGridRangeSelection","style","position","vCols","cellArr","maxHeight","minHeight","cell","colId","TextGridCell","isRowHovered","isColHovered","isCellSelected","textDirX","textDirY","isCellHovered","classNames","join","getClassNames","maxWidth","minWidth","abs","display","TextGridStatusBar","Terminal","useState","readOnlyPos","setReadOnlyPos","consoleText","setConsoleText","commands","clear","args","clearConsole","echo","printLine","submitLine","onEnter","lineItems","cmd","wasCleared","print","submitInput","border","disabled","wrap","spellCheck","onChange","substr","selectionStart","onSelect","setSelectionRange","Toolbar","items","item","index","onClick","BefungeInterpreter","program","this","numRows","numCols","stack","onInstructionExecutedCb","onConsoleOutCb","onProgramTerminateCb","onRequestConsoleInputCb","onStackChangeCb","currentInstruction","nextInstruction","i","getInstructionDir","stringMode","waitingForInput","inputStack","ci","charCodeAt","parseInt","a","pop","b","String","fromCharCode","dirX","dirY","newInstruction","val","shift","ni","getNextInstruction","nx","ny","instruction","instructionDir","cDirX","cDirY","random","runIntervilleTimer","BefungeIde","befungeInterpreter","setBefungeInterpreter","befungeStackStr","setBefungeStackStr","befungeStack","JSON","parse","err","initProgram","textGridRef","interpreter","onInstructionExecuted","li","textGridStore","onStackChange","stringify","onConsoleOut","terminalRef","onProgramTerminate","clearInterval","onRequestConsoleInput","input","prompt","runProgram","setInterval","stepProgram","step","terminalCommands","toolbar","class","reverse","float","Boolean","location","hostname","match","ReactDOM","render","overflow","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c04e70ef.chunk.js","sourcesContent":["export const NO_OP = '[TextGrid] NO Op';\r\n\r\nexport const SETUP_GRID = '[TextGrid] Setup';\r\nexport const INITIALISE_GRID = '[TextGrid] Initialise';\r\n\r\nexport const MOUSE_MOVED = '[TextGrid] MouseMoved';\r\nexport const MOUSE_DOWN = '[TextGrid] Mouse Pressed';\r\nexport const MOUSE_UP = '[TextGrid] Mouse Released';\r\n\r\nexport const SCROLL_VIEW = '[TextGrid] Scroll View';\r\n\r\nexport const DRAG = '[TextGrid] Drag';\r\n\r\nexport const KEY_DOWN = '[TextGrid] Key Down';\r\n\r\nexport const SET_HOVER_CELL = '[TextGrid] Set Hover Cell';\r\nexport const SET_CELL_VALUE = '[TextGrid] Set Cell Text';\r\n\r\nexport const SET_TARGET_CELL = '[TextGrid] Set Target Cell';\r\nexport const MOVE_TARGET_CELL = '[TextGrid] Move Target Cell';\r\n\r\nexport const INSERT_ROW = '[TextGrid] Insert Row';\r\nexport const INSERT_COL = '[TextGrid] Insert Col';\r\nexport const DELETE_ROW = '[TextGrid] Delete Row';\r\nexport const DELETE_COL = '[TextGrid] Delete Col';\r\n\r\nexport const SET_SELECTION_AREA = '[TextGrid] Set Selection Area';\r\nexport const CLEAR_SELECTION_AREA = '[TextGrid] Clear Selection';\r\n\r\nexport const SET_TYPEING_DIRECTION = '[TextGrid] Set Text Direction';\r\n\r\n// TODO ACTIONS:\r\n// - COPY SELECTION\r\n// - CUT SELECTION\r\n// - PASTE SELECTION\r\n// - FILL SELECTION\r\n\r\n\r\n// TODO BEHAVIOURS:\r\n// - allow for dynamic resize calculations\r\n// - move viewport when target is near borders\r\n// - ability to change direction of tyed text\r\n\r\n\r\nexport function none() {\r\n    return { type: NO_OP }\r\n}\r\n\r\nexport function setupGrid(width, height, text, cellWidth, cellHeight) {\r\n    return { type: SETUP_GRID, payload: {width, height, text, cellWidth, cellHeight} }\r\n}\r\n\r\nexport function initialiseGrid(payload) {\r\n    return { type: INITIALISE_GRID, payload }\r\n}\r\n\r\nexport function mouseMoved(mousePos) {\r\n    return { type: MOUSE_MOVED, payload: mousePos };\r\n}\r\n\r\nexport function mouseDown() {\r\n    return { type: MOUSE_DOWN };\r\n}\r\n\r\nexport function mouseUp() {\r\n    return { type: MOUSE_UP };\r\n}\r\n\r\nexport function scrollView(xOffset, yOffset) {\r\n    return { type: SCROLL_VIEW, payload: {xOffset, yOffset}};\r\n}\r\n\r\nexport function drag() {\r\n    return { type: DRAG };\r\n}\r\n\r\nexport function keyDown(payload) {\r\n    return { type: KEY_DOWN, payload };\r\n}\r\n\r\nexport function setHoverCell(payload) {\r\n    return { type: SET_HOVER_CELL, payload };\r\n}\r\n\r\nexport function setCellValue(payload) {\r\n    return { type: SET_CELL_VALUE, payload};\r\n}\r\n\r\nexport function setTargetCell(rowIndex, colIndex) {\r\n    return { type: SET_TARGET_CELL, payload: { rowIndex, colIndex} };\r\n}\r\n\r\nexport function moveTargetCell(x, y, invert) {\r\n    return { type: MOVE_TARGET_CELL, payload: {x, y, invert} };\r\n}\r\n\r\n\r\nexport function setSelectionArea(payload) {\r\n    // {startRowIndex, startColIndex, endRowIndex, endColIndex } \r\n    return { type: SET_SELECTION_AREA, payload};\r\n}\r\n\r\nexport function clearSelectionArea(payload) {\r\n    return {type: CLEAR_SELECTION_AREA };\r\n}\r\n\r\nexport function insertRow(rowIndex) {\r\n    return { type: INSERT_ROW, payload: {rowIndex}};\r\n}\r\n\r\nexport function insertCol(rowIndex, colIndex) {\r\n    return { type: INSERT_COL, payload: {rowIndex, colIndex}};\r\n}\r\n\r\nexport function deleteRow(rowIndex) {\r\n    return { type: DELETE_ROW, payload: {rowIndex}};\r\n}\r\n\r\nexport function deleteCol(rowIndex, colIndex) {\r\n    return { type: DELETE_COL, payload: {rowIndex, colIndex}};\r\n}\r\n\r\nexport function setTypeingDir(x, y) {\r\n    return { type: SET_TYPEING_DIRECTION, payload: {x, y} };\r\n}","import * as actions from './actions';\r\n\r\n const initialState = {\r\n    cellWidth: 24,\r\n    cellHeight: 24, \r\n    rows: 0,    // TODO: set to length of cells\r\n    cols: 0,    // TODO: set to length of longest row in cells.\r\n    cells: [],\r\n    insertMode: false,\r\n\r\n    viewport: {\r\n        rows: 0,\r\n        cols: 0,\r\n        xOffset: 0,\r\n        yOffset: 0\r\n    },\r\n\r\n    hover: {\r\n        rowIndex: -1,\r\n        colIndex: -1,\r\n    },\r\n\r\n    target: {\r\n        rowIndex: -1,\r\n        colIndex: -1,\r\n        dir: {x: 1, y: 0}\r\n    },\r\n\r\n    selection: {\r\n        isMouseDown: false,\r\n        isDragging: false,\r\n        startRowIndex: 0,\r\n        startColIndex: 0,\r\n        endRowIndex: 0,\r\n        endColIndex: 0\r\n    },\r\n\r\n    \r\n\r\n    selectedCells: []\r\n};\r\n\r\nexport function reducer(state = initialState, action) {\r\n\r\n    switch(action.type) {\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.INITIALISE_GRID: {\r\n            return {...state, ...action.payload};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_HOVER_CELL: {\r\n            return {...state, hover: action.payload };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_CELL_VALUE: {\r\n\r\n            const rowIndex = action.payload.rowIndex ? action.payload.rowIndex : state.target.rowIndex;\r\n            const colIndex = action.payload.colIndex ? action.payload.colIndex : state.target.colIndex;\r\n            const value = action.payload.value;\r\n\r\n            const cells = state.cells;\r\n\r\n            _fillArrCells(cells, colIndex, rowIndex);\r\n            cells[rowIndex][colIndex] = value;\r\n            return {...state, cells };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_TARGET_CELL: {\r\n            const target = {...state.target, ...action.payload };\r\n            const selection = {\r\n                ...state.selection,\r\n                startRowIndex: target.rowIndex,\r\n                startColIndex: target.colIndex,\r\n                endRowIndex: target.rowIndex,\r\n                endColIndex: target.colIndex\r\n            };\r\n            const viewport = calculateViewport(state.viewport, target);\r\n            return {...state, viewport, target, selection };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOVE_TARGET_CELL: {\r\n            const modifier = action.payload.invert ? -1 : 1;\r\n            const xDir = action.payload && action.payload.x !== undefined ? action.payload.x : state.target.dir.x;\r\n            const yDir = action.payload && action.payload.y !== undefined ? action.payload.y : state.target.dir.y;\r\n            const target = {...state.target, ..._moveTarget(state.target, xDir * modifier, yDir * modifier) };\r\n            const selection = {\r\n                ...state.selection,\r\n                startRowIndex: target.rowIndex,\r\n                startColIndex: target.colIndex,\r\n                endRowIndex: target.rowIndex,\r\n                endColIndex: target.colIndex\r\n            };\r\n\r\n            const viewport = calculateViewport(state.viewport, target);\r\n\r\n            return { ...state, viewport, target, selection };\r\n        }\r\n\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.INSERT_ROW: {\r\n            const {rowIndex} = action.payload;\r\n            const cells = state.cells;\r\n            cells.splice(rowIndex, 0, []);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.INSERT_COL: {\r\n            const {rowIndex, colIndex} = action.payload;\r\n            const cells = state.cells;\r\n            while(cells.length <= rowIndex) cells.push([]);\r\n            while(cells[rowIndex].length <= colIndex) cells[rowIndex].push('');\r\n            cells[rowIndex].splice(colIndex, 0, '');\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DELETE_ROW: {\r\n            const {rowIndex} = action.payload;\r\n            const cells = state.cells;\r\n            cells.splice(rowIndex, 1);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DELETE_COL: {\r\n            console.log(actions.DELETE_COL);\r\n            const {rowIndex, colIndex} = action.payload;\r\n            const cells = state.cells;\r\n            if(cells.length <= rowIndex) return state;\r\n            if(cells[rowIndex].length <= colIndex) return state;\r\n            cells[rowIndex].splice(colIndex, 1);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_SELECTION_AREA: {\r\n            const selection = {...state.selection, ...action.payload};\r\n            const target = {\r\n                ...state.target,\r\n                rowIndex: selection.endRowIndex,\r\n                colIndex: selection.endColIndex,\r\n            };\r\n            return {...state, selection, target };\r\n        }\r\n\r\n        case actions.CLEAR_SELECTION_AREA: {\r\n            const cells = state.cells;\r\n            const sri = Math.min(state.selection.startRowIndex, state.selection.endRowIndex);\r\n            const eri = Math.max(state.selection.startRowIndex, state.selection.endRowIndex);\r\n            const sci = Math.min(state.selection.startColIndex, state.selection.endColIndex);\r\n            const eci = Math.max(state.selection.startColIndex, state.selection.endColIndex);\r\n\r\n            for(let r=sri; r<=eri && r < cells.length; r++){\r\n                for(let c=sci; c<=eci && c < cells[r].length; c++) {\r\n                    cells[r][c] = '';\r\n                }\r\n            }\r\n\r\n            return {...state, cells };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOUSE_DOWN: {\r\n            const target = {\r\n                ...state.target,\r\n                rowIndex: state.hover.rowIndex,\r\n                colIndex: state.hover.colIndex,\r\n            };\r\n            const selection = {\r\n                ...state.selection,\r\n                startColIndex: target.colIndex,\r\n                startRowIndex: target.rowIndex,\r\n                endColIndex: target.colIndex,\r\n                endRowIndex: target.rowIndex,\r\n                isDragging: false, \r\n                isMouseDown: true};\r\n            return {...state,  target, selection}\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOUSE_UP: {\r\n            const selection = {...state.selection, isDragging: false, isMouseDown: false};\r\n            return {...state,  selection}\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SCROLL_VIEW: {\r\n            const {xOffset, yOffset} = action.payload;\r\n            const viewport = {...state.viewport, \r\n                xOffset: Math.floor(xOffset / state.cellWidth),\r\n                yOffset: Math.floor(yOffset / state.cellHeight)    \r\n            };\r\n            return { ...state, viewport };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DRAG: {\r\n\r\n            if( !state.selection.isDragging ) {\r\n                // Begin Dragging\r\n                const target = {\r\n                    ...state.target,\r\n                    rowIndex: state.hover.rowIndex,\r\n                    colIndex: state.hover.colIndex,\r\n                };\r\n                const selection = {...state.selection, isDragging: true};\r\n                \r\n    \r\n                return {...state, selection, target};\r\n            }\r\n            else {\r\n                // Continue dragging\r\n                const selection = {...state.selection};\r\n                selection.endRowIndex = state.hover.rowIndex;\r\n                selection.endColIndex = state.hover.colIndex;\r\n                selection.endColIndex += (selection.endColIndex < selection.startColIndex ? 0 : 1);\r\n                \r\n                const target = {\r\n                    ...state.target,\r\n                    rowIndex: state.hover.rowIndex,\r\n                    colIndex: state.hover.colIndex,\r\n                };\r\n                return {...state, selection, target };\r\n            }\r\n           \r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_TYPEING_DIRECTION: {\r\n            const target = { ...state.target };\r\n            target.dir = { ...action.payload };\r\n            return {...state, target };\r\n            //return state;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\n\r\nfunction _fillArrCells(arr, x, y) {\r\n    while(arr.length <= y)\r\n        arr.push([]);\r\n\r\n    while(arr[y].length <= x)\r\n        arr[y].push('');\r\n}\r\n\r\nfunction _moveTarget(target, dx, dy) {\r\n\r\n    let rowIndex = target.rowIndex + dy;\r\n    let colIndex = target.colIndex + dx;\r\n\r\n    // prevent wrapping\r\n    rowIndex = Math.max(rowIndex, 0);\r\n    colIndex = Math.max(colIndex, 0);\r\n\r\n    return { rowIndex, colIndex };\r\n}\r\n\r\nfunction calculateViewport(viewport, target) {\r\n    const v = {...viewport};\r\n\r\n    const vLeft = v.xOffset;\r\n    const vRight = v.xOffset + v.cols - 2;\r\n    const vTop = v.yOffset;\r\n    const vBottom = v.yOffset + v.rows - 1;\r\n\r\n    // if the target is within the viewport, dont change\r\n    if( target.colIndex >= vLeft && target.colIndex <= vRight &&\r\n        target.rowIndex >= vBottom && target.rowIndex <= vTop )\r\n        return viewport;\r\n\r\n    if( target.colIndex < vLeft ) \r\n        v.xOffset = target.colIndex;\r\n\r\n    if(  target.colIndex >= vRight ) \r\n        v.xOffset = (target.colIndex - v.cols) + 3;\r\n\r\n    if( target.rowIndex < vTop ) \r\n        v.yOffset = target.rowIndex;\r\n\r\n    if( target.rowIndex >= vBottom ) \r\n        v.yOffset = (target.rowIndex - v.rows) + 2;\r\n\r\n    return v;\r\n}","import { combineEpics, ofType } from 'redux-observable';\r\nimport * as actions from './actions';\r\n\r\nimport { mergeMap } from 'rxjs/operators';\r\n\r\n\r\n\r\nconst setupGrid = (action, state) => action.pipe(\r\n    ofType(actions.SETUP_GRID),\r\n    mergeMap((action) => {\r\n\r\n        const width = action.payload.width;\r\n        const height = action.payload.height;\r\n        const text = action.payload.text;\r\n\r\n        const cellWidth = action.payload.cellWidth || state.value.cellWidth;\r\n        const cellHeight = action.payload.cellHeight || state.value.cellHeight;\r\n\r\n        const rows = Math.floor(height / (cellHeight-1)) + 1;\r\n        const cols = Math.floor(width / (cellWidth-1)) + 1;\r\n        \r\n        const viewport = {\r\n            ...state.value.viewport,\r\n            rows,\r\n            cols\r\n        };\r\n\r\n        // create a 2D array of characters, [rows][cols]\r\n        // regex strips out the various line endings\r\n        const cells = text.replace(/\\r\\n/g, \"\\r\").replace(/\\n/g, \"\\r\").split(/\\r/).map(line => line.split(''));\r\n        \r\n        // initialise the grid with the above calculated data\r\n        return [ actions.initialiseGrid({cellWidth, cellHeight, rows, cols, cells, viewport}) ];\r\n    })\r\n);\r\n\r\nconst onMouseMoved = (action, state) => action.pipe(\r\n    ofType(actions.MOUSE_MOVED),\r\n    mergeMap((action) => {\r\n\r\n        // get mouse coordinates\r\n        const mx = action.payload.mouseX;\r\n        const my = action.payload.mouseY;\r\n\r\n        // subtract 1 from width and height for row/col/cell index calculations\r\n        const cellWidth = state.value.cellWidth - 1;\r\n        const cellHeight = state.value.cellHeight - 1;\r\n\r\n        const viewport = state.value.viewport;\r\n\r\n        // calculate the row/col/cell index the mouse is over\r\n        const rowIndex = Math.floor(my / cellHeight) + viewport.yOffset;\r\n        const colIndex = Math.floor(mx / cellWidth) + viewport.xOffset;\r\n        \r\n        const hoverState = { rowIndex, colIndex };\r\n        const newActions = [];\r\n\r\n        // update the hover state\r\n        if(rowIndex !== state.value.hover.rowIndex || colIndex !== state.value.hover.colIndex) {\r\n            newActions.push(actions.setHoverCell(hoverState));\r\n        }\r\n\r\n        // If we move the mouse while the mouse is down, than we will\r\n        // either begin the selection, or expand the selection via the drag action\r\n        if(state.value.selection.isMouseDown) {\r\n            newActions.push(actions.drag());                   \r\n        }\r\n\r\n        return newActions;\r\n    })\r\n);\r\n\r\n\r\nconst onKeyDown = (action, state) => action.pipe(\r\n    ofType(actions.KEY_DOWN),\r\n    mergeMap((action) => {\r\n        const key = action.payload.key;\r\n        const rowIndex = state.value.target.rowIndex;\r\n        const colIndex = state.value.target.colIndex;\r\n        const isShiftDown = action.payload.isShiftDown;\r\n        \r\n        const cbResult = action.payload.callback(state.value, key) || {};\r\n        const cbActions = cbResult.actions || [];\r\n        \r\n        if(cbResult.preventDefault) {\r\n            return cbActions;\r\n        }\r\n\r\n        if(key.length === 1) {\r\n            return [\r\n                ...cbActions,\r\n                actions.setCellValue({ rowIndex, colIndex, value: key }),\r\n                actions.moveTargetCell(),\r\n            ];\r\n        }\r\n        else {\r\n            if( key === 'Tab' ) {\r\n                const dir = isShiftDown ? -1 : 1;\r\n                return[ ...cbActions, actions.moveTargetCell(dir, 0) ];\r\n            }\r\n            if( key === 'Enter' ) {\r\n                const dir = isShiftDown ? -1 : 1;\r\n                return [ ...cbActions, actions.moveTargetCell(0, dir) ];\r\n            }\r\n            else if( key === 'Backspace') {\r\n                return [\r\n                    ...cbActions,\r\n                    actions.clearSelectionArea(),\r\n                    actions.setCellValue({ value: '' }),\r\n                    actions.moveTargetCell(undefined, undefined, true)\r\n                ];\r\n            }\r\n            else if( key === 'Delete') {\r\n                return [ \r\n                    ...cbActions, \r\n                    actions.clearSelectionArea(),\r\n                    actions.setCellValue({ rowIndex, colIndex, value: '' }) \r\n                ];\r\n            }\r\n            else if( key.includes('Arrow') )\r\n            {\r\n                // calculate xy direction of arrow key press\r\n                let dir = {x: 0, y: 0};\r\n                switch(key) {\r\n                    case 'ArrowLeft': dir.x = -1; break;\r\n                    case 'ArrowRight': dir.x = 1; break;\r\n                    case 'ArrowUp': dir.y = -1; break;\r\n                    case 'ArrowDown': dir.y = 1; break;\r\n                    default: break;\r\n                }\r\n\r\n                // if we press arrow keys while shift is pressed, we are selecting\r\n                // otherwise, we are moving the target cursor position.\r\n\r\n                if(isShiftDown) {\r\n                    // TODO: create action to grow/shrink the selection area\r\n                    const selection = { ...state.value.selection };\r\n                    selection.endColIndex += dir.x;\r\n                    selection.endRowIndex += dir.y;\r\n                    return[  ...cbActions, actions.setSelectionArea(selection), actions.setTypeingDir(dir.x, dir.y) ];\r\n                }\r\n                else {\r\n                    return [\r\n                        ...cbActions, \r\n                        actions.moveTargetCell(dir.x, dir.y), \r\n                        actions.setTypeingDir(dir.x, dir.y)\r\n                    ];\r\n                }\r\n            }\r\n        }\r\n\r\n        return [];\r\n    })\r\n);\r\n\r\nexport const epics = combineEpics(\r\n    setupGrid,\r\n    onMouseMoved,\r\n    onKeyDown\r\n);\r\n","\r\nimport { createStore, applyMiddleware, compose } from 'redux'\r\nimport { createEpicMiddleware } from 'redux-observable';\r\n\r\nimport {\r\n    reducer as textGridReducer, \r\n    epics as textGridEpics\r\n} from '../Components/TextGrid/store';\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\n\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(\r\n    textGridReducer, \r\n    composeEnhancer(applyMiddleware(epicMiddleware))\r\n);\r\n\r\nepicMiddleware.run(textGridEpics);\r\n\r\n\r\n","import React, { useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { store } from '../../store';\r\nimport * as actions from './store/actions';\r\nimport './TextGrid.scss';\r\n\r\n\r\n/**\r\n * This component renders the text grid and handles\r\n */\r\nexport const TextGrid = forwardRef((props, ref) => {\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        test: () => console.log('hello world'),\r\n        getCells: () => store.getState().cells\r\n    }), []);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const vRows = useSelector(state => state.viewport.rows);\r\n    const vXOffset = useSelector(state => state.viewport.xOffset);\r\n    const vYOffset = useSelector(state => state.viewport.yOffset);\r\n    const rowsArr = vRows > 0 ? new Array(vRows).fill('') : [];\r\n\r\n    const elementRef = useRef(null);\r\n    useEffect(() => {\r\n        const width = elementRef.current ? elementRef.current.offsetWidth : 0;\r\n        const height = elementRef.current ? elementRef.current.offsetHeight: 0;\r\n\r\n        dispatch(actions.setupGrid(width, height, props.config.text, props.config.cellWidth, props.config.cellHeight));\r\n\r\n    }, [props, dispatch]);\r\n\r\n    const handleMouseMove = (event) => {\r\n        \r\n        // calculate the mouse position relative to the position of this component.\r\n        let bounds = event.currentTarget.getBoundingClientRect();\r\n        let mouseX = event.clientX - bounds.left;\r\n        let mouseY = event.clientY - bounds.top;\r\n        \r\n        dispatch(actions.mouseMoved({mouseX, mouseY}));\r\n    }\r\n\r\n    const handleKeyPress = (event) => {\r\n        event.preventDefault();\r\n        dispatch(actions.keyDown({ \r\n            key: event.key, \r\n            isShiftDown: event.shiftKey, \r\n            callback: props.config.events.onKeyDown\r\n        }));\r\n    }\r\n\r\n    const handleMouseDown = (event) => {\r\n        event.preventDefault();\r\n        event.currentTarget.focus();\r\n        dispatch(actions.mouseDown());\r\n    }\r\n\r\n    const handleMouseUp = (event) => {\r\n        event.preventDefault();\r\n        dispatch(actions.mouseUp());\r\n    }\r\n\r\n    const handleScroll = (event) => {\r\n        event.preventDefault();\r\n        dispatch(actions.scrollView(event.target.scrollLeft, event.target.scrollTop));\r\n    }\r\n\r\n    const handleMouseLeave = (event) => {\r\n        dispatch(actions.setHoverCell({rowIndex: -1, colIndex: -1}));\r\n    }\r\n\r\n    if( elementRef.current ) {\r\n        // set the scrollposition\r\n        // this.refs.messages.scrollTop = this.refs.messages.scrollHeight\r\n        elementRef.current.scrollLeft = vXOffset * props.config.cellWidth;\r\n        elementRef.current.scrollTop = vYOffset * props.config.cellHeight;\r\n    }\r\n\r\n    console.log('GRID RE-RENDERED');\r\n\r\n    return(\r\n        <div ref={elementRef} className=\"text-grid-area\"\r\n            onScroll={handleScroll}\r\n            draggable\r\n            tabIndex='0'\r\n            onKeyDown={handleKeyPress}\r\n            onMouseMove={handleMouseMove} \r\n            onMouseUp={handleMouseUp}\r\n            onMouseDown={handleMouseDown}\r\n            onMouseLeave={handleMouseLeave}>\r\n            <div  className=\"text-grid\">\r\n\r\n                {rowsArr.map((cr, rowIndex) =>\r\n                    <TextGridRow key={`gridRow-${rowIndex}`} rowId={rowIndex + vYOffset}></TextGridRow> \r\n                )}\r\n                <TextGridRangeSelection></TextGridRangeSelection>\r\n            </div>\r\n            <div style={{width: 10000, height: 10000, position: 'absolute'}}></div>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n/**\r\n * Rhis component renders each row of cells\r\n */\r\nfunction TextGridRow(props) {\r\n    \r\n    const rowId = props.rowId;\r\n    const cellHeight = useSelector(state => state.cellHeight);\r\n    const vCols = useSelector(state => state.viewport.cols);\r\n    const vXOffset = useSelector(state => state.viewport.xOffset);\r\n    const cellArr = vCols > 0 ? new Array(vCols).fill('') : [];\r\n\r\n    console.log('ROW RE-RENDERED');\r\n\r\n    return(<div className={'text-grid-row'} style={{height: cellHeight, maxHeight: cellHeight, minHeight: cellHeight}}>\r\n        {cellArr.map((cell, colId) => {\r\n            const colIndex = colId + vXOffset;\r\n            return (<TextGridCell key={'cell-'+rowId+'-'+colIndex} rowId={rowId} colId={colIndex} ></TextGridCell>);\r\n        })}\r\n    </div>);\r\n}\r\n\r\n/**\r\n * This component renders an individual cell within the table.\r\n */\r\nfunction TextGridCell(props) {\r\n\r\n    const rowId = props.rowId;\r\n    const colId = props.colId;\r\n\r\n    const cell = useSelector(state => {\r\n        if(rowId < state.cells.length && colId < state.cells[rowId].length)\r\n            return state.cells[rowId][colId];\r\n        return '';\r\n    });\r\n    \r\n    const cellWidth = useSelector(state => state.cellWidth);\r\n\r\n    const isRowHovered = useSelector (state => state.hover.rowIndex === rowId );\r\n    const isColHovered = useSelector (state => state.hover.colIndex === colId );\r\n    const isCellSelected = useSelector (state => state.target.rowIndex === rowId && state.target.colIndex === colId);\r\n\r\n    // the isCellSelected ternary is used to prevent re-rendering of every cell when the direction changes\r\n    const textDirX = useSelector(state => isCellSelected ? state.target.dir.x : 0);\r\n    const textDirY = useSelector(state => isCellSelected ? state.target.dir.y : 0);\r\n    \r\n    const isCellHovered =  isRowHovered && isColHovered;\r\n    \r\n    \r\n\r\n    const getClassNames = () => {\r\n\r\n        const classNames = ['text-grid-cell'];\r\n\r\n        if( isCellHovered ) classNames.push( 'cell-hover' );\r\n        if( isRowHovered )  classNames.push('row-hover');\r\n        if( isColHovered ) classNames.push('col-hover');\r\n        if( isCellSelected ) classNames.push('active-override');\r\n        if( isCellSelected && textDirX > 0 ) classNames.push('active-override-left');\r\n        if( isCellSelected && textDirX < 0 ) classNames.push('active-override-right');\r\n        if( isCellSelected && textDirY > 0 ) classNames.push('active-override-top');\r\n        if( isCellSelected && textDirY < 0 ) classNames.push('active-override-bottom');\r\n\r\n        return classNames.join(' ');\r\n    }\r\n\r\n    return(<span className={getClassNames()}  style={{width: cellWidth, maxWidth: cellWidth, minWidth: cellWidth}} >\r\n        <div className=\"text-grid-cell-content\">\r\n            {cell}\r\n        </div>\r\n    </span>);\r\n}\r\n\r\n/**\r\n * This component renders the text selection area\r\n */\r\nfunction TextGridRangeSelection() {\r\n\r\n    const selection = useSelector(state => state.selection );\r\n    const cellWidth = useSelector(state => state.cellWidth);\r\n    const cellHeight = useSelector(state => state.cellHeight);\r\n    const viewport = useSelector(state => state.viewport);\r\n\r\n    // with the viewport in place, we need to calculate the relative position of the selction box\r\n    let sci = selection.startColIndex - viewport.xOffset;\r\n    const eci = selection.endColIndex - viewport.xOffset;\r\n    let sri = selection.startRowIndex - viewport.yOffset;\r\n    const eri = selection.endRowIndex - viewport.yOffset;\r\n\r\n    // if we are dragging upward, than our selection needs to start from the\r\n    // top of the next row.\r\n    if(eri < sri) { sri += 1; }\r\n    if(eci < sci) { sci += 1; }\r\n\r\n    // calculate the size and position of the selection box\r\n    // position is relative to the top left of the TextGrid component\r\n    const width = ((eci - sci) * (cellWidth-1));\r\n    const height = (eri- sri + 1) * (cellHeight-1) + ((eri - sri) < 0 ? -(cellHeight-1) : 0);\r\n    const left = (sci * (cellWidth-1)) + Math.min(width, 0);\r\n    const top = (sri * (cellHeight-1)) + Math.min(height, 0);\r\n    let style={ width: Math.abs(width), height: Math.abs(height), left, top };\r\n\r\n    if(width === 0 || height === 0)\r\n        style.display = 'none';\r\n\r\n    // render the selection grid.\r\n    return(<div className='text-grid-selection' style={style}></div>);\r\n}\r\n\r\n\r\n/**\r\n * \r\n */\r\nexport function TextGridStatusBar() {\r\n    const viewport = useSelector(state => state.viewport );\r\n    const target = useSelector(state => state.target);\r\n    const selection = useSelector(state => state.selection);\r\n\r\n    return(<div className=\"text-grid-status-bar\">\r\n        <ul>\r\n            <li>R: {viewport.rows}</li>\r\n            <li>C: {viewport.cols}</li>\r\n            <li>SX: {viewport.xOffset}</li>\r\n            <li>SY: {viewport.yOffset}</li>\r\n            <li>TX: {target.colIndex}{}</li>\r\n            <li>TY: {target.rowIndex}{}</li>\r\n\r\n            <li>SX: {selection.startColIndex}</li>\r\n            <li>SY: {selection.startRowIndex}</li>\r\n            <li>EX: {selection.endColIndex}</li>\r\n            <li>EY: {selection.endRowIndex}</li>\r\n            <li>dragging: {selection.isDragging ? 'true' : 'false'}</li>\r\n            <li>mouseDown: {selection.isMouseDown? 'true' : 'false'}</li>\r\n            \r\n        </ul>\r\n    </div>);\r\n}\r\n\r\n\r\n\r\n","import React, {useState, useEffect, forwardRef, useImperativeHandle} from 'react';\r\nimport './Terminal.scss';\r\nimport { none } from '../TextGrid/store/actions';\r\n\r\n/**\r\n * This is the terminal window\r\n * i got a bit lazy with this component and have not used the redux sotre\r\n * TODO: refactor\r\n */\r\nexport const Terminal = forwardRef((props, ref) => {\r\n\r\n    let [readOnlyPos, setReadOnlyPos] = useState(1);\r\n    let [consoleText, setConsoleText] = useState('');\r\n\r\n    const commands = {\r\n        clear: (args) => { clearConsole(); },\r\n        echo: (args) => { printLine(args.join(' ')); },\r\n        ...props.commands\r\n    };\r\n\r\n    const submitLine = (line) => {\r\n        \r\n        // the onEnter method should return true to prevent default behaviour\r\n        if( props.onEnter && props.onEnter(line) ) {\r\n            return;\r\n        }\r\n        \r\n        const lineItems = line.split(' ');\r\n\r\n        if(lineItems.length === 0)\r\n            return;\r\n\r\n        const [cmd, ...args] = lineItems;\r\n\r\n        if(commands[cmd] !== undefined){\r\n            commands[cmd](args);\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    const printLine = (value) => {\r\n        setConsoleText(consoleText + '\\n ' + value); consoleText += '\\n' + value; // HACK\r\n    }\r\n\r\n\r\n    let wasCleared = false;\r\n    const clearConsole = () => {\r\n        setConsoleText('> '); consoleText = '> ';\r\n        setReadOnlyPos(2); readOnlyPos = 2;\r\n        wasCleared = true;\r\n    }\r\n\r\n    const onEnter = () => {\r\n        // submitLine should return true to prevent default behaviour\r\n        submitLine(consoleText.substr(readOnlyPos));\r\n        if( wasCleared === false ) {\r\n            setConsoleText(consoleText + '\\n> '); consoleText += '\\n> '; // HACK\r\n            setReadOnlyPos(consoleText.length);\r\n        }\r\n        wasCleared = false;\r\n    };\r\n\r\n    const handleKeyDown = (event) => {\r\n\r\n        if (event.key.length === 1) {\r\n            // allow printable characters\r\n        }\r\n        else if(event.key === 'Enter') {\r\n            onEnter();\r\n            event.preventDefault();\r\n        }\r\n        else if(event.key === 'Backspace') {\r\n            if(event.target.selectionStart <= readOnlyPos)\r\n                event.preventDefault();\r\n        }\r\n        else if(event.key === 'Delete') {\r\n            if(event.target.selectionStart < readOnlyPos)\r\n                event.preventDefault();\r\n        }\r\n    }\r\n\r\n    const handleSelect = (event) => {\r\n        if(event.target.selectionStart === readOnlyPos-1){\r\n            event.target.setSelectionRange(readOnlyPos, readOnlyPos);\r\n        }\r\n        else if(event.target.selectionStart < readOnlyPos-1){\r\n            event.target.setSelectionRange(event.target.value.length, event.target.value.length);\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setConsoleText(event.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setConsoleText('> ');\r\n        setReadOnlyPos(2);\r\n    }, []);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        print: (text) => {\r\n            const newText = consoleText + text;\r\n            setConsoleText(newText);\r\n            setReadOnlyPos((consoleText + text).length);\r\n        },\r\n        submitInput() {\r\n            submitLine('');\r\n            setConsoleText(consoleText + '\\n> '); consoleText += '\\n> '; // HACK\r\n            setReadOnlyPos(consoleText.length);\r\n        }\r\n    }), [submitLine, consoleText]);\r\n\r\n    return(<div className=\"terminal\" style={{maxHeight: 200, height: 200, display: 'flex', border: props.disabled ? '10px solid red' : none}}>\r\n        \r\n        <textarea wrap=\"off\" spellCheck=\"false\" value={consoleText}\r\n            onChange={handleChange}\r\n            onKeyDown={handleKeyDown}\r\n            onSelect={handleSelect}>\r\n        </textarea>\r\n    </div>);\r\n});","import React from 'react';\r\nimport './Toolbar.scss';\r\n\r\nexport function Toolbar(props) {\r\n\r\n\r\n    const items = props.items || [];\r\n    \r\n\r\n    return(<div className=\"toolbar\">\r\n        <ul>\r\n            {items.map( (item, index) => {\r\n                return(<li key={'tbitem-'+index} className={item.classNames} onClick={item.onClick}>{item.text}</li>);\r\n            })}\r\n        </ul>\r\n    </div>);\r\n}","export default class BefungeInterpreter {\r\n    \r\n    constructor(program) {\r\n        \r\n        this.program = program;\r\n        this.numRows = this.program.length;\r\n        this.numCols = Math.max( this.program.map(r => r.length) );\r\n        this.stack = [];\r\n\r\n        this.onInstructionExecutedCb = null;\r\n        this.onConsoleOutCb = null;\r\n        this.onProgramTerminateCb = null;\r\n        this.onRequestConsoleInputCb = null;\r\n        this.onStackChangeCb = null;\r\n\r\n        this.currentInstruction = null;\r\n        this.nextInstruction = { x: 0, y: 0, i: program[0][0], ...this.getInstructionDir(1, 0, program[0][0]) };\r\n        this.stringMode = false;\r\n\r\n        this.waitingForInput = false;\r\n\r\n        this.inputStack = [];\r\n    }\r\n\r\n    step() {\r\n\r\n        if(this.waitingForInput)\r\n            return;\r\n        \r\n        this.currentInstruction = this.nextInstruction;\r\n        let ci = this.currentInstruction;\r\n\r\n\r\n        if(ci === null)\r\n            return;\r\n\r\n        if(this.stringMode) {\r\n            if( ci.i === '\"') {\r\n                this.stringMode = false;\r\n            }\r\n            else {\r\n                this.stack.push(ci.i.charCodeAt(0));\r\n            }\r\n        }\r\n        else if( ci.i.includes(['>', '<', 'v', '^', '?']) ) {\r\n            // direction modifiers already calculated\r\n        }\r\n        else if( ci.i >= '0' && ci.i <= '9') {\r\n            // push the number onto the stack\r\n            this.stack.push(parseInt(ci.i));\r\n        }\r\n        else if( ci.i === '+') {\r\n            // Addition: Pop a and b, then push a+b\r\n            const a = this.stack.pop();\r\n            const b = this.stack.pop();\r\n            this.stack.push(a + b);\r\n        }\r\n        else if( ci.i === '-') {\r\n            // Subtraction: Pop a and b, then push b-a\r\n            const a = this.stack.pop();\r\n            const b = this.stack.pop();\r\n            this.stack.push(b - a);\r\n        }\r\n        else if( ci.i === '*') {\r\n            // Multiplication: Pop a and b, then push a*b\r\n            const a = this.stack.pop();\r\n            const b = this.stack.pop();\r\n            this.stack.push(a * b);\r\n        }\r\n        else if( ci.i === '/') {\r\n            // Integer division: Pop a and b, then push b/a, rounded towards 0.\r\n            const a = this.stack.pop();\r\n            const b = this.stack.pop();\r\n            this.stack.push(b / a);\r\n        }\r\n        else if( ci.i === '%') {\r\n            // Modulo: Pop a and b, then push the remainder of the integer division of b/a.\r\n            const a = this.stack.pop();\r\n            const b = this.stack.pop();\r\n            this.stack.push(b % a);\r\n        }\r\n        else if( ci.i === '!') {\r\n            // Logical NOT: Pop a value. If the value is zero, push 1; otherwise, push zero.\r\n            const a = this.stack.pop();\r\n            this.stack.push(a === 0 ? 1 : 0);\r\n        }\r\n        else if( ci.i === '`') {\r\n            // yes, its the grave character!\r\n            // Greater than: Pop a and b, then push 1 if b>a, otherwise zero.\r\n            const a = this.stack.pop();\r\n            const b = this.stack.pop();\r\n            this.stack.push(b > a ? 1 : 0);\r\n        }\r\n        else if( ci.i === '_') {\r\n            // Pop a value; move right if value=0, left otherwise\r\n            this.stack.pop(); \r\n            // the direction was already calculated when we fetched this instruction, so we just need to pop off the value\r\n            // ci.dirY = 0;\r\n            // ci.dirX = a === 0 ? 1 : -1;\r\n        }\r\n        else if( ci.i === '|') {\r\n            // Pop a value; move down if value=0, up otherwise\r\n            this.stack.pop(); \r\n            // the direction was already calculated when we fetched this instruction, so we just need to pop off the value\r\n            // ci.dirY = 0;\r\n            // ci.dirX = a === 0 ? 1 : -1;\r\n        }\r\n        else if(ci.i === '\"') {\r\n            // Start string mode: push each character's ASCII value all the way up to the next \" quote character\r\n            this.stringMode = !this.stringMode;\r\n        }\r\n        else if( ci.i === ':') {\r\n            // Duplicate value on top of the stack\r\n            this.stack.push( this.stack[this.stack.length -1]);\r\n        }\r\n        else if( ci.i === '\\\\') {\r\n            // Swap two values on top of the stack\r\n            const a = this.stack.pop();\r\n            const b = this.stack.pop();\r\n            this.stack.push(a);\r\n            this.stack.push(b);\r\n        }\r\n        else if( ci.i === '$') {\r\n            // Pop value from the stack and discard it\r\n            this.stack.pop();\r\n        }\r\n        else if( ci.i === '.' ) {\r\n            // Pop value and output as an integer followed by a space\r\n            const a = this.stack.pop();\r\n            this.onConsoleOutCb( a );\r\n        }\r\n        else if( ci.i === ',' ) {\r\n            // Pop value and output as ASCII character\r\n            const a = this.stack.pop();\r\n            this.onConsoleOutCb( String.fromCharCode(a) );\r\n        }\r\n        else if( ci.i === '#' ) {\r\n            // Bridge: Skip next cell\r\n            ci.dirX *= 2;\r\n            ci.dirY *= 2\r\n        }\r\n        else if( ci.i === 'p' ) {\r\n            // A \"put\" call (a way to store a value for later use). Pop y, x, and v, then change the character at (x,y) in the program to the character with ASCII value v\r\n            const y = this.stack.pop();\r\n            const x = this.stack.pop();\r\n            const v = this.stack.pop();\r\n            const newInstruction = String.fromCharCode(v);\r\n            this.program[y][x] = newInstruction;\r\n            // TODO: update the editor text\r\n        }\r\n\r\n        else if( ci.i === 'g') {\r\n            // A \"get\" call (a way to retrieve data in storage). Pop y and x, then push ASCII value of the character at that position in the program\r\n            const y = this.stack.pop();\r\n            const x = this.stack.pop();\r\n            const val = this.program[y][x]; // TODO: grow program size\r\n            this.stack.push(val);\r\n        }\r\n        else if( ci.i === '&' ) {\r\n            // Ask user for a number and push it\r\n            // TODO: ask the user for a number\r\n            if(this.inputStack.length === 0) {\r\n                this.waitingForInput = true;\r\n                if( this.onRequestConsoleInputCb ) {\r\n                    this.onRequestConsoleInputCb();\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                const val = this.inputStack.shift();\r\n                this.stack.push(parseInt(val));\r\n            }\r\n        }\r\n        else if( ci.i === '~' ) {\r\n            // Ask user for a character and push its ASCII value\r\n            if(this.inputStack.length === 0) {\r\n                this.waitingForInput = true;\r\n                if( this.onRequestConsoleInputCb ) {\r\n                    this.onRequestConsoleInputCb();\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                const val = this.inputStack.shift();\r\n                this.stack.push(val.charCodeAt(0));\r\n            }\r\n        }\r\n        else if( ci.i === '@') {\r\n            // End of program\r\n            ci.dirX = 0;\r\n            ci.dirY = 0;\r\n\r\n            if(this.onProgramTerminateCb){\r\n                this.onProgramTerminateCb();\r\n            }\r\n        }\r\n\r\n        if(this.onStackChangeCb) {\r\n            this.onStackChangeCb();\r\n        }\r\n\r\n        const ni = this.getNextInstruction();\r\n        this.nextInstruction = ni;\r\n\r\n        \r\n        if( this.onInstructionExecutedCb )\r\n            this.onInstructionExecutedCb(ci, ni);\r\n    }\r\n\r\n    getNextInstruction() {\r\n        const ci = this.currentInstruction;\r\n        let nx = ci.x + ci.dirX;\r\n        let ny = ci.y + ci.dirY;\r\n\r\n        // wrap the instructions\r\n        if( ny < 0 ) ny = this.numRows - 1;\r\n        if( nx < 0 ) nx = this.numCols - 1;\r\n        if( ny >= this.numRows ) ny = 0;\r\n        if( nx >= this.numCols ) nx = 0;\r\n        \r\n        const instruction = (nx < this.program[ny].length) ? this.program[ny][nx] : '';\r\n        const instructionDir = this.getInstructionDir(ci.dirX, ci.dirY, instruction);\r\n        \r\n        return {x: nx, y: ny, i: instruction, ...instructionDir };\r\n    }\r\n\r\n    getInstructionDir(cDirX, cDirY, instruction) {\r\n        let dirX = cDirX;\r\n        let dirY = cDirY;\r\n        switch(instruction) {\r\n            case '>': { dirX = 1; dirY = 0; break; }\r\n            case '<': { dirX =-1; dirY = 0; break; }\r\n            case '^': { dirX = 0; dirY =-1; break; }\r\n            case 'v': { dirX = 0; dirY = 1; break; }\r\n            case '?': { \r\n                const dir = Math.floor(Math.random() * 4);\r\n                if( dir === 0 ) { dirX = 1; dirY = 0 } // left\r\n                if( dir === 1 ) { dirX = 0; dirY = 1 } // down\r\n                if( dir === 2 ) { dirX =-1; dirY = 0 } // right\r\n                if( dir === 3 ) { dirX = 0; dirY =-1 } // up\r\n                break;\r\n            }\r\n            case '_': {\r\n                const a = this.stack[this.stack.length - 1];\r\n                dirY = 0;\r\n                dirX = a === 0 ? 1 : -1;\r\n                break;\r\n            }\r\n            case '|': {\r\n                const a = this.stack[this.stack.length - 1];\r\n                dirY = a === 0 ? 1 : -1;\r\n                dirX = 0;\r\n                break;\r\n            }\r\n            default: break;\r\n        }\r\n\r\n        return {dirX, dirY};\r\n    }\r\n\r\n    input(val) {\r\n        this.inputStack.push(val);\r\n        this.waitingForInput = false;\r\n        \r\n    }\r\n\r\n    onInstructionExecuted(callback) {\r\n        this.onInstructionExecutedCb = callback;\r\n    }\r\n    onConsoleOut(callback) {\r\n        this.onConsoleOutCb = callback;\r\n    }\r\n    onRequestConsoleInput(callback) {\r\n        this.onRequestConsoleInputCb = callback;\r\n    }\r\n\r\n    onProgramTerminate(callback) {\r\n        this.onProgramTerminateCb = callback;\r\n    }\r\n    onStackChange(callback) {\r\n        this.onStackChangeCb = callback;\r\n    }\r\n}\r\n","\r\nimport React, {useRef, forwardRef, useState} from 'react';\r\nimport { TextGrid, TextGridStatusBar, actions} from '../TextGrid';\r\nimport { Terminal } from '../Terminal';\r\nimport { Toolbar } from '../Toolbar';\r\nimport BefungeInterpreter from './BefungeInterpreter';\r\nimport { store as textGridStore } from '../../store';\r\n\r\nimport './BefungeIde.scss';\r\n\r\nlet runIntervilleTimer = null;\r\n\r\nconst BefungeIde = forwardRef((props, ref) => {\r\n\r\n    let [befungeInterpreter, setBefungeInterpreter] = useState(null);\r\n    let [befungeStackStr, setBefungeStackStr] = useState([]);\r\n    let befungeStack = []; \r\n    try { befungeStack = JSON.parse(befungeStackStr); }\r\n    catch(err){}\r\n    \r\n\r\n    const handleKeyPress = (store, key) => {\r\n        if( key === 'v') return { preventDefault: false, actions: [actions.setTypeingDir( 0, 1)] };\r\n        if( key === '>') return { preventDefault: false, actions: [actions.setTypeingDir( 1, 0)] };\r\n        if( key === '<') return { preventDefault: false, actions: [actions.setTypeingDir(-1, 0)] };\r\n        if( key === '^') return { preventDefault: false, actions: [actions.setTypeingDir( 0,-1)] };\r\n        return { };\r\n    }\r\n\r\n    const setCursorPos = (rowIndex, colIndex) => {\r\n        textGridStore.dispatch(actions.setTargetCell(rowIndex, colIndex));\r\n    };\r\n\r\n    const setCursorDir = (xDir, yDir) => {\r\n        textGridStore.dispatch(actions.setTypeingDir(xDir, yDir));\r\n    }\r\n\r\n    const initProgram = () => {\r\n        const cells = textGridRef.current.getCells();\r\n        const interpreter = new BefungeInterpreter(cells);\r\n        \r\n        interpreter.onInstructionExecuted((li, ni) => {\r\n            if(ni !== null ) {\r\n                textGridStore.dispatch(actions.setTargetCell( ni.y, ni.x ));\r\n                textGridStore.dispatch(actions.setTypeingDir( ni.dirX, ni.dirY ));\r\n            }\r\n        });\r\n        interpreter.onStackChange(() => {\r\n            setBefungeStackStr(JSON.stringify(befungeInterpreter.stack, 4));\r\n        })\r\n        interpreter.onConsoleOut(text => {\r\n            terminalRef.current.print(text);\r\n        });\r\n        interpreter.onProgramTerminate(() => {\r\n            clearInterval(runIntervilleTimer);\r\n            runIntervilleTimer = null;\r\n            setBefungeInterpreter(null);\r\n            terminalRef.current.print('\\nProgram Terminated!\\n');\r\n            terminalRef.current.submitInput();\r\n        });\r\n        interpreter.onRequestConsoleInput(() => {\r\n            const input = window.prompt(\"Enter a value\", \"\");\r\n            if(befungeInterpreter && befungeInterpreter.waitingForInput && input)\r\n                befungeInterpreter.input(input);\r\n\r\n        });\r\n\r\n        befungeInterpreter = interpreter; // hack\r\n        setBefungeInterpreter(interpreter);\r\n\r\n\r\n        textGridStore.dispatch(actions.setTargetCell( 0, 0 ));\r\n        textGridStore.dispatch(actions.setTypeingDir( 1, 0 ));\r\n    }\r\n\r\n    const debugProgram = () => {\r\n        initProgram();\r\n    };\r\n\r\n    \r\n    const runProgram = () => {\r\n        initProgram();\r\n        runIntervilleTimer = setInterval(() => {\r\n            stepProgram();\r\n        }, 50);\r\n    };\r\n\r\n    const stepProgram = () => {\r\n        befungeInterpreter.step();\r\n    };\r\n\r\n    const terminalCommands = {\r\n        'set-cursor-pos': (args) => { setCursorPos(parseInt(args[0]), parseInt(args[1])); },\r\n        'set-cursor-dir': (args) => { setCursorDir(parseInt(args[0]), parseInt(args[1])); },\r\n        'run': (args) => { runProgram() },\r\n        'next': (args) => { stepProgram(); },\r\n        'stack': (args) => { console.log( befungeInterpreter.stack); }\r\n    };\r\n\r\n    const terminalOnEnter = (input) => {\r\n        if(befungeInterpreter && befungeInterpreter.waitingForInput)\r\n            befungeInterpreter.input(input);\r\n    }\r\n\r\nconst prog = \r\n`>              v\r\nv  ,,,,,\"Hello\"<\r\n>48*,          v\r\nv,,,,,,\"World!\"<\r\n>25*,@`;\r\n\r\n// const prog = \r\n// `64+\"!dlroW ,olleH\">:#,_@`;\r\n\r\n// const prog = \r\n// `~:1+!#@_,`;\r\n\r\n    const config = {\r\n        cellWidth: 32,\r\n        cellHeight: 32,\r\n        text: prog,\r\n        events: {\r\n            onKeyDown: handleKeyPress\r\n        },\r\n        terminalCommands\r\n    }\r\n\r\n    const textGridRef = useRef();\r\n    const terminalRef = useRef();\r\n\r\n    const toolbar = [];\r\n    if( befungeInterpreter === null ) {\r\n        toolbar.push({ text: 'Run', classNames: 'button', onClick: () => runProgram() });\r\n        toolbar.push({ text: 'Debug', classNames: 'button', onClick: () => debugProgram() },);\r\n    }\r\n    else {\r\n        toolbar.push({ text: 'Stop', classNames: 'button', onClick: () => setBefungeInterpreter(null) });\r\n        toolbar.push({ text: 'Step', classNames: 'button', onClick: () => stepProgram() });\r\n    }\r\n\r\n    \r\n    return(\r\n    <div className=\"befungeIde\">\r\n        \r\n        <div className=\"main\">\r\n            <Toolbar items={toolbar}></Toolbar>\r\n            <TextGrid ref={textGridRef} config={config} ></TextGrid>\r\n            <Terminal ref={terminalRef} commands={terminalCommands} onEnter={terminalOnEnter}></Terminal>\r\n            <TextGridStatusBar></TextGridStatusBar>\r\n        </div>\r\n        <div className=\"asside\">\r\n            <div className=\"asside-header\">\r\n                Stack\r\n            </div>\r\n            <div className=\"asside-section\">\r\n                <ul class=\"befunge-stack-view\">\r\n                    { befungeStack.reverse().map(item => <li>\r\n                        <span style={{float:'left'}}>{item}</span>\r\n                        <span style={{float:'right'}}>{String.fromCharCode(item)}</span>\r\n                    </li> ) }\r\n                </ul>\r\n            \r\n            </div>\r\n        </div>\r\n    </div>);\r\n});\r\n\r\nexport default BefungeIde;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.scss';\nimport BefungeIde from './Components/BefungeIde/BefungeIde';\nimport { store } from './store';\n\n\nexport default function App() {\n\n    return (\n        <Provider store={store}>\n            <div className=\"App\" style={{width: 'calc(100%)', height: 'calc(100% )', overflow: 'hidden'}}>    \n                <BefungeIde></BefungeIde>\n            </div>\n        </Provider>\n    );\n}\n"],"sourceRoot":""}