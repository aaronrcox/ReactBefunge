{"version":3,"sources":["Components/TextGrid/store/actions.js","Components/TextGrid/store/reducers.js","Components/TextGrid/store/epics.js","Components/TextGrid/store/index.js","Components/TextGrid/TextGrid.js","Components/TextGrid/index.js","serviceWorker.js","index.js","App.js"],"names":["NO_OP","SETUP_GRID","INITIALISE_GRID","MOUSE_MOVED","MOUSE_DOWN","MOUSE_UP","SCROLL_VIEW","DRAG","KEY_DOWN","SET_HOVER_CELL","SET_CELL_VALUE","SET_TARGET_CELL","MOVE_TARGET_CELL","INSERT_ROW","INSERT_COL","DELETE_ROW","DELETE_COL","SET_SELECTION_AREA","CLEAR_SELECTION_AREA","SET_TYPEING_DIRECTION","none","type","setupGrid","width","height","text","cellWidth","cellHeight","payload","initialiseGrid","mouseMoved","mousePos","mouseDown","mouseUp","scrollView","xOffset","yOffset","drag","keyDown","setHoverCell","setCellValue","setTargetCell","moveTargetCell","x","y","invert","setSelectionArea","clearSelectionArea","insertRow","rowIndex","insertCol","colIndex","deleteRow","deleteCol","setTypeingDir","initialState","rows","cols","cells","insertMode","viewport","hover","cellIndex","target","dir","selection","isMouseDown","isDragging","startRowIndex","startColIndex","endRowIndex","endColIndex","selectedCells","epics","combineEpics","action","state","pipe","ofType","actions","mergeMap","console","log","value","Math","floor","replace","split","map","line","mx","mouseX","my","mouseY","hoverState","newActions","push","key","isShiftDown","cbResult","callback","cbActions","preventDefault","length","undefined","includes","epicMiddleware","createEpicMiddleware","store","createStore","arr","_fillArrCells","modifier","xDir","yDir","dx","dy","numCols","max","_moveTarget","splice","sri","min","eri","sci","eci","r","c","applyMiddleware","run","TextGrid","props","dispatch","useDispatch","useSelector","rowsArr","Array","fill","ref","useRef","useEffect","current","offsetWidth","offsetHeight","config","className","onScroll","event","scrollLeft","scrollTop","draggable","tabIndex","onKeyDown","shiftKey","events","onMouseMove","bounds","currentTarget","getBoundingClientRect","clientX","left","clientY","top","onMouseUp","onMouseDown","focus","cr","TextGridRow","rowId","TextGridRangeSelection","style","position","cellArr","maxHeight","minHeight","cell","colId","cellId","TextGridCell","isRowHovered","isColHovered","textDirX","textDirY","isCellHovered","isCellSelected","classNames","join","getClassNames","maxWidth","minWidth","abs","display","TextGridStatusBar","TextGridConsole","useState","readOnlyPos","setReadOnlyPos","consoleText","setConsoleText","clearConsole","onEnter","commands","clear","args","echo","printLine","lineItems","cmd","submitLine","substr","wrap","spellCheck","onChange","selectionStart","onSelect","setSelectionRange","flexDirection","Boolean","window","location","hostname","match","ReactDOM","render","overflow","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e934be97.chunk.js","sourcesContent":["export const NO_OP = '[TextGrid] NO Op';\r\n\r\nexport const SETUP_GRID = '[TextGrid] Setup';\r\nexport const INITIALISE_GRID = '[TextGrid] Initialise';\r\n\r\nexport const MOUSE_MOVED = '[TextGrid] MouseMoved';\r\nexport const MOUSE_DOWN = '[TextGrid] Mouse Pressed';\r\nexport const MOUSE_UP = '[TextGrid] Mouse Released';\r\n\r\nexport const SCROLL_VIEW = '[TextGrid] Scroll View';\r\n\r\nexport const DRAG = '[TextGrid] Drag';\r\n\r\nexport const KEY_DOWN = '[TextGrid] Key Down';\r\n\r\nexport const SET_HOVER_CELL = '[TextGrid] Set Hover Cell';\r\nexport const SET_CELL_VALUE = '[TextGrid] Set Cell Text';\r\n\r\nexport const SET_TARGET_CELL = '[TextGrid] Set Target Cell';\r\nexport const MOVE_TARGET_CELL = '[TextGrid] Move Target Cell';\r\n\r\nexport const INSERT_ROW = '[TextGrid] Insert Row';\r\nexport const INSERT_COL = '[TextGrid] Insert Col';\r\nexport const DELETE_ROW = '[TextGrid] Delete Row';\r\nexport const DELETE_COL = '[TextGrid] Delete Col';\r\n\r\nexport const SET_SELECTION_AREA = '[TextGrid] Set Selection Area';\r\nexport const CLEAR_SELECTION_AREA = '[TextGrid] Clear Selection';\r\n\r\nexport const SET_TYPEING_DIRECTION = '[TextGrid] Set Text Direction';\r\n\r\n// TODO ACTIONS:\r\n// - COPY SELECTION\r\n// - CUT SELECTION\r\n// - PASTE SELECTION\r\n// - FILL SELECTION\r\n\r\n\r\n// TODO BEHAVIOURS:\r\n// - allow for dynamic resize calculations\r\n// - move viewport when target is near borders\r\n// - ability to change direction of tyed text\r\n\r\n\r\nexport function none() {\r\n    return { type: NO_OP }\r\n}\r\n\r\nexport function setupGrid(width, height, text, cellWidth, cellHeight) {\r\n    return { type: SETUP_GRID, payload: {width, height, text, cellWidth, cellHeight} }\r\n}\r\n\r\nexport function initialiseGrid(payload) {\r\n    return { type: INITIALISE_GRID, payload }\r\n}\r\n\r\nexport function mouseMoved(mousePos) {\r\n    return { type: MOUSE_MOVED, payload: mousePos };\r\n}\r\n\r\nexport function mouseDown() {\r\n    return { type: MOUSE_DOWN };\r\n}\r\n\r\nexport function mouseUp() {\r\n    return { type: MOUSE_UP };\r\n}\r\n\r\nexport function scrollView(xOffset, yOffset) {\r\n    return { type: SCROLL_VIEW, payload: {xOffset, yOffset}};\r\n}\r\n\r\nexport function drag() {\r\n    return { type: DRAG };\r\n}\r\n\r\nexport function keyDown(payload) {\r\n    return { type: KEY_DOWN, payload };\r\n}\r\n\r\nexport function setHoverCell(payload) {\r\n    return { type: SET_HOVER_CELL, payload };\r\n}\r\n\r\nexport function setCellValue(payload) {\r\n    return { type: SET_CELL_VALUE, payload};\r\n}\r\n\r\nexport function setTargetCell(payload) {\r\n    return { type: SET_TARGET_CELL, payload};\r\n}\r\n\r\nexport function moveTargetCell(x, y, invert) {\r\n    return { type: MOVE_TARGET_CELL, payload: {x, y, invert} };\r\n}\r\n\r\n\r\nexport function setSelectionArea(payload) {\r\n    // {startRowIndex, startColIndex, endRowIndex, endColIndex } \r\n    return { type: SET_SELECTION_AREA, payload};\r\n}\r\n\r\nexport function clearSelectionArea(payload) {\r\n    return {type: CLEAR_SELECTION_AREA };\r\n}\r\n\r\nexport function insertRow(rowIndex) {\r\n    return { type: INSERT_ROW, payload: {rowIndex}};\r\n}\r\n\r\nexport function insertCol(rowIndex, colIndex) {\r\n    return { type: INSERT_COL, payload: {rowIndex, colIndex}};\r\n}\r\n\r\nexport function deleteRow(rowIndex) {\r\n    return { type: DELETE_ROW, payload: {rowIndex}};\r\n}\r\n\r\nexport function deleteCol(rowIndex, colIndex) {\r\n    return { type: DELETE_COL, payload: {rowIndex, colIndex}};\r\n}\r\n\r\nexport function setTypeingDir(x, y) {\r\n    return { type: SET_TYPEING_DIRECTION, payload: {x, y} };\r\n}","import * as actions from './actions';\r\n\r\nconst initialState = {\r\n    cellWidth: 24,\r\n    cellHeight: 24, \r\n    rows: 0,    // TODO: set to length of cells\r\n    cols: 0,    // TODO: set to length of longest row in cells.\r\n    cells: [],\r\n    insertMode: false,\r\n\r\n    viewport: {\r\n        rows: 0,\r\n        cols: 0,\r\n        xOffset: 0,\r\n        yOffset: 0\r\n    },\r\n\r\n    hover: {\r\n        rowIndex: -1,\r\n        colIndex: -1,\r\n        cellIndex: -1 // TODO: refactor so cellindex is no longer used\r\n    },\r\n\r\n    target: {\r\n        rowIndex: -1,\r\n        colIndex: -1,\r\n        cellIndex: -1, // TODO: refactor so cellindex is no longer used\r\n        dir: {x: 1, y: 0}\r\n    },\r\n\r\n    selection: {\r\n        isMouseDown: false,\r\n        isDragging: false,\r\n        startRowIndex: 0,\r\n        startColIndex: 0,\r\n        endRowIndex: 0,\r\n        endColIndex: 0\r\n    },\r\n\r\n    \r\n\r\n    selectedCells: []\r\n};\r\n\r\nexport function reducer(state = initialState, action) {\r\n\r\n    switch(action.type) {\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.INITIALISE_GRID: {\r\n            return {...state, ...action.payload};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_HOVER_CELL: {\r\n            return {...state, hover: action.payload };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_CELL_VALUE: {\r\n\r\n            const rowIndex = action.payload.rowIndex ? action.payload.rowIndex : state.target.rowIndex;\r\n            const colIndex = action.payload.colIndex ? action.payload.colIndex : state.target.colIndex;\r\n            const value = action.payload.value;\r\n\r\n            const cells = state.cells;\r\n\r\n            _fillArrCells(cells, colIndex, rowIndex);\r\n            cells[rowIndex][colIndex] = value;\r\n            return {...state, cells };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_TARGET_CELL: {\r\n            const target = {...state.target, ...action.payload };\r\n            const selection = {\r\n                ...state.selection,\r\n                startRowIndex: target.rowIndex,\r\n                startColIndex: target.colIndex,\r\n                endRowIndex: target.rowIndex,\r\n                endColIndex: target.colIndex\r\n            };\r\n            return {...state, target, selection };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOVE_TARGET_CELL: {\r\n            const modifier = action.payload.invert ? -1 : 1;\r\n            const xDir = action.payload && action.payload.x !== undefined ? action.payload.x : state.target.dir.x;\r\n            const yDir = action.payload && action.payload.y !== undefined ? action.payload.y : state.target.dir.y;\r\n            const target = {...state.target, ..._moveTarget(state, state.target, xDir * modifier, yDir * modifier) };\r\n            const selection = {\r\n                ...state.selection,\r\n                startRowIndex: target.rowIndex,\r\n                startColIndex: target.colIndex,\r\n                endRowIndex: target.rowIndex,\r\n                endColIndex: target.colIndex\r\n            };\r\n            return { ...state, target, selection };\r\n        }\r\n\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.INSERT_ROW: {\r\n            const {rowIndex} = action.payload;\r\n            const cells = state.cells;\r\n            cells.splice(rowIndex, 0, []);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.INSERT_COL: {\r\n            const {rowIndex, colIndex} = action.payload;\r\n            const cells = state.cells;\r\n            while(cells.length <= rowIndex) cells.push([]);\r\n            while(cells[rowIndex].length <= colIndex) cells[rowIndex].push('');\r\n            cells[rowIndex].splice(colIndex, 0, '');\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DELETE_ROW: {\r\n            const {rowIndex} = action.payload;\r\n            const cells = state.cells;\r\n            cells.splice(rowIndex, 1);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DELETE_COL: {\r\n            console.log(actions.DELETE_COL);\r\n            const {rowIndex, colIndex} = action.payload;\r\n            const cells = state.cells;\r\n            if(cells.length <= rowIndex) return state;\r\n            if(cells[rowIndex].length <= colIndex) return state;\r\n            cells[rowIndex].splice(colIndex, 1);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_SELECTION_AREA: {\r\n            const selection = {...state.selection, ...action.payload};\r\n            const target = {\r\n                ...state.target,\r\n                rowIndex: selection.endRowIndex,\r\n                colIndex: selection.endColIndex,\r\n                cellIndex: selection.endRowIndex * state.cols + selection.endColIndex\r\n            };\r\n            return {...state, selection, target };\r\n        }\r\n\r\n        case actions.CLEAR_SELECTION_AREA: {\r\n            const cells = state.cells;\r\n            const sri = Math.min(state.selection.startRowIndex, state.selection.endRowIndex);\r\n            const eri = Math.max(state.selection.startRowIndex, state.selection.endRowIndex);\r\n            const sci = Math.min(state.selection.startColIndex, state.selection.endColIndex);\r\n            const eci = Math.max(state.selection.startColIndex, state.selection.endColIndex);\r\n\r\n            for(let r=sri; r<=eri && r < cells.length; r++){\r\n                for(let c=sci; c<=eci && c < cells[r].length; c++) {\r\n                    cells[r][c] = '';\r\n                }\r\n            }\r\n\r\n            return {...state, cells };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOUSE_DOWN: {\r\n            const target = {\r\n                ...state.target,\r\n                rowIndex: state.hover.rowIndex,\r\n                colIndex: state.hover.colIndex,\r\n                cellIndex: state.hover.cellIndex\r\n            };\r\n            const selection = {\r\n                ...state.selection,\r\n                startColIndex: target.colIndex,\r\n                startRowIndex: target.rowIndex,\r\n                endColIndex: target.colIndex,\r\n                endRowIndex: target.rowIndex,\r\n                isDragging: false, \r\n                isMouseDown: true};\r\n            return {...state,  target, selection}\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOUSE_UP: {\r\n            const selection = {...state.selection, isDragging: false, isMouseDown: false};\r\n            return {...state,  selection}\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SCROLL_VIEW: {\r\n            const {xOffset, yOffset} = action.payload;\r\n            const viewport = {...state.viewport, \r\n                xOffset: Math.floor(xOffset / state.cellWidth),\r\n                yOffset: Math.floor(yOffset / state.cellHeight)    \r\n            };\r\n            return { ...state, viewport };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DRAG: {\r\n\r\n            if( !state.selection.isDragging ) {\r\n                // Begin Dragging\r\n                const target = {\r\n                    ...state.target,\r\n                    rowIndex: state.hover.rowIndex,\r\n                    colIndex: state.hover.colIndex,\r\n                    cellIndex: state.hover.cellIndex\r\n                };\r\n                const selection = {...state.selection, isDragging: true};\r\n                \r\n    \r\n                return {...state, selection, target};\r\n            }\r\n            else {\r\n                // Continue dragging\r\n                const selection = {...state.selection};\r\n                selection.endRowIndex = state.hover.rowIndex;\r\n                selection.endColIndex = state.hover.colIndex;\r\n                selection.endColIndex += (selection.endColIndex < selection.startColIndex ? 0 : 1);\r\n                \r\n                const target = {\r\n                    ...state.target,\r\n                    rowIndex: state.hover.rowIndex,\r\n                    colIndex: state.hover.colIndex,\r\n                    cellIndex: state.hover.cellIndex\r\n                };\r\n                return {...state, selection, target };\r\n            }\r\n           \r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_TYPEING_DIRECTION: {\r\n            const target = { ...state.target };\r\n            target.dir = { ...action.payload };\r\n            return {...state, target };\r\n            //return state;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\n\r\nfunction _fillArrCells(arr, x, y) {\r\n    while(arr.length <= y)\r\n        arr.push([]);\r\n\r\n    while(arr[y].length <= x)\r\n        arr[y].push('');\r\n}\r\n\r\nfunction _moveTarget(state, target, dx, dy) {\r\n    const numCols = state.cols;\r\n\r\n    let rowIndex = target.rowIndex + dy;\r\n    let colIndex = target.colIndex + dx;\r\n\r\n    // prevent wrapping\r\n    rowIndex = Math.max(rowIndex, 0);\r\n    colIndex = Math.max(colIndex, 0);\r\n\r\n    // re-calculate the row/col index values based on the new cell index.\r\n    const cellIndex = rowIndex * numCols + colIndex;\r\n\r\n    \r\n    return { rowIndex, colIndex, cellIndex };\r\n}\r\n","import { combineEpics, ofType } from 'redux-observable';\r\nimport * as actions from './actions';\r\n\r\nimport { mergeMap } from 'rxjs/operators';\r\n\r\n\r\n\r\nconst setupGrid = (action, state) => action.pipe(\r\n    ofType(actions.SETUP_GRID),\r\n    mergeMap((action) => {\r\n\r\n        console.log(action);\r\n\r\n        const width = action.payload.width;\r\n        const height = action.payload.height;\r\n        const text = action.payload.text;\r\n\r\n        const cellWidth = action.payload.cellWidth || state.value.cellWidth;\r\n        const cellHeight = action.payload.cellHeight || state.value.cellHeight;\r\n\r\n        const rows = Math.floor(height / (cellHeight-1)) + 1;\r\n        const cols = Math.floor(width / (cellWidth-1)) + 1;\r\n        \r\n        const viewport = {\r\n            ...state.value.viewport,\r\n            rows,\r\n            cols\r\n        };\r\n\r\n        // create a 2D array of characters, [rows][cols]\r\n        // regex strips out the various line endings\r\n        const cells = text.replace(/\\r\\n/g, \"\\r\").replace(/\\n/g, \"\\r\").split(/\\r/).map(line => line.split(''));\r\n        \r\n        // initialise the grid with the above calculated data\r\n        return [ actions.initialiseGrid({cellWidth, cellHeight, rows, cols, cells, viewport}) ];\r\n    })\r\n);\r\n\r\nconst onMouseMoved = (action, state) => action.pipe(\r\n    ofType(actions.MOUSE_MOVED),\r\n    mergeMap((action) => {\r\n\r\n        // get mouse coordinates\r\n        const mx = action.payload.mouseX;\r\n        const my = action.payload.mouseY;\r\n\r\n        // subtract 1 from width and height for row/col/cell index calculations\r\n        const cellWidth = state.value.cellWidth - 1;\r\n        const cellHeight = state.value.cellHeight - 1;\r\n\r\n        const viewport = state.value.viewport;\r\n\r\n        // calculate the row/col/cell index the mouse is over\r\n        const rowIndex = Math.floor(my / cellHeight) + viewport.yOffset;\r\n        const colIndex = Math.floor(mx / cellWidth) + viewport.xOffset;\r\n        const cellIndex = rowIndex * state.value.cols + colIndex;\r\n        const hoverState = { rowIndex, colIndex, cellIndex };\r\n\r\n        const newActions = [];\r\n\r\n        // update the hover state\r\n        if(cellIndex !== state.value.hover.cellIndex) {\r\n            newActions.push(actions.setHoverCell(hoverState));\r\n        }\r\n\r\n        if(state.value.selection.isMouseDown) {\r\n            newActions.push(actions.drag());                   \r\n        }\r\n\r\n        // If we move the mouse while the mouse is down, than we will\r\n        // either begin the selection, or expand the selection\r\n        \r\n        \r\n        return newActions;\r\n    })\r\n);\r\n\r\n\r\nconst onKeyDown = (action, state) => action.pipe(\r\n    ofType(actions.KEY_DOWN),\r\n    mergeMap((action) => {\r\n        const key = action.payload.key;\r\n        const rowIndex = state.value.target.rowIndex;\r\n        const colIndex = state.value.target.colIndex;\r\n        const isShiftDown = action.payload.isShiftDown;\r\n        \r\n        const cbResult = action.payload.callback(state.value, key) || {};\r\n        const cbActions = cbResult.actions || [];\r\n        \r\n        if(cbResult.preventDefault) {\r\n            return cbActions;\r\n        }\r\n\r\n        if(key.length === 1) {\r\n            return [\r\n                ...cbActions,\r\n                actions.setCellValue({ rowIndex, colIndex, value: key }),\r\n                actions.moveTargetCell(),\r\n            ];\r\n        }\r\n        else {\r\n            if( key === 'Tab' ) {\r\n                const dir = isShiftDown ? -1 : 1;\r\n                return[ ...cbActions, actions.moveTargetCell(dir, 0) ];\r\n            }\r\n            if( key === 'Enter' ) {\r\n                const dir = isShiftDown ? -1 : 1;\r\n                return [ ...cbActions, actions.moveTargetCell(0, dir) ];\r\n            }\r\n            else if( key === 'Backspace') {\r\n                return [\r\n                    ...cbActions,\r\n                    actions.clearSelectionArea(),\r\n                    actions.setCellValue({ value: '' }),\r\n                    actions.moveTargetCell(undefined, undefined, true)\r\n                ];\r\n            }\r\n            else if( key === 'Delete') {\r\n                return [ \r\n                    ...cbActions, \r\n                    actions.clearSelectionArea(),\r\n                    actions.setCellValue({ rowIndex, colIndex, value: '' }) \r\n                ];\r\n            }\r\n            else if( key.includes('Arrow') )\r\n            {\r\n                // calculate xy direction of arrow key press\r\n                let dir = {x: 0, y: 0};\r\n                switch(key) {\r\n                    case 'ArrowLeft': dir.x = -1; break;\r\n                    case 'ArrowRight': dir.x = 1; break;\r\n                    case 'ArrowUp': dir.y = -1; break;\r\n                    case 'ArrowDown': dir.y = 1; break;\r\n                }\r\n\r\n                // if we press arrow keys while shift is pressed, we are selecting\r\n                // otherwise, we are moving the target cursor position.\r\n\r\n                if(isShiftDown) {\r\n                    // TODO: create action to grow/shrink the selection area\r\n                    const selection = { ...state.value.selection };\r\n                    const target = {...state.value.target };\r\n                    selection.endColIndex += dir.x;\r\n                    selection.endRowIndex += dir.y;\r\n                    return[  ...cbActions, actions.setSelectionArea(selection), actions.setTypeingDir(dir.x, dir.y) ];\r\n                }\r\n                else {\r\n                    return [\r\n                        ...cbActions, \r\n                        actions.moveTargetCell(dir.x, dir.y), \r\n                        actions.setTypeingDir(dir.x, dir.y)\r\n                    ];\r\n                }\r\n            }\r\n        }\r\n\r\n        return [];\r\n    })\r\n);\r\n\r\nexport const epics = combineEpics(\r\n    setupGrid,\r\n    onMouseMoved,\r\n    onKeyDown\r\n);\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport { createEpicMiddleware } from 'redux-observable';\r\nimport { reducer } from './reducers';\r\nimport { epics } from './epics';\r\nimport * as actions from './actions';\r\n\r\nexport { actions };\r\n\r\nexport * from './actions';\r\nexport * from './epics';\r\nexport * from './reducers';\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\nexport const store = createStore(reducer, applyMiddleware(epicMiddleware));\r\n\r\nepicMiddleware.run(epics);","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from './store/actions';\r\nimport './TextGrid.scss';\r\n\r\n\r\n/**\r\n * This component renders the text grid and handles\r\n */\r\nexport default function TextGrid(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const viewport = useSelector(state => state.viewport);\r\n    const rowsArr = viewport.rows > 0 ? new Array(viewport.rows).fill('') : [];\r\n\r\n    const ref = useRef(null);\r\n    useEffect(() => {\r\n        const width = ref.current ? ref.current.offsetWidth : 0;\r\n        const height = ref.current ? ref.current.offsetHeight: 0;\r\n\r\n        dispatch(actions.setupGrid(width, height, props.config.text, props.config.cellWidth, props.config.cellHeight));\r\n\r\n    }, [props, dispatch]);\r\n\r\n    const handleMouseMove = (event) => {\r\n        \r\n        // calculate the mouse position relative to the position of this component.\r\n        let bounds = event.currentTarget.getBoundingClientRect();\r\n        let mouseX = event.clientX - bounds.left;\r\n        let mouseY = event.clientY - bounds.top;\r\n        \r\n        dispatch(actions.mouseMoved({mouseX, mouseY}));\r\n    }\r\n\r\n    const handleKeyPress = (event) => {\r\n        event.preventDefault();\r\n        dispatch(actions.keyDown({ \r\n            key: event.key, \r\n            isShiftDown: event.shiftKey, \r\n            callback: props.config.events.onKeyDown\r\n        }));\r\n    }\r\n\r\n    const handleMouseDown = (event) => {\r\n        event.preventDefault();\r\n        event.currentTarget.focus();\r\n        dispatch(actions.mouseDown());\r\n    }\r\n\r\n    const handleMouseUp = (event) => {\r\n        event.preventDefault();\r\n        dispatch(actions.mouseUp());\r\n    }\r\n\r\n    const handleScroll = (event) => {\r\n        event.preventDefault();\r\n        dispatch(actions.scrollView(event.target.scrollLeft, event.target.scrollTop));\r\n    }\r\n\r\n    return(\r\n        <div ref={ref} className=\"text-grid-area\"\r\n            onScroll={handleScroll}\r\n            draggable\r\n            tabIndex='0'\r\n            onKeyDown={handleKeyPress}\r\n            onMouseMove={handleMouseMove} \r\n            onMouseUp={handleMouseUp}\r\n            onMouseDown={handleMouseDown} >\r\n            <div  className=\"text-grid\">\r\n\r\n                {rowsArr.map((cr, rowIndex) =>\r\n                    <TextGridRow key={`gridRow-${rowIndex}`} rowId={rowIndex + viewport.yOffset}></TextGridRow> \r\n                )}\r\n                <TextGridRangeSelection></TextGridRangeSelection>\r\n            </div>\r\n            <div style={{width: 10000, height: 10000, position: 'absolute'}}></div>\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * Rhis component renders each row of cells\r\n */\r\nfunction TextGridRow(props) {\r\n    \r\n    const rowId = props.rowId;\r\n    const cellHeight = useSelector(state => state.cellHeight);\r\n    const viewport = useSelector(state => state.viewport);\r\n    const numCols = useSelector(state=> state.cols);\r\n    const cellArr = viewport.cols > 0 ? new Array(viewport.cols).fill('') : [];\r\n\r\n    return(<div className={'text-grid-row'} style={{height: cellHeight, maxHeight: cellHeight, minHeight: cellHeight}}>\r\n        {cellArr.map((cell, colId) => {\r\n            const colIndex = colId + viewport.xOffset;\r\n            const cellId = rowId * numCols + colIndex;\r\n            return (<TextGridCell key={'cell-'+colIndex} rowId={rowId} colId={colIndex} cellId={cellId}></TextGridCell>);\r\n        })}\r\n    </div>);\r\n}\r\n\r\n/**\r\n * This component renders an individual cell within the table.\r\n */\r\nfunction TextGridCell(props) {\r\n\r\n    const rowId = props.rowId;\r\n    const colId = props.colId;\r\n    const cellId = props.cellId;\r\n\r\n    const cell = useSelector(state => {\r\n        if(rowId < state.cells.length && colId < state.cells[rowId].length)\r\n            return state.cells[rowId][colId];\r\n        return '';\r\n    });\r\n    \r\n    const cellWidth = useSelector(state => state.cellWidth);\r\n\r\n    const isRowHovered = useSelector (state => state.hover.rowIndex === rowId );\r\n    const isColHovered = useSelector (state => state.hover.colIndex === colId );\r\n    const textDirX = useSelector(state => state.target.dir.x);\r\n    const textDirY = useSelector(state => state.target.dir.y);\r\n    const isCellHovered =  isRowHovered && isColHovered;\r\n    const isCellSelected = useSelector (state => state.target.rowIndex === rowId && state.target.colIndex === colId);\r\n    \r\n\r\n    const getClassNames = () => {\r\n\r\n        const classNames = ['text-grid-cell'];\r\n\r\n        if( isCellHovered ) classNames.push( 'cell-hover' );\r\n        if( isRowHovered )  classNames.push('row-hover');\r\n        if( isColHovered ) classNames.push('col-hover');\r\n        if( isCellSelected ) classNames.push('active-override');\r\n        if( isCellSelected && textDirX > 0 ) classNames.push('active-override-left');\r\n        if( isCellSelected && textDirX < 0 ) classNames.push('active-override-right');\r\n        if( isCellSelected && textDirY > 0 ) classNames.push('active-override-top');\r\n        if( isCellSelected && textDirY < 0 ) classNames.push('active-override-bottom');\r\n\r\n        return classNames.join(' ');\r\n    }\r\n\r\n    return(<span className={getClassNames()}  style={{width: cellWidth, maxWidth: cellWidth, minWidth: cellWidth}} >\r\n        {cell}\r\n    </span>);\r\n}\r\n\r\n/**\r\n * This component renders the text selection area\r\n */\r\nfunction TextGridRangeSelection() {\r\n\r\n    const selection = useSelector(state => state.selection );\r\n    const cellWidth = useSelector(state => state.cellWidth);\r\n    const cellHeight = useSelector(state => state.cellHeight);\r\n    const viewport = useSelector(state => state.viewport);\r\n\r\n    // with the viewport in place, we need to calculate the relative position of the selction box\r\n    let sci = selection.startColIndex - viewport.xOffset;\r\n    const eci = selection.endColIndex - viewport.xOffset;\r\n    let sri = selection.startRowIndex - viewport.yOffset;\r\n    const eri = selection.endRowIndex - viewport.yOffset;\r\n\r\n    // if we are dragging upward, than our selection needs to start from the\r\n    // top of the next row.\r\n    if(eri < sri) { sri += 1; }\r\n    if(eci < sci) { sci += 1; }\r\n\r\n    // calculate the size and position of the selection box\r\n    // position is relative to the top left of the TextGrid component\r\n    const width = ((eci - sci) * (cellWidth-1));\r\n    const height = (eri- sri + 1) * (cellHeight-1) + ((eri - sri) < 0 ? -(cellHeight-1) : 0);\r\n    const left = (sci * (cellWidth-1)) + Math.min(width, 0);\r\n    const top = (sri * (cellHeight-1)) + Math.min(height, 0);\r\n    let style={ width: Math.abs(width), height: Math.abs(height), left, top };\r\n\r\n    if(width == 0 || height == 0)\r\n        style.display = 'none';\r\n\r\n    // render the selection grid.\r\n    return(<div className='text-grid-selection' style={style}></div>);\r\n}\r\n\r\n\r\n/**\r\n * \r\n */\r\nexport function TextGridStatusBar() {\r\n    const viewport = useSelector(state => state.viewport );\r\n    const target = useSelector(state => state.target);\r\n    const cells = useSelector(state => state.cells);\r\n    const selection = useSelector(state => state.selection);\r\n\r\n    return(<div className=\"text-grid-status-bar\">\r\n        <ul>\r\n            <li>R: {viewport.rows}</li>\r\n            <li>C: {viewport.cols}</li>\r\n            <li>SX: {viewport.xOffset}</li>\r\n            <li>SY: {viewport.yOffset}</li>\r\n            <li>TX: {target.colIndex}{}</li>\r\n            <li>TY: {target.rowIndex}{}</li>\r\n\r\n            <li>SX: {selection.startColIndex}</li>\r\n            <li>SY: {selection.startRowIndex}</li>\r\n            <li>EX: {selection.endColIndex}</li>\r\n            <li>EY: {selection.endRowIndex}</li>\r\n            <li>dragging: {selection.isDragging ? 'true' : 'false'}</li>\r\n            <li>mouseDown: {selection.isMouseDown? 'true' : 'false'}</li>\r\n            \r\n        </ul>\r\n    </div>);\r\n}\r\n\r\n/**\r\n * This is the terminal window\r\n * i got a bit lazy with this component and have not used the redux sotre\r\n * TODO: refactor\r\n */\r\nexport function TextGridConsole() {\r\n\r\n    const [readOnlyPos, setReadOnlyPos] = useState(1);\r\n    let [consoleText, setConsoleText] = useState();\r\n\r\n    useEffect(() => {\r\n        clearConsole();\r\n        onEnter();\r\n    }, []);\r\n\r\n    const commands = {\r\n        clear: (args) => { clearConsole(); },\r\n        echo: (args) => { printLine(args.join(' ')); }\r\n    }\r\n\r\n    const submitLine = (line) => {\r\n        const lineItems = line.split(' ');\r\n\r\n        if(lineItems.length === 0)\r\n            return;\r\n\r\n        const [cmd, ...args] = lineItems;\r\n\r\n        if(commands[cmd] !== undefined){\r\n            commands[cmd](args);\r\n        }\r\n    }\r\n\r\n    const printLine = (value) => {\r\n        setConsoleText(consoleText + '\\n ' + value); consoleText += '\\n' + value; // HACK\r\n    }\r\n\r\n    const clearConsole = () => {\r\n        setConsoleText(''); consoleText = ''; // HACK\r\n    }\r\n\r\n    const onEnter = () => {\r\n        submitLine(consoleText.substr(readOnlyPos));\r\n        setConsoleText(consoleText + '\\n> '); consoleText += '\\n> '; // HACK\r\n        setReadOnlyPos(consoleText.length);\r\n    };\r\n\r\n    const handleKeyDown = (event) => {\r\n\r\n        if (event.key.length === 1) {\r\n            // allow printable characters\r\n        }\r\n        else if(event.key === 'Enter') {\r\n            onEnter();\r\n            event.preventDefault();\r\n        }\r\n        else if(event.key === 'Backspace') {\r\n            if(event.target.selectionStart <= readOnlyPos)\r\n                event.preventDefault();\r\n        }\r\n        else if(event.key === 'Delete') {\r\n            if(event.target.selectionStart < readOnlyPos)\r\n                event.preventDefault();\r\n        }\r\n    }\r\n\r\n    const handleSelect = (event) => {\r\n        if(event.target.selectionStart === readOnlyPos-1){\r\n            event.target.setSelectionRange(readOnlyPos, readOnlyPos);\r\n        }\r\n        else if(event.target.selectionStart < readOnlyPos-1){\r\n            event.target.setSelectionRange(event.target.value.length, event.target.value.length);\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setConsoleText(event.target.value);\r\n    }\r\n\r\n    return(<div className=\"text-grid-console\" style={{maxHeight: 200, height: 200, display: 'flex'}}>\r\n        <textarea wrap=\"off\" spellCheck=\"false\" value={consoleText}\r\n            onChange={handleChange}\r\n            onKeyDown={handleKeyDown}\r\n            onSelect={handleSelect}>\r\n        </textarea>\r\n    </div>);\r\n}\r\n","\r\nimport React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { store, actions } from './store';\r\nimport TextGridImpl, {TextGridStatusBar, TextGridConsole} from './TextGrid';\r\n\r\nexport { actions };\r\nexport * from './TextGrid';\r\n\r\nexport default function TextGrid(props) {\r\n    return(<Provider store={store}>\r\n        <div className=\"text-grid-container\" style={{display: 'flex', flexDirection: 'column', height: '100%'}}>\r\n            <TextGridImpl {...props} ></TextGridImpl>\r\n            <TextGridConsole></TextGridConsole>\r\n            <TextGridStatusBar></TextGridStatusBar>\r\n        </div>\r\n    </Provider>);\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.scss';\nimport TextGrid, { actions } from './Components/TextGrid';\n\nexport default function App() {\n  const text = \n`\nHello world,\nthe quick brown fox \njumps over\nthe lazy \ndog\n`;\n\n  const handleKeyPress = (store, key) => {\n    if( key === 'v') return { preventDefault: false, actions: [actions.setTypeingDir( 0, 1)] };\n    if( key === '>') return { preventDefault: false, actions: [actions.setTypeingDir( 1, 0)] };\n    if( key === '<') return { preventDefault: false, actions: [actions.setTypeingDir(-1, 0)] };\n    if( key === '^') return { preventDefault: false, actions: [actions.setTypeingDir( 0,-1)] };\n    return {};\n  }\n\n  const config = {\n    cellWidth: 32,\n    cellHeight: 32,\n    text: text,\n    events: {\n      onKeyDown: handleKeyPress\n    }\n  }\n\n  return (\n    <div className=\"App\">\n        <div style={{width: 'calc(100%)', height: 'calc(100% )', overflow: 'hidden'}}>\n          <TextGrid config={config}></TextGrid>\n        </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}