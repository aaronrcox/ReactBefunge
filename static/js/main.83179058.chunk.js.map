{"version":3,"sources":["Components/TextGrid/store/actions.js","Components/TextGrid/store/reducers.js","Components/TextGrid/store/epics.js","store/store.js","Components/TextGrid/TextGrid.js","Components/Terminal/store/reducer.js","Components/Terminal/store/actions.js","Components/Terminal/Terminal.js","Components/Toolbar/Toolbar.js","Components/BefungeIde/BefungeInterpreter.js","Components/BefungeIde/BefungeStackView.js","Components/BefungeIde/BefungeIde.js","serviceWorker.js","index.js","App.js"],"names":["NO_OP","SETUP_GRID","INITIALISE_GRID","MOUSE_MOVED","MOUSE_DOWN","MOUSE_UP","SCROLL_VIEW","DRAG","KEY_DOWN","SET_HOVER_CELL","SET_CELL_VALUE","SET_TARGET_CELL","MOVE_TARGET_CELL","INSERT_ROW","INSERT_COL","DELETE_ROW","DELETE_COL","SET_SELECTION_AREA","CLEAR_SELECTION_AREA","SET_TYPEING_DIRECTION","FILL_SELECTION","PASTE","COPY","CUT","none","type","setupGrid","width","height","text","cellWidth","cellHeight","payload","initialiseGrid","mouseMoved","mousePos","mouseDown","mouseUp","scrollView","xOffset","yOffset","drag","keyDown","setHoverCell","setCellValue","setTargetCell","rowIndex","colIndex","moveTargetCell","x","y","invert","setSelectionArea","clearSelectionArea","insertRow","insertCol","deleteRow","deleteCol","setTypeingDir","paste","copy","cut","fillSelection","initialState","initialised","rows","cols","cells","insertMode","viewport","hover","target","dir","selection","isMouseDown","isDragging","startRowIndex","startColIndex","endRowIndex","endColIndex","selectedCells","_getSize","arr","length","Math","max","map","z","_fillArrCells","push","calculateViewport","v","vLeft","vRight","vTop","vBottom","epics","combineEpics","action","state","pipe","ofType","actions","mergeMap","value","textGrid","floor","replace","split","line","mx","mouseX","my","mouseY","hoverState","newActions","key","isShiftDown","cbResult","callback","cbActions","preventDefault","undefined","includes","s","_getSelectedText","navigator","clipboard","writeText","sx","sy","ex","ey","epicMiddleware","createEpicMiddleware","rootReducer","combineReducers","console","log","size","rid","cid","pop","_trimArrCells","newSize","modifier","xDir","yDir","dx","dy","_moveTarget","splice","sri","min","eri","sci","eci","r","c","data","numCols","d","numRows","xi","yi","xMin","yMin","xMax","yMax","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","textGridEpics","TextGrid","forwardRef","props","ref","useImperativeHandle","getCells","getState","dispatch","useDispatch","isInitialised","useSelector","vRows","vXOffset","vYOffset","rowsArr","Array","fill","elementRef","useRef","useEffect","current","offsetWidth","offsetHeight","config","onPasteEvent","document","addEventListener","event","clipboardData","getData","removeEventListener","scrollLeft","scrollTop","className","onScroll","draggable","tabIndex","onKeyDown","ctrlKey","toLowerCase","shiftKey","events","onMouseMove","bounds","currentTarget","getBoundingClientRect","clientX","left","clientY","top","onMouseUp","onMouseDown","focus","onMouseLeave","cr","TextGridRow","rowId","TextGridRangeSelection","style","position","vCols","cellArr","maxHeight","minHeight","cell","colId","TextGridCell","isRowHovered","isColHovered","isCellSelected","isBottomEdge","isRightEdge","textDirX","textDirY","isCellHovered","classNames","join","getClassNames","maxWidth","minWidth","abs","display","TextGridStatusBar","readOnlyPos","consoleText","reducer","warn","Terminal","useReducer","commands","clear","args","echo","submitLine","useCallback","onEnter","lineItems","cmd","print","submitInput","userInput","substr","wrap","spellCheck","onChange","selectionStart","onSelect","setSelectionRange","Toolbar","items","item","index","onClick","BefungeInterpreter","program","instructionInfo","this","stack","stack$","BehaviorSubject","onInstructionExecutedCb","onConsoleOutCb","onProgramTerminateCb","onRequestConsoleInputCb","currentInstruction","nextInstruction","i","getInstructionDir","stringMode","waitingForInput","inputStack","skipCount","ci","pushStack","charCodeAt","parseInt","a","popStack","b","String","fromCharCode","newInstruction","val","shift","dirX","dirY","ni","getNextInstruction","next","nx","ny","instruction","instructionDir","cDirX","cDirY","random","BefungeStackVivew","useState","setStack","onStackChangeSubscription","subscribe","unsubscribe","reverse","float","runIntervilleTimer","BefungeIde","befungeInterpreter","setBefungeInterpreter","initProgram","textGridRef","interpreter","onInstructionExecuted","li","textGridStore","onConsoleOut","terminalRef","onProgramTerminate","stopProgram","onRequestConsoleInput","input","prompt","runProgram","setInterval","stepProgram","clearInterval","step","terminalCommands","toolbar","orientation","overflow","minSize","maxSize","flex","Boolean","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83179058.chunk.js","sourcesContent":["export const NO_OP = '[TextGrid] NO Op';\r\n\r\nexport const SETUP_GRID = '[TextGrid] Setup';\r\nexport const INITIALISE_GRID = '[TextGrid] Initialise';\r\n\r\nexport const MOUSE_MOVED = '[TextGrid] MouseMoved';\r\nexport const MOUSE_DOWN = '[TextGrid] Mouse Pressed';\r\nexport const MOUSE_UP = '[TextGrid] Mouse Released';\r\n\r\nexport const SCROLL_VIEW = '[TextGrid] Scroll View';\r\n\r\nexport const DRAG = '[TextGrid] Drag';\r\n\r\nexport const KEY_DOWN = '[TextGrid] Key Down';\r\n\r\nexport const SET_HOVER_CELL = '[TextGrid] Set Hover Cell';\r\nexport const SET_CELL_VALUE = '[TextGrid] Set Cell Text';\r\n\r\nexport const SET_TARGET_CELL = '[TextGrid] Set Target Cell';\r\nexport const MOVE_TARGET_CELL = '[TextGrid] Move Target Cell';\r\n\r\nexport const INSERT_ROW = '[TextGrid] Insert Row';\r\nexport const INSERT_COL = '[TextGrid] Insert Col';\r\nexport const DELETE_ROW = '[TextGrid] Delete Row';\r\nexport const DELETE_COL = '[TextGrid] Delete Col';\r\n\r\nexport const SET_SELECTION_AREA = '[TextGrid] Set Selection Area';\r\nexport const CLEAR_SELECTION_AREA = '[TextGrid] Clear Selection';\r\n\r\nexport const SET_TYPEING_DIRECTION = '[TextGrid] Set Text Direction';\r\n\r\nexport const FILL_SELECTION = '[TextGrid] Fill Selection';\r\n\r\nexport const PASTE = '[TextGrid] Paste';\r\nexport const COPY = '[TextGrid] Copy';\r\nexport const CUT = '[TextGrid] Cut';\r\n\r\n// TODO ACTIONS:\r\n// - COPY SELECTION\r\n// - CUT SELECTION\r\n// - PASTE SELECTION\r\n// - FILL SELECTION\r\n\r\n\r\n// TODO BEHAVIOURS:\r\n// - allow for dynamic resize calculations\r\n// - move viewport when target is near borders\r\n// - ability to change direction of tyed text\r\n\r\n\r\nexport function none() {\r\n    return { type: NO_OP }\r\n}\r\n\r\nexport function setupGrid(width, height, text, cellWidth, cellHeight) {\r\n    return { type: SETUP_GRID, payload: {width, height, text, cellWidth, cellHeight} }\r\n}\r\n\r\nexport function initialiseGrid(payload) {\r\n    return { type: INITIALISE_GRID, payload }\r\n}\r\n\r\nexport function mouseMoved(mousePos) {\r\n    return { type: MOUSE_MOVED, payload: mousePos };\r\n}\r\n\r\nexport function mouseDown() {\r\n    return { type: MOUSE_DOWN };\r\n}\r\n\r\nexport function mouseUp() {\r\n    return { type: MOUSE_UP };\r\n}\r\n\r\nexport function scrollView(xOffset, yOffset) {\r\n    return { type: SCROLL_VIEW, payload: {xOffset, yOffset}};\r\n}\r\n\r\nexport function drag() {\r\n    return { type: DRAG };\r\n}\r\n\r\nexport function keyDown(payload) {\r\n    return { type: KEY_DOWN, payload };\r\n}\r\n\r\nexport function setHoverCell(payload) {\r\n    return { type: SET_HOVER_CELL, payload };\r\n}\r\n\r\nexport function setCellValue(payload) {\r\n    return { type: SET_CELL_VALUE, payload};\r\n}\r\n\r\nexport function setTargetCell(rowIndex, colIndex) {\r\n    return { type: SET_TARGET_CELL, payload: { rowIndex, colIndex} };\r\n}\r\n\r\nexport function moveTargetCell(x, y, invert) {\r\n    return { type: MOVE_TARGET_CELL, payload: {x, y, invert} };\r\n}\r\n\r\n\r\nexport function setSelectionArea(payload) {\r\n    // {startRowIndex, startColIndex, endRowIndex, endColIndex } \r\n    return { type: SET_SELECTION_AREA, payload};\r\n}\r\n\r\nexport function clearSelectionArea(payload) {\r\n    return {type: CLEAR_SELECTION_AREA };\r\n}\r\n\r\nexport function insertRow(rowIndex) {\r\n    return { type: INSERT_ROW, payload: {rowIndex}};\r\n}\r\n\r\nexport function insertCol(rowIndex, colIndex) {\r\n    return { type: INSERT_COL, payload: {rowIndex, colIndex}};\r\n}\r\n\r\nexport function deleteRow(rowIndex) {\r\n    return { type: DELETE_ROW, payload: {rowIndex}};\r\n}\r\n\r\nexport function deleteCol(rowIndex, colIndex) {\r\n    return { type: DELETE_COL, payload: {rowIndex, colIndex}};\r\n}\r\n\r\nexport function setTypeingDir(x, y) {\r\n    return { type: SET_TYPEING_DIRECTION, payload: {x, y} };\r\n}\r\n\r\nexport function paste(text) {\r\n    return { type: PASTE, payload: text };\r\n}\r\n\r\nexport function copy(text) {\r\n    return { type: COPY, payload: text };\r\n}\r\n\r\nexport function cut(text) {\r\n    return { type: CUT, payload: text };\r\n}\r\n\r\nexport function fillSelection(text) {\r\n    return { type: FILL_SELECTION, payload: text };\r\n}","import * as actions from './actions';\r\n\r\n const initialState = {\r\n    initialised: false,\r\n    cellWidth: 24,\r\n    cellHeight: 24, \r\n    rows: 0,    // TODO: set to length of cells\r\n    cols: 0,    // TODO: set to length of longest row in cells.\r\n    cells: [],\r\n    insertMode: false,\r\n\r\n    viewport: {\r\n        rows: 0,\r\n        cols: 0,\r\n        xOffset: 0,\r\n        yOffset: 0\r\n    },\r\n\r\n    hover: {\r\n        rowIndex: -1,\r\n        colIndex: -1,\r\n    },\r\n\r\n    target: {\r\n        rowIndex: -1,\r\n        colIndex: -1,\r\n        dir: {x: 1, y: 0}\r\n    },\r\n\r\n    selection: {\r\n        isMouseDown: false,\r\n        isDragging: false,\r\n        startRowIndex: 0,\r\n        startColIndex: 0,\r\n        endRowIndex: 0,\r\n        endColIndex: 0\r\n    },\r\n\r\n    selectedCells: []\r\n};\r\n\r\n\r\n\r\n\r\nexport function reducer(state = initialState, action) {\r\n\r\n    console.log(state.rows);\r\n\r\n    switch(action.type) {\r\n        /**\r\n         * \r\n         */\r\n        case actions.INITIALISE_GRID: {\r\n            const viewport = {\r\n                ...state.viewport,\r\n                rows: action.payload.rows,\r\n                cols: action.payload.cols\r\n            };\r\n            const size = _getSize(action.payload.cells);\r\n            return {...state, ...action.payload, ...size, initialised: true, viewport};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_HOVER_CELL: {\r\n            return {...state, hover: action.payload };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_CELL_VALUE: {\r\n\r\n            const rowIndex = action.payload.rowIndex ? action.payload.rowIndex : state.target.rowIndex;\r\n            const colIndex = action.payload.colIndex ? action.payload.colIndex : state.target.colIndex;\r\n            const value = action.payload.value;\r\n\r\n            const cells = state.cells;\r\n\r\n            _fillArrCells(cells, colIndex, rowIndex);\r\n            cells[rowIndex][colIndex] = value;\r\n\r\n            _trimArrCells(cells);\r\n            const newSize = _getSize(cells);\r\n\r\n            \r\n            return {...state, ...newSize, cells };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_TARGET_CELL: {\r\n            const target = {...state.target, ...action.payload };\r\n            const selection = {\r\n                ...state.selection,\r\n                startRowIndex: target.rowIndex,\r\n                startColIndex: target.colIndex,\r\n                endRowIndex: target.rowIndex,\r\n                endColIndex: target.colIndex\r\n            };\r\n            const viewport = calculateViewport(state.viewport, target);\r\n            return {...state, viewport, target, selection };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOVE_TARGET_CELL: {\r\n            const modifier = action.payload.invert ? -1 : 1;\r\n            const xDir = action.payload && action.payload.x !== undefined ? action.payload.x : state.target.dir.x;\r\n            const yDir = action.payload && action.payload.y !== undefined ? action.payload.y : state.target.dir.y;\r\n            const target = {...state.target, ..._moveTarget(state.target, xDir * modifier, yDir * modifier) };\r\n            const selection = {\r\n                ...state.selection,\r\n                startRowIndex: target.rowIndex,\r\n                startColIndex: target.colIndex,\r\n                endRowIndex: target.rowIndex,\r\n                endColIndex: target.colIndex\r\n            };\r\n\r\n            const viewport = calculateViewport(state.viewport, target);\r\n\r\n            return { ...state, viewport, target, selection };\r\n        }\r\n\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.INSERT_ROW: {\r\n            const {rowIndex} = action.payload;\r\n            const cells = state.cells;\r\n            cells.splice(rowIndex, 0, []);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.INSERT_COL: {\r\n            const {rowIndex, colIndex} = action.payload;\r\n            const cells = state.cells;\r\n            while(cells.length <= rowIndex) cells.push([]);\r\n            while(cells[rowIndex].length <= colIndex) cells[rowIndex].push('');\r\n            cells[rowIndex].splice(colIndex, 0, '');\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DELETE_ROW: {\r\n            const {rowIndex} = action.payload;\r\n            const cells = state.cells;\r\n            cells.splice(rowIndex, 1);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DELETE_COL: {\r\n            console.log(actions.DELETE_COL);\r\n            const {rowIndex, colIndex} = action.payload;\r\n            const cells = state.cells;\r\n            if(cells.length <= rowIndex) return state;\r\n            if(cells[rowIndex].length <= colIndex) return state;\r\n            cells[rowIndex].splice(colIndex, 1);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_SELECTION_AREA: {\r\n            const selection = {...state.selection, ...action.payload};\r\n            const target = {\r\n                ...state.target,\r\n                rowIndex: selection.endRowIndex,\r\n                colIndex: selection.endColIndex,\r\n            };\r\n            return {...state, selection, target };\r\n        }\r\n\r\n        case actions.CLEAR_SELECTION_AREA: {\r\n            const cells = state.cells;\r\n            const sri = Math.min(state.selection.startRowIndex, state.selection.endRowIndex);\r\n            const eri = Math.max(state.selection.startRowIndex, state.selection.endRowIndex);\r\n            const sci = Math.min(state.selection.startColIndex, state.selection.endColIndex);\r\n            const eci = Math.max(state.selection.startColIndex, state.selection.endColIndex);\r\n\r\n            for(let r=sri; r<=eri && r < cells.length; r++){\r\n                for(let c=sci; c<eci && c < cells[r].length; c++) {\r\n                    cells[r][c] = '';\r\n                }\r\n            }\r\n\r\n            return {...state, cells };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOUSE_DOWN: {\r\n            const target = {\r\n                ...state.target,\r\n                rowIndex: state.hover.rowIndex,\r\n                colIndex: state.hover.colIndex,\r\n            };\r\n            const selection = {\r\n                ...state.selection,\r\n                startColIndex: target.colIndex,\r\n                startRowIndex: target.rowIndex,\r\n                endColIndex: target.colIndex,\r\n                endRowIndex: target.rowIndex,\r\n                isDragging: false, \r\n                isMouseDown: true};\r\n            return {...state,  target, selection}\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOUSE_UP: {\r\n            const selection = {...state.selection, isDragging: false, isMouseDown: false};\r\n            return {...state,  selection}\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SCROLL_VIEW: {\r\n            const {xOffset, yOffset} = action.payload;\r\n            const viewport = {...state.viewport, \r\n                xOffset: Math.floor(xOffset / state.cellWidth),\r\n                yOffset: Math.floor(yOffset / state.cellHeight)    \r\n            };\r\n            return { ...state, viewport };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DRAG: {\r\n\r\n            if( !state.selection.isDragging ) {\r\n                // Begin Dragging\r\n                const target = {\r\n                    ...state.target,\r\n                    rowIndex: state.hover.rowIndex,\r\n                    colIndex: state.hover.colIndex,\r\n                };\r\n                const selection = {...state.selection, isDragging: true};\r\n                \r\n    \r\n                return {...state, selection, target};\r\n            }\r\n            else {\r\n                // Continue dragging\r\n                const selection = {...state.selection};\r\n                selection.endRowIndex = state.hover.rowIndex;\r\n                selection.endColIndex = state.hover.colIndex;\r\n                selection.endColIndex += (selection.endColIndex < selection.startColIndex ? 0 : 1);\r\n                \r\n                const target = {\r\n                    ...state.target,\r\n                    rowIndex: state.hover.rowIndex,\r\n                    colIndex: state.hover.colIndex,\r\n                };\r\n                return {...state, selection, target };\r\n            }\r\n           \r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_TYPEING_DIRECTION: {\r\n            const target = { ...state.target };\r\n            target.dir = { ...action.payload };\r\n            return {...state, target };\r\n            //return state;\r\n        }\r\n\r\n        case actions.PASTE: {\r\n\r\n            const data = action.payload.replace(/\\r\\n/g, \"\\r\").replace(/\\n/g, \"\\r\").split(/\\r/).map(line => line.split(''));\r\n            \r\n            const cells = state.cells;\r\n\r\n            const sx = state.selection.startColIndex;\r\n            const sy = state.selection.startRowIndex;\r\n            \r\n            // number of rows / columns pasted\r\n            const numCols = Math.max(...data.map(d => d.length));\r\n            const numRows = data.length;\r\n\r\n\r\n            // fill the cells with the paste data\r\n            for(let y = 0; y<data.length; y++) {\r\n                for(let x=0; x<data[y].length; x++) {\r\n                    const xi = x + sx;\r\n                    const yi = y + sy;\r\n                    _fillArrCells(cells, xi, yi);\r\n                    cells[yi][xi] = data[y][x];\r\n                }\r\n            }\r\n\r\n            \r\n\r\n            // update the selection area\r\n            const selection = {\r\n                ...state.selection,\r\n                startRowIndex: sy,\r\n                startColIndex: sx,\r\n                endRowIndex: sy + numRows - 1,\r\n                endColIndex: sx + numCols\r\n            };\r\n\r\n            const size = _getSize(cells);\r\n\r\n            return {...state, ...size, cells, selection };\r\n        }\r\n\r\n        case actions.FILL_SELECTION: {\r\n            const cells = state.cells;\r\n\r\n            const sx = state.selection.startColIndex;\r\n            const sy = state.selection.startRowIndex;\r\n            const ex = state.selection.endColIndex;\r\n            const ey = state.selection.endRowIndex;\r\n\r\n            // calculate the left right, top and bottom bounds of the selection\r\n            const xMin = Math.min(sx, ex);\r\n            const yMin = Math.min(sy, ey);\r\n            const xMax = Math.max(sx, ex);\r\n            const yMax = Math.max(sy, ey);\r\n\r\n            // fill the cells with the paste data\r\n            for(let y=yMin; y<=yMax; y++) {\r\n                for(let x=xMin; x<xMax; x++) {\r\n                    _fillArrCells(cells, x, y);\r\n                    cells[y][x] = action.payload;\r\n                }\r\n            }\r\n\r\n            const size = _getSize(cells);\r\n\r\n            return {...state, ...size, cells };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nfunction _getSize(arr) {\r\n    const rows = arr.length;\r\n    const cols = Math.max(...arr.map(z => z.length));\r\n    return {rows, cols};\r\n}\r\n\r\nfunction _fillArrCells(arr, x, y) {\r\n    while(arr.length <= y)\r\n        arr.push([]);\r\n\r\n    while(arr[y].length <= x)\r\n        arr[y].push('');\r\n}\r\n\r\nfunction _trimArrCells(arr) {\r\n    \r\n    // trim each row\r\n    for(let rid = arr.length - 1; rid >= 0; rid--){\r\n        for(let cid = arr[rid].length - 1; cid >= 0; cid--){\r\n            if( arr[rid][cid] )  break;\r\n            arr[rid].pop();\r\n        }\r\n    }\r\n\r\n    // remove empty rows\r\n    for(let rid = arr.length - 1; rid >= 0; rid--){\r\n        if(arr[rid].length > 0) break;\r\n        arr.pop();\r\n    }\r\n\r\n    console.log(arr);\r\n}\r\n\r\nfunction _moveTarget(target, dx, dy) {\r\n\r\n    let rowIndex = target.rowIndex + dy;\r\n    let colIndex = target.colIndex + dx;\r\n\r\n    // prevent wrapping\r\n    rowIndex = Math.max(rowIndex, 0);\r\n    colIndex = Math.max(colIndex, 0);\r\n\r\n    return { rowIndex, colIndex };\r\n}\r\n\r\nfunction calculateViewport(viewport, target) {\r\n    const v = {...viewport};\r\n\r\n    const vLeft = v.xOffset;\r\n    const vRight = v.xOffset + v.cols - 2;\r\n    const vTop = v.yOffset;\r\n    const vBottom = v.yOffset + v.rows - 1;\r\n\r\n    // if the target is within the viewport, dont change\r\n    if( target.colIndex >= vLeft && target.colIndex <= vRight &&\r\n        target.rowIndex >= vBottom && target.rowIndex <= vTop )\r\n        return viewport;\r\n\r\n    if( target.colIndex < vLeft ) \r\n        v.xOffset = target.colIndex;\r\n\r\n    if(  target.colIndex >= vRight ) \r\n        v.xOffset = (target.colIndex - v.cols) + 3;\r\n\r\n    if( target.rowIndex < vTop ) \r\n        v.yOffset = target.rowIndex;\r\n\r\n    if( target.rowIndex >= vBottom ) \r\n        v.yOffset = (target.rowIndex - v.rows) + 2;\r\n\r\n    return v;\r\n}","import { combineEpics, ofType } from 'redux-observable';\r\nimport * as actions from './actions';\r\n\r\nimport { mergeMap } from 'rxjs/operators';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst setupGrid = (action, state) => action.pipe(\r\n    ofType(actions.SETUP_GRID),\r\n    mergeMap((action) => {\r\n\r\n        const width = action.payload.width;\r\n        const height = action.payload.height;\r\n        const text = action.payload.text;\r\n\r\n        const cellWidth = action.payload.cellWidth || state.value.textGrid.cellWidth;\r\n        const cellHeight = action.payload.cellHeight || state.value.textGrid.cellHeight;\r\n\r\n        const rows = Math.floor(height / (cellHeight-1)) + 1;\r\n        const cols = Math.floor(width / (cellWidth-1)) + 1;\r\n        \r\n        // create a 2D array of characters, [rows][cols]\r\n        // regex strips out the various line endings\r\n        const cells = text.replace(/\\r\\n/g, \"\\r\").replace(/\\n/g, \"\\r\").split(/\\r/).map(line => line.split(''));\r\n        \r\n        // initialise the grid with the above calculated data\r\n        return [ actions.initialiseGrid({cellWidth, cellHeight, rows, cols, cells}) ];\r\n    })\r\n);\r\n\r\nconst onMouseMoved = (action, state) => action.pipe(\r\n    ofType(actions.MOUSE_MOVED),\r\n    mergeMap((action) => {\r\n\r\n        // get mouse coordinates\r\n        const mx = action.payload.mouseX;\r\n        const my = action.payload.mouseY;\r\n\r\n        // subtract 1 from width and height for row/col/cell index calculations\r\n        const cellWidth = state.value.textGrid.cellWidth - 1;\r\n        const cellHeight = state.value.textGrid.cellHeight - 1;\r\n\r\n        const viewport = state.value.textGrid.viewport;\r\n\r\n        // calculate the row/col/cell index the mouse is over\r\n        const rowIndex = Math.floor(my / cellHeight) + viewport.yOffset;\r\n        const colIndex = Math.floor(mx / cellWidth) + viewport.xOffset;\r\n        \r\n        const hoverState = { rowIndex, colIndex };\r\n        const newActions = [];\r\n\r\n        // update the hover state\r\n        if(rowIndex !== state.value.textGrid.hover.rowIndex || colIndex !== state.value.textGrid.hover.colIndex) {\r\n            newActions.push(actions.setHoverCell(hoverState));\r\n        }\r\n\r\n        // If we move the mouse while the mouse is down, than we will\r\n        // either begin the selection, or expand the selection via the drag action\r\n        if(state.value.textGrid.selection.isMouseDown) {\r\n            newActions.push(actions.drag());                   \r\n        }\r\n\r\n        return newActions;\r\n    })\r\n);\r\n\r\n\r\nconst onKeyDown = (action, state) => action.pipe(\r\n    ofType(actions.KEY_DOWN),\r\n    mergeMap((action) => {\r\n        const key = action.payload.key;\r\n        const rowIndex = state.value.textGrid.target.rowIndex;\r\n        const colIndex = state.value.textGrid.target.colIndex;\r\n        const isShiftDown = action.payload.isShiftDown;\r\n        \r\n        const cbResult = action.payload.callback(state.value, key) || {};\r\n        const cbActions = cbResult.actions || [];\r\n        \r\n        if(cbResult.preventDefault) {\r\n            return cbActions;\r\n        }\r\n\r\n        if(key.length === 1) {\r\n            if( state.value.textGrid.selection.startRowIndex !== state.value.textGrid.selection.endRowIndex ||\r\n                state.value.textGrid.selection.startColIndex !== state.value.textGrid.selection.endColIndex  ) {\r\n\r\n                    // fill the slection area\r\n                    return [actions.fillSelection(key)];\r\n            }\r\n            else {\r\n                // insert the character at the cursor positon\r\n                return [\r\n                    ...cbActions,\r\n                    actions.setCellValue({ rowIndex, colIndex, value: key }),\r\n                    actions.moveTargetCell(),\r\n                ];\r\n            }\r\n            \r\n        }\r\n        else {\r\n            if( key === 'Tab' ) {\r\n                const dir = isShiftDown ? -1 : 1;\r\n                return[ ...cbActions, actions.moveTargetCell(dir, 0) ];\r\n            }\r\n            if( key === 'Enter' ) {\r\n                const dir = isShiftDown ? -1 : 1;\r\n                return [ ...cbActions, actions.moveTargetCell(0, dir) ];\r\n            }\r\n            else if( key === 'Backspace') {\r\n                return [\r\n                    ...cbActions,\r\n                    actions.clearSelectionArea(),\r\n                    actions.setCellValue({ value: '' }),\r\n                    actions.moveTargetCell(undefined, undefined, true)\r\n                ];\r\n            }\r\n            else if( key === 'Delete') {\r\n                return [ \r\n                    ...cbActions, \r\n                    actions.clearSelectionArea(),\r\n                    actions.setCellValue({ rowIndex, colIndex, value: '' }) \r\n                ];\r\n            }\r\n            else if( key.includes('Arrow') )\r\n            {\r\n                // calculate xy direction of arrow key press\r\n                let dir = {x: 0, y: 0};\r\n                switch(key) {\r\n                    case 'ArrowLeft': dir.x = -1; break;\r\n                    case 'ArrowRight': dir.x = 1; break;\r\n                    case 'ArrowUp': dir.y = -1; break;\r\n                    case 'ArrowDown': dir.y = 1; break;\r\n                    default: break;\r\n                }\r\n\r\n                // if we press arrow keys while shift is pressed, we are selecting\r\n                // otherwise, we are moving the target cursor position.\r\n\r\n                if(isShiftDown) {\r\n                    // TODO: create action to grow/shrink the selection area\r\n                    const selection = { ...state.value.textGrid.selection };\r\n                    selection.endColIndex += dir.x;\r\n                    selection.endRowIndex += dir.y;\r\n                    return[  ...cbActions, actions.setSelectionArea(selection), actions.setTypeingDir(dir.x, dir.y) ];\r\n                }\r\n                else {\r\n                    return [\r\n                        ...cbActions, \r\n                        actions.moveTargetCell(dir.x, dir.y), \r\n                        actions.setTypeingDir(dir.x, dir.y)\r\n                    ];\r\n                }\r\n            }\r\n        }\r\n\r\n        return [];\r\n    })\r\n);\r\n\r\nconst onCopy = (action, state) => action.pipe(\r\n    ofType(actions.COPY),\r\n    mergeMap((action) => {\r\n        \r\n        const s = _getSelectedText(state);\r\n        navigator.clipboard.writeText(s)\r\n\r\n\r\n        return [];\r\n\r\n    })\r\n);\r\n\r\nconst onCut = (action, state) => action.pipe(\r\n    ofType(actions.CUT),\r\n    mergeMap((action) => {\r\n        const s = _getSelectedText(state);\r\n        navigator.clipboard.writeText(s)\r\n        return [actions.clearSelectionArea()]\r\n    })\r\n);\r\n\r\nexport const epics = combineEpics(\r\n    setupGrid,\r\n    onMouseMoved,\r\n    onKeyDown,\r\n    onCopy,\r\n    onCut\r\n);\r\n\r\n\r\n\r\nfunction _getSelectedText(state) {\r\n    const cells = state.value.textGrid.cells;\r\n    const sx = state.value.textGrid.selection.startColIndex;\r\n    const sy = state.value.textGrid.selection.startRowIndex;\r\n    const ex = state.value.textGrid.selection.endColIndex;\r\n    const ey = state.value.textGrid.selection.endRowIndex + 1;\r\n    let s = '';\r\n    for(let y=sy; y<ey; y++){\r\n        if(y >= ey){\r\n            s += '\\n';\r\n            continue;\r\n        }\r\n        for(let x=sx; x<ex && x<cells[y].length ; x++) {\r\n            s += cells[y][x];\r\n        }\r\n\r\n        if(y <ey-1)\r\n            s += '\\n';\r\n    }\r\n    return s;\r\n}","\r\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux'\r\nimport { createEpicMiddleware } from 'redux-observable';\r\n\r\nimport {\r\n    reducer as textGridReducer, \r\n    epics as textGridEpics\r\n} from '../Components/TextGrid/store';\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\n\r\nconst rootReducer = combineReducers({\r\n    textGrid: textGridReducer\r\n});\r\n\r\n\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(\r\n    rootReducer, \r\n    composeEnhancer(applyMiddleware(epicMiddleware))\r\n);\r\n\r\nepicMiddleware.run(textGridEpics);","import React, { useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { store } from '../../store';\r\nimport * as actions from './store/actions';\r\nimport './TextGrid.scss';\r\n\r\n\r\n/**\r\n * This component renders the text grid and handles\r\n */\r\nexport const TextGrid = forwardRef((props, ref) => {\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        getCells: () => store.getState().textGrid.cells\r\n    }), []);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isInitialised = useSelector(state => state.textGrid.initialised);\r\n    const vRows = useSelector(state => state.textGrid.viewport.rows);\r\n    const vXOffset = useSelector(state => state.textGrid.viewport.xOffset);\r\n    const vYOffset = useSelector(state => state.textGrid.viewport.yOffset);\r\n    const rowsArr = vRows > 0 ? new Array(vRows).fill('') : [];\r\n\r\n    const elementRef = useRef(null);\r\n    useEffect(() => {\r\n        if( !isInitialised ) {\r\n            const width = elementRef.current ? elementRef.current.offsetWidth : 0;\r\n            const height = elementRef.current ? elementRef.current.offsetHeight: 0;\r\n\r\n            dispatch(actions.setupGrid(width, height, props.config.text, props.config.cellWidth, props.config.cellHeight));\r\n        }\r\n        const onPasteEvent = document.addEventListener('paste', (event) => {\r\n            dispatch(actions.paste(event.clipboardData.getData('text')));\r\n        });\r\n\r\n        return () => {\r\n            document.removeEventListener('paste', onPasteEvent);\r\n        };\r\n\r\n    }, [isInitialised, props, dispatch]);\r\n\r\n    const handleMouseMove = (event) => {\r\n        \r\n        // calculate the mouse position relative to the position of this component.\r\n        let bounds = event.currentTarget.getBoundingClientRect();\r\n        let mouseX = event.clientX - bounds.left;\r\n        let mouseY = event.clientY - bounds.top;\r\n        \r\n        dispatch(actions.mouseMoved({mouseX, mouseY}));\r\n    };\r\n\r\n    const handleKeyPress = (event) => {\r\n        \r\n        if( event.ctrlKey ){\r\n            const key = event.key.toLowerCase();\r\n\r\n            if( key === 'v') {\r\n                // Paste event - do nothing, this will allow the onPaste event to fire\r\n            }\r\n            else if( key === 'c') {\r\n                dispatch( actions.copy());\r\n                event.preventDefault();\r\n            }\r\n            else if( key === 'x' ) {\r\n                dispatch( actions.cut());\r\n                event.preventDefault();\r\n            }\r\n            \r\n        }\r\n        else {\r\n            event.preventDefault();\r\n            dispatch(actions.keyDown({ \r\n                key: event.key, \r\n                isShiftDown: event.shiftKey, \r\n                callback: props.config.events.onKeyDown\r\n            }));\r\n        }\r\n        \r\n    };\r\n\r\n    const handleMouseDown = (event) => {\r\n        event.preventDefault();\r\n        event.currentTarget.focus();\r\n        dispatch(actions.mouseDown());\r\n    };\r\n\r\n    const handleMouseUp = (event) => {\r\n        event.preventDefault();\r\n        dispatch(actions.mouseUp());\r\n    };\r\n\r\n    const handleScroll = (event) => {\r\n        event.preventDefault();\r\n        dispatch(actions.scrollView(event.target.scrollLeft, event.target.scrollTop));\r\n    };\r\n\r\n    const handleMouseLeave = (event) => {\r\n        dispatch(actions.setHoverCell({rowIndex: -1, colIndex: -1}));\r\n    };\r\n\r\n\r\n    if( elementRef.current ) {\r\n        // set the scrollposition\r\n        // this.refs.messages.scrollTop = this.refs.messages.scrollHeight\r\n        elementRef.current.scrollLeft = vXOffset * props.config.cellWidth;\r\n        elementRef.current.scrollTop = vYOffset * props.config.cellHeight;\r\n    }\r\n\r\n    return(\r\n        <div ref={elementRef} className=\"text-grid-area\"\r\n            onScroll={handleScroll}\r\n            draggable\r\n            tabIndex='0'\r\n            onKeyDown={handleKeyPress}\r\n            onMouseMove={handleMouseMove} \r\n            onMouseUp={handleMouseUp}\r\n            onMouseDown={handleMouseDown}\r\n            onMouseLeave={handleMouseLeave}>\r\n            <div  className=\"text-grid\">\r\n\r\n                {rowsArr.map((cr, rowIndex) =>\r\n                    <TextGridRow key={`gridRow-${rowIndex}`} rowId={rowIndex + vYOffset}></TextGridRow> \r\n                )}\r\n                <TextGridRangeSelection></TextGridRangeSelection>\r\n            </div>\r\n            <div style={{width: 10000, height: 10000, position: 'absolute'}}></div>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n/**\r\n * Rhis component renders each row of cells\r\n */\r\nfunction TextGridRow(props) {\r\n    \r\n    const rowId = props.rowId;\r\n    const cellHeight = useSelector(state => state.textGrid.cellHeight);\r\n    const vCols = useSelector(state => state.textGrid.viewport.cols);\r\n    const vXOffset = useSelector(state => state.textGrid.viewport.xOffset);\r\n    const cellArr = vCols > 0 ? new Array(vCols).fill('') : [];\r\n\r\n    return(<div className={'text-grid-row'} style={{height: cellHeight, maxHeight: cellHeight, minHeight: cellHeight}}>\r\n        {cellArr.map((cell, colId) => {\r\n            const colIndex = colId + vXOffset;\r\n            return (<TextGridCell key={'cell-'+rowId+'-'+colIndex} rowId={rowId} colId={colIndex} ></TextGridCell>);\r\n        })}\r\n    </div>);\r\n}\r\n\r\n/**\r\n * This component renders an individual cell within the table.\r\n */\r\nfunction TextGridCell(props) {\r\n\r\n\r\n    const rowId = props.rowId;\r\n    const colId = props.colId;\r\n\r\n    const cell = useSelector(state => {\r\n        if(rowId < state.textGrid.cells.length && colId < state.textGrid.cells[rowId].length)\r\n            return state.textGrid.cells[rowId][colId];\r\n        return '';\r\n    });\r\n    \r\n    const cellWidth = useSelector(state => state.textGrid.cellWidth);\r\n\r\n    const isRowHovered = useSelector (state => state.textGrid.hover.rowIndex === rowId );\r\n    const isColHovered = useSelector (state => state.textGrid.hover.colIndex === colId );\r\n    const isCellSelected = useSelector (state => state.textGrid.target.rowIndex === rowId && state.textGrid.target.colIndex === colId);\r\n    const isBottomEdge = useSelector( state => state.textGrid.rows-1 === rowId );\r\n    const isRightEdge = useSelector( state => state.textGrid.cols-1 === colId);\r\n\r\n    // the isCellSelected ternary is used to prevent re-rendering of every cell when the direction changes\r\n    const textDirX = useSelector(state => isCellSelected ? state.textGrid.target.dir.x : 0);\r\n    const textDirY = useSelector(state => isCellSelected ? state.textGrid.target.dir.y : 0);\r\n\r\n    const isCellHovered =  isRowHovered && isColHovered;\r\n    \r\n    \r\n\r\n    const getClassNames = () => {\r\n\r\n        const classNames = ['text-grid-cell'];\r\n\r\n        if( isCellHovered ) classNames.push( 'cell-hover' );\r\n        if( isRowHovered )  classNames.push('row-hover');\r\n        if( isColHovered ) classNames.push('col-hover');\r\n        if( isCellSelected ) classNames.push('active-override');\r\n        if( isCellSelected && textDirX > 0 ) classNames.push('active-override-left');\r\n        if( isCellSelected && textDirX < 0 ) classNames.push('active-override-right');\r\n        if( isCellSelected && textDirY > 0 ) classNames.push('active-override-top');\r\n        if( isBottomEdge ) classNames.push('bottom-edge');\r\n        if( isRightEdge ) classNames.push('right-edge');\r\n\r\n        return classNames.join(' ');\r\n    }\r\n\r\n    \r\n\r\n    return(<span className={getClassNames()}  style={{width: cellWidth, maxWidth: cellWidth, minWidth: cellWidth}} >\r\n        <div className=\"text-grid-cell-content\">\r\n            {cell}\r\n        </div>\r\n    </span>);\r\n}\r\n\r\n/**\r\n * This component renders the text selection area\r\n */\r\nfunction TextGridRangeSelection() {\r\n\r\n    const selection = useSelector(state => state.textGrid.selection );\r\n    const cellWidth = useSelector(state => state.textGrid.cellWidth);\r\n    const cellHeight = useSelector(state => state.textGrid.cellHeight);\r\n    const viewport = useSelector(state => state.textGrid.viewport);\r\n\r\n    // with the viewport in place, we need to calculate the relative position of the selction box\r\n    let sci = selection.startColIndex - viewport.xOffset;\r\n    const eci = selection.endColIndex - viewport.xOffset;\r\n    let sri = selection.startRowIndex - viewport.yOffset;\r\n    const eri = selection.endRowIndex - viewport.yOffset;\r\n\r\n    // if we are dragging upward, than our selection needs to start from the\r\n    // top of the next row.\r\n    if(eri < sri) { sri += 1; }\r\n    if(eci < sci) { sci += 1; }\r\n\r\n    // calculate the size and position of the selection box\r\n    // position is relative to the top left of the TextGrid component\r\n    const width = ((eci - sci) * (cellWidth-1));\r\n    const height = (eri- sri + 1) * (cellHeight-1) + ((eri - sri) < 0 ? -(cellHeight-1) : 0);\r\n    const left = (sci * (cellWidth-1)) + Math.min(width, 0);\r\n    const top = (sri * (cellHeight-1)) + Math.min(height, 0);\r\n    let style={ width: Math.abs(width), height: Math.abs(height), left, top };\r\n\r\n    if(width === 0 || height === 0)\r\n        style.display = 'none';\r\n\r\n    // render the selection grid.\r\n    return(<div className='text-grid-selection' style={style}></div>);\r\n}\r\n\r\n\r\n/**\r\n * \r\n */\r\nexport function TextGridStatusBar() {\r\n    const viewport = useSelector(state => state.textGrid.viewport );\r\n    const target = useSelector(state => state.textGrid.target);\r\n    const selection = useSelector(state => state.textGrid.selection);\r\n\r\n    return(<div className=\"text-grid-status-bar\">\r\n        <ul>\r\n            <li>R: {viewport.rows}</li>\r\n            <li>C: {viewport.cols}</li>\r\n            <li>SX: {viewport.xOffset}</li>\r\n            <li>SY: {viewport.yOffset}</li>\r\n            <li>TX: {target.colIndex}{}</li>\r\n            <li>TY: {target.rowIndex}{}</li>\r\n\r\n            <li>SX: {selection.startColIndex}</li>\r\n            <li>SY: {selection.startRowIndex}</li>\r\n            <li>EX: {selection.endColIndex}</li>\r\n            <li>EY: {selection.endRowIndex}</li>\r\n            <li>dragging: {selection.isDragging ? 'true' : 'false'}</li>\r\n            <li>mouseDown: {selection.isMouseDown? 'true' : 'false'}</li>\r\n            \r\n        </ul>\r\n    </div>);\r\n}\r\n\r\n\r\n\r\n","export const initialState = {\r\n    readOnlyPos: 2,\r\n    consoleText: '> '\r\n};\r\n\r\nexport const reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'BEGIN_USER_INPIT': {\r\n            const consoleText = state.consoleText += '> ';\r\n            const readOnlyPos = consoleText.length;\r\n            return {...state, consoleText, readOnlyPos };\r\n        }\r\n        case 'SET_CONSOLE_TEXT': {\r\n            const consoleText = action.payload;\r\n            return {...state, consoleText };\r\n        }\r\n        case 'END_USER_INPUT': {\r\n            const readOnlyPos = state.consoleText.length;\r\n            const consoleText = state.consoleText.length > 0 ? state.consoleText += '\\n' : '';\r\n            return {...state, readOnlyPos, consoleText };\r\n        }\r\n        case 'APPEND_PROGRAM_INPUT': {\r\n            const consoleText = state.consoleText + action.payload;\r\n            const readOnlyPos = consoleText.length;\r\n            return {...state, consoleText, readOnlyPos };\r\n        }\r\n        case 'CLEAR_TERMINAL': {\r\n            const consoleText = '';\r\n            const readOnlyPos = 0;\r\n            return {...state, consoleText, readOnlyPos };\r\n        }\r\n        case 'SET_STATE': {\r\n            return {...state, ...action.payload };\r\n        }\r\n        default: {\r\n            console.warn('UNHANDELED ACTION');\r\n            return state;\r\n        }\r\n    }\r\n};","\r\nexport const actions = {\r\n    beginUserInput: () => ({ type: 'BEGIN_USER_INPIT' }),\r\n    endUserInput: () => ({ type: 'END_USER_INPUT' }),\r\n    setConsoleText: (text) => ({ type: 'SET_CONSOLE_TEXT', payload: text }),\r\n    appendProgramInput: (text) => ({ type: 'APPEND_PROGRAM_INPUT', payload: text }),\r\n    clear: () => ({ type: 'CLEAR_TERMINAL' }),\r\n    setState: (state) => ({ type: 'SET_STATE', payload: state })\r\n};","import './Terminal.scss';\r\nimport React, {useReducer, useCallback, forwardRef, useImperativeHandle} from 'react';\r\nimport { actions, reducer, initialState } from './store';\r\n\r\n\r\n/**\r\n * This is a basic terminal window component\r\n */\r\nexport const Terminal = forwardRef((props, ref) => {\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    // collection of commands to run when the user types stuff into the terminal.\r\n    // the command are extended by props.commands.\r\n    const commands = {\r\n        clear: (args) => { \r\n            dispatch(actions.clear());\r\n        },\r\n        echo: (args) => { \r\n            dispatch(actions.appendProgramInput(args.join(' ') + '\\n'));\r\n        },\r\n        ...props.commands\r\n    };\r\n\r\n    const submitLine = useCallback((line) => {\r\n        \r\n        // the onEnter method should return true to prevent default behaviour\r\n        if( props.onEnter && props.onEnter(line) ) {\r\n            return;\r\n        }\r\n        \r\n        const lineItems = line.split(' ');\r\n\r\n        if(lineItems.length === 0)\r\n            return;\r\n\r\n        const [cmd, ...args] = lineItems;\r\n\r\n        if(commands[cmd] !== undefined){\r\n            commands[cmd](args);\r\n        }\r\n\r\n        dispatch(actions.endUserInput());\r\n        dispatch(actions.beginUserInput());\r\n\r\n    }, [props, commands]);\r\n    \r\n\r\n    // handle key press within the text area\r\n    // for characters like backspace and delete, additional checks need to be made to \r\n    // to ensure we dont delete anything within the readonly area.\r\n    // NOTE: there may be more cases to handle, but this works for us for now.\r\n    const handleKeyDown = (event) => {\r\n\r\n        if (event.key.length === 1) {\r\n            // allow printable characters\r\n        }\r\n        else if(event.key === 'Enter') {\r\n            const userInput = state.consoleText.substr(state.readOnlyPos);\r\n            submitLine(userInput);\r\n            event.preventDefault();\r\n        }\r\n        else if(event.key === 'Backspace') {\r\n            if(event.target.selectionStart <= state.readOnlyPos)\r\n                event.preventDefault();\r\n        }\r\n        else if(event.key === 'Delete') {\r\n            if(event.target.selectionStart < state.readOnlyPos)\r\n                event.preventDefault();\r\n        }\r\n    }\r\n\r\n    // the event is fired when the cursor position changes in the text area\r\n    // if we select an area within the readOnlyPos, than we re-position the cursor\r\n    // allowing us to simulate a kind of terminal experience.\r\n    // text entered into the terminal after the readOnlyPos is considered user input\r\n    // and can be freely edited.\r\n    const handleSelect = (event) => {\r\n        if(event.target.selectionStart === state.readOnlyPos-1){\r\n            event.target.setSelectionRange(state.readOnlyPos, state.readOnlyPos);\r\n        }\r\n        else if(event.target.selectionStart < state.readOnlyPos-1){\r\n            event.target.setSelectionRange(event.target.value.length, event.target.value.length);\r\n        }\r\n    }\r\n\r\n    // change event for the text area, when the input changes, we need to update the state.\r\n    const handleChange = (event) => {\r\n        dispatch(actions.setConsoleText(event.target.value));\r\n    }\r\n\r\n    // This allows us to provide an api via ref to our parent component\r\n    // the below methods can be called by the parent\r\n    useImperativeHandle(ref, () => ({\r\n        print: (text) => {\r\n            dispatch(actions.appendProgramInput(text));\r\n        },\r\n        submitInput: () => {\r\n            const userInput = state.consoleText.substr(state.readOnlyPos);\r\n            submitLine(userInput);\r\n        }\r\n    }), [state.consoleText, state.readOnlyPos, submitLine] );\r\n\r\n\r\n    return(<div className=\"terminal\">\r\n        \r\n        <textarea wrap=\"off\" spellCheck=\"false\" value={state.consoleText}\r\n            onChange={handleChange}\r\n            onKeyDown={handleKeyDown}\r\n            onSelect={handleSelect}>\r\n        </textarea>\r\n    </div>);\r\n});","import React from 'react';\r\nimport './Toolbar.scss';\r\n\r\nexport function Toolbar(props) {\r\n\r\n\r\n    const items = props.items || [];\r\n    \r\n\r\n    return(<div className=\"toolbar\">\r\n        <ul>\r\n            {items.map( (item, index) => {\r\n                return(<li key={'tbitem-'+index} className={item.classNames} onClick={item.onClick}>{item.text}</li>);\r\n            })}\r\n        </ul>\r\n    </div>);\r\n}","import { BehaviorSubject } from 'rxjs';\r\n\r\nexport default class BefungeInterpreter {\r\n    \r\n    constructor(program) {\r\n        \r\n        this.program = program;\r\n        this.numRows = this.program.length;\r\n        this.numCols = Math.max( ...this.program.map(r => r.length) );\r\n        \r\n        this.stack = [];\r\n        this.stack$ = new BehaviorSubject([]);\r\n\r\n        this.onInstructionExecutedCb = null;\r\n        this.onConsoleOutCb = null;\r\n        this.onProgramTerminateCb = null;\r\n        this.onRequestConsoleInputCb = null;\r\n        \r\n\r\n        this.currentInstruction = null;\r\n        this.nextInstruction = { x: 0, y: 0, i: program[0][0], ...this.getInstructionDir(1, 0, program[0][0]) };\r\n        this.stringMode = false;\r\n\r\n        this.waitingForInput = false;\r\n\r\n        this.inputStack = [];\r\n        this.skipCount = 0;\r\n    }\r\n\r\n    destroy() {\r\n        \r\n    }\r\n\r\n    instructionInfo = {\r\n        '0-9': 'Push this number on the stack',\r\n        '+': 'Addition: Pop a and b, then push a+b',\r\n        '-':'Subtraction: Pop a and b, then push b-a',\r\n        '*': 'Multiplication: Pop a and b, then push a*b',\r\n        '/': 'Integer division: Pop a and b, then push b/a, rounded towards 0',\r\n        '%': 'Modulo: Pop a and b, then push the remainder of the integer division of b/a',\r\n        '!': 'Logical NOT: Pop a value. If the value is zero, push 1; otherwise, push zero',\r\n        '`': 'Greater than: Pop a and b, then push 1 if b>a, otherwise zero',\r\n        '>': 'Start moving right',\r\n        '<': 'Start moving left',\r\n        '^': 'Start moving up',\r\n        'v': 'Start moving down',\r\n        '?': 'Start moving in a random cardinal direction',\r\n        '_': 'Pop a value; move right if value=0, left otherwise',\r\n        '|': 'Pop a value; move down if value=0, up otherwise',\r\n        '\"': 'Start string mode: push each character\\'s ASCII value all the way up to the next\"',\r\n        ':': 'Duplicate value on top of the stack',\r\n        '\\\\': 'Swap two values on top of the stack',\r\n        '$': 'Pop value from the stack and discard it',\r\n        '.': 'Pop value and output as an integer followed by a space',\r\n        ',': 'Pop value and output as ASCII character',\r\n        '#': 'Bridge: Skip next cell',\r\n        'p': 'A \"put\" call (a way to store a value for later use). Pop y, x, and v, then change the character at (x,y) in the program to the character with ASCII value v',\r\n        'g': 'A \"get\" call (a way to retrieve data in storage). Pop y and x, then push ASCII value of the character at that position in the program',\r\n        '&': 'Ask user for a number and push it',\r\n        '~': 'Ask user for a character and push its ASCII value',\r\n        '@': 'End program',\r\n        \"StringMode\": 'all characters are pushed onto the stack'\r\n    }\r\n\r\n    step() {\r\n\r\n        if(this.waitingForInput)\r\n            return;\r\n        \r\n        this.currentInstruction = this.nextInstruction;\r\n        let ci = this.currentInstruction;\r\n\r\n\r\n        if(ci === null)\r\n            return;\r\n\r\n        if(this.stringMode) {\r\n            if( ci.i === '\"') {\r\n                this.stringMode = false;\r\n            }\r\n            else {\r\n                this.pushStack(ci.i.charCodeAt(0));\r\n            }\r\n        }\r\n        else if( ci.i.includes(['>', '<', 'v', '^', '?']) ) {\r\n            // direction modifiers already calculated\r\n        }\r\n        else if( ci.i >= '0' && ci.i <= '9') {\r\n            // push the number onto the stack\r\n            this.pushStack(parseInt(ci.i));\r\n        }\r\n        else if( ci.i === '+') {\r\n            // Addition: Pop a and b, then push a+b\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(a + b);\r\n        }\r\n        else if( ci.i === '-') {\r\n            // Subtraction: Pop a and b, then push b-a\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(b - a);\r\n        }\r\n        else if( ci.i === '*') {\r\n            // Multiplication: Pop a and b, then push a*b\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(a * b);\r\n        }\r\n        else if( ci.i === '/') {\r\n            // Integer division: Pop a and b, then push b/a, rounded towards 0.\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(b / a);\r\n        }\r\n        else if( ci.i === '%') {\r\n            // Modulo: Pop a and b, then push the remainder of the integer division of b/a.\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(b % a);\r\n        }\r\n        else if( ci.i === '!') {\r\n            // Logical NOT: Pop a value. If the value is zero, push 1; otherwise, push zero.\r\n            const a = this.popStack();\r\n            this.pushStack(a === 0 ? 1 : 0);\r\n        }\r\n        else if( ci.i === '`') {\r\n            // yes, its the grave character!\r\n            // Greater than: Pop a and b, then push 1 if b>a, otherwise zero.\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(b > a ? 1 : 0);\r\n        }\r\n        else if( ci.i === '_') {\r\n            // Pop a value; move right if value=0, left otherwise\r\n            // the direction was already calculated when we fetched this instruction, so we just need to pop off the value\r\n            this.popStack(); \r\n        }\r\n        else if( ci.i === '|') {\r\n            // Pop a value; move down if value=0, up otherwise\r\n            // the direction was already calculated when we fetched this instruction, so we just need to pop off the value\r\n            this.popStack(); \r\n        }\r\n        else if(ci.i === '\"') {\r\n            // Start string mode: push each character's ASCII value all the way up to the next \" quote character\r\n            this.stringMode = !this.stringMode;\r\n        }\r\n        else if( ci.i === ':') {\r\n            // Duplicate value on top of the stack\r\n            if(this.stack.length > 0)\r\n                this.pushStack( this.stack[this.stack.length -1]);\r\n        }\r\n        else if( ci.i === '\\\\') {\r\n            // Swap two values on top of the stack\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(a);\r\n            this.pushStack(b);\r\n        }\r\n        else if( ci.i === '$') {\r\n            // Pop value from the stack and discard it\r\n            this.popStack();\r\n        }\r\n        else if( ci.i === '.' ) {\r\n            // Pop value and output as an integer followed by a space\r\n            const a = this.popStack();\r\n            this.onConsoleOutCb( a );\r\n        }\r\n        else if( ci.i === ',' ) {\r\n            // Pop value and output as ASCII character\r\n            const a = this.popStack();\r\n            this.onConsoleOutCb( String.fromCharCode(a) );\r\n        }\r\n        else if( ci.i === '#' ) {\r\n            // Bridge: Skip next cell\r\n            // ci.dirX *= 2;\r\n            // ci.dirY *= 2\r\n            this.skipCount += 1;\r\n        }\r\n        else if( ci.i === 'p' ) {\r\n            // A \"put\" call (a way to store a value for later use). Pop y, x, and v, then change the character at (x,y) in the program to the character with ASCII value v\r\n            const y = this.popStack();\r\n            const x = this.popStack();\r\n            const v = this.popStack();\r\n            const newInstruction = String.fromCharCode(v);\r\n            this.program[y][x] = newInstruction;\r\n            // TODO: update the editor text\r\n        }\r\n\r\n        else if( ci.i === 'g') {\r\n            // A \"get\" call (a way to retrieve data in storage). Pop y and x, then push ASCII value of the character at that position in the program\r\n            const y = this.popStack();\r\n            const x = this.popStack();\r\n\r\n            if( x >= 0 && x < this.numCols && y >= 0 && y < this.numRows ) {\r\n                const val = this.program[y][x]; \r\n                this.pushStack(val);\r\n            }\r\n            else {\r\n                this.pushStack(0);\r\n            }\r\n        }\r\n        else if( ci.i === '&' ) {\r\n            // Ask user for a number and push it\r\n            // TODO: ask the user for a number\r\n            if(this.inputStack.length === 0) {\r\n                this.waitingForInput = true;\r\n                if( this.onRequestConsoleInputCb ) {\r\n                    this.onRequestConsoleInputCb();\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                const val = this.inputStack.shift();\r\n                this.pushStack(parseInt(val));\r\n            }\r\n        }\r\n        else if( ci.i === '~' ) {\r\n            // Ask user for a character and push its ASCII value\r\n            if(this.inputStack.length === 0) {\r\n                this.waitingForInput = true;\r\n                if( this.onRequestConsoleInputCb ) {\r\n                    this.onRequestConsoleInputCb();\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                const val = this.inputStack.shift();\r\n                this.pushStack(val.charCodeAt(0));\r\n            }\r\n        }\r\n        else if( ci.i === '@') {\r\n            // End of program\r\n            ci.dirX = 0;\r\n            ci.dirY = 0;\r\n\r\n            if(this.onProgramTerminateCb){\r\n                this.onProgramTerminateCb();\r\n            }\r\n        }\r\n\r\n        const ni = this.getNextInstruction();\r\n        this.nextInstruction = ni;\r\n\r\n        \r\n        if( this.onInstructionExecutedCb )\r\n            this.onInstructionExecutedCb(ci, ni);\r\n    }\r\n\r\n    pushStack(val) {\r\n        this.stack.push(val);\r\n        this.stack$.next(this.stack);\r\n    }\r\n    popStack() {\r\n        const val = this.stack.length > 0 ? this.stack.pop() : 0;\r\n        this.stack$.next(this.stack);\r\n        return val;\r\n    }\r\n\r\n    getNextInstruction() {\r\n        const ci = this.currentInstruction;\r\n        let nx = ci.x;\r\n        let ny = ci.y;\r\n        do {\r\n            this.skipCount -= 1;\r\n\r\n            nx = nx + ci.dirX;\r\n            ny = ny + ci.dirY;\r\n\r\n            // wrap the instructions\r\n            if( ny < 0 ) ny = this.numRows - 1;\r\n            if( nx < 0 ) nx = this.numCols - 1;\r\n            if( ny >= this.numRows ) ny = 0;\r\n            if( nx >= this.numCols ) nx = 0;\r\n            \r\n            \r\n        }while(this.skipCount >= 0)\r\n        this.skipCount = 0;\r\n            \r\n    \r\n        const instruction = (nx < this.program[ny].length) ? this.program[ny][nx] : '';\r\n        const instructionDir = this.getInstructionDir(ci.dirX, ci.dirY, instruction);\r\n        \r\n        return {x: nx, y: ny, i: instruction, ...instructionDir };\r\n    }\r\n\r\n    getInstructionDir(cDirX, cDirY, instruction) {\r\n        let dirX = cDirX;\r\n        let dirY = cDirY;\r\n\r\n        if(this.stringMode)\r\n            return {dirX, dirY};\r\n\r\n        switch(instruction) {\r\n            case '>': { dirX = 1; dirY = 0; break; }\r\n            case '<': { dirX =-1; dirY = 0; break; }\r\n            case '^': { dirX = 0; dirY =-1; break; }\r\n            case 'v': { dirX = 0; dirY = 1; break; }\r\n            case '?': { \r\n                const dir = Math.floor(Math.random() * 4);\r\n                if( dir === 0 ) { dirX = 1; dirY = 0 } // left\r\n                if( dir === 1 ) { dirX = 0; dirY = 1 } // down\r\n                if( dir === 2 ) { dirX =-1; dirY = 0 } // right\r\n                if( dir === 3 ) { dirX = 0; dirY =-1 } // up\r\n                break;\r\n            }\r\n            case '_': {\r\n                const a = this.stack.length > 0 ? this.stack[this.stack.length - 1] : 0;\r\n                dirY = 0;\r\n                dirX = a === 0 ? 1 : -1;\r\n                break;\r\n            }\r\n            case '|': {\r\n                const a = this.stack.length > 0 ? this.stack[this.stack.length - 1] : 0;\r\n                dirY = a === 0 ? 1 : -1;\r\n                dirX = 0;\r\n                break;\r\n            }\r\n            default: break;\r\n        }\r\n\r\n        return {dirX, dirY};\r\n    }\r\n\r\n    input(val) {\r\n        this.inputStack.push(val);\r\n        this.waitingForInput = false;\r\n        \r\n    }\r\n\r\n    onInstructionExecuted(callback) {\r\n        this.onInstructionExecutedCb = callback;\r\n    }\r\n    onConsoleOut(callback) {\r\n        this.onConsoleOutCb = callback;\r\n    }\r\n    onRequestConsoleInput(callback) {\r\n        this.onRequestConsoleInputCb = callback;\r\n    }\r\n\r\n    onProgramTerminate(callback) {\r\n        this.onProgramTerminateCb = callback;\r\n    }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nexport function BefungeStackVivew(props) {\r\n\r\n    const [stack, setStack] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let onStackChangeSubscription = null; \r\n        \r\n        if(props.program) {\r\n            onStackChangeSubscription = props.program.stack$.subscribe((s) => {\r\n                setStack([...s]);\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            if(onStackChangeSubscription)\r\n                onStackChangeSubscription.unsubscribe();\r\n            setStack([]);\r\n        };\r\n    }, [props.program]);\r\n\r\n    return (\r\n    <ul className=\"befunge-stack-view\">\r\n        { stack.reverse().map((item, index) => <li key={'bfstack-'+index}>\r\n            <span style={{float:'left'}}>{item}</span>\r\n            <span style={{float:'right'}}>{String.fromCharCode(item)}</span>\r\n        </li> ) }\r\n    </ul>);\r\n}","\r\nimport 'react-reflex/styles.css';\r\nimport React, {useRef, forwardRef, useState} from 'react';\r\nimport { TextGrid, TextGridStatusBar, actions} from '../TextGrid';\r\nimport { Terminal } from '../Terminal';\r\nimport { Toolbar } from '../Toolbar';\r\nimport BefungeInterpreter from './BefungeInterpreter';\r\nimport { store as textGridStore } from '../../store';\r\nimport { ReflexContainer, ReflexSplitter, ReflexElement } from 'react-reflex';\r\nimport './BefungeIde.scss';\r\nimport { BefungeStackVivew } from './BefungeStackView';\r\n\r\nlet runIntervilleTimer = null;\r\n\r\nconst BefungeIde = forwardRef((props, ref) => {\r\n\r\n    let [befungeInterpreter, setBefungeInterpreter] = useState(null);\r\n    \r\n\r\n    const handleKeyPress = (store, key) => {\r\n        if( key === 'v') return { preventDefault: false, actions: [actions.setTypeingDir( 0, 1)] };\r\n        if( key === '>') return { preventDefault: false, actions: [actions.setTypeingDir( 1, 0)] };\r\n        if( key === '<') return { preventDefault: false, actions: [actions.setTypeingDir(-1, 0)] };\r\n        if( key === '^') return { preventDefault: false, actions: [actions.setTypeingDir( 0,-1)] };\r\n        return { };\r\n    }\r\n\r\n    const setCursorPos = (rowIndex, colIndex) => {\r\n        textGridStore.dispatch(actions.setTargetCell(rowIndex, colIndex));\r\n    };\r\n\r\n    const setCursorDir = (xDir, yDir) => {\r\n        textGridStore.dispatch(actions.setTypeingDir(xDir, yDir));\r\n    }\r\n\r\n    const initProgram = () => {\r\n        const cells = textGridRef.current.getCells();\r\n        const interpreter = new BefungeInterpreter(cells);\r\n        \r\n        interpreter.onInstructionExecuted((li, ni) => {\r\n            if(ni !== null ) {\r\n                textGridStore.dispatch(actions.setTargetCell( ni.y, ni.x ));\r\n                textGridStore.dispatch(actions.setTypeingDir( ni.dirX, ni.dirY ));\r\n            }\r\n        });\r\n        \r\n        interpreter.onConsoleOut(text => {\r\n            if(terminalRef.current)\r\n                terminalRef.current.print(text);\r\n        });\r\n        interpreter.onProgramTerminate(() => {\r\n            stopProgram();            \r\n        });\r\n        interpreter.onRequestConsoleInput(() => {\r\n            const input = window.prompt(\"Enter a value\", \"\");\r\n            if(befungeInterpreter && befungeInterpreter.waitingForInput && input)\r\n                befungeInterpreter.input(input);\r\n        });\r\n\r\n        befungeInterpreter = interpreter; // hack\r\n        setBefungeInterpreter(interpreter);\r\n\r\n        textGridStore.dispatch(actions.setTargetCell( 0, 0 ));\r\n        textGridStore.dispatch(actions.setTypeingDir( 1, 0 ));\r\n    }\r\n\r\n    const debugProgram = () => {\r\n        initProgram();\r\n    };\r\n\r\n    \r\n    const runProgram = () => {\r\n        if(befungeInterpreter === null && runIntervilleTimer === null) {\r\n            initProgram();\r\n            runIntervilleTimer = setInterval(() => {\r\n                \r\n                    stepProgram();\r\n            }, 1);\r\n        }\r\n    };\r\n\r\n    const stopProgram = () => {\r\n        clearInterval(runIntervilleTimer);\r\n        runIntervilleTimer = null;\r\n        setBefungeInterpreter(null);\r\n        if(terminalRef.current) {\r\n            terminalRef.current.print('\\nProgram Terminated!\\n');\r\n            terminalRef.current.submitInput();\r\n        }\r\n    }\r\n\r\n    const stepProgram = () => {\r\n        befungeInterpreter.step();\r\n    };\r\n\r\n    const terminalCommands = {\r\n        'set-cursor-pos': (args) => { setCursorPos(parseInt(args[0]), parseInt(args[1])); },\r\n        'set-cursor-dir': (args) => { setCursorDir(parseInt(args[0]), parseInt(args[1])); },\r\n        'run': (args) => { runProgram() },\r\n        'next': (args) => { stepProgram(); },\r\n        'stack': (args) => { console.log( befungeInterpreter.stack); }\r\n    };\r\n\r\n    const terminalOnEnter = (input) => {\r\n        if(befungeInterpreter && befungeInterpreter.waitingForInput)\r\n            befungeInterpreter.input(input);\r\n    }\r\n\r\n// const prog = \r\n// `>              v\r\n// v  ,,,,,\"Hello\"<\r\n// >48*,          v\r\n// v,,,,,,\"World!\"<\r\n// >25*,@`;\r\n\r\n// const prog = \r\n// `64+\"!dlroW ,olleH\">:#,_@`;\r\n\r\n// const prog = \r\n// `~:1+!#@_,`;\r\n\r\n// const prog = \r\n// `64*>:00p258**44$$^>4$,1-:#v_v\r\n// 4$#^; BEFUNGE97 ;^#_@#:-1$>#<\r\n// 4*2-*26g00*:-*58:<vg3/*48+*:$\r\n// #@@@ooo:::...  .    .     .  `;\r\n\r\nconst prog = \r\n`1-0g:\"Z\"-#v_$91+\"sparw tup/teG\">:#,_$               v                          Z\r\n          >:\" \"-#v_$91+\"ecaps snruter teg BOO\">:#,_$v\r\nv                >0\" snruter teg BOO\">:#,_$.91+,    >\r\n>8:+:*11p11g#v_91+\"tib 8 dengis\"01-11p11g!#v_\"nu\">\" era slleC\">:#,_v\r\nvv           >91+\"tib 8>\"                  >     ^                 >91+\"krow \" #\r\n >        >\"spmuj egdE\">:#,_   91+\"krow \"04-3%1+#v_        >\"sredniamer evitag\"v\r\n>\"ton od \"^                                      >\"ton od \"^\r\n\"eN\">:#,_  91+\"skrow edomgnirts ni @\">:#,_@                                    >`;\r\n\r\n//const prog = `>  #12#  <`;\r\n\r\n\r\n    const config = {\r\n        cellWidth: 16,\r\n        cellHeight: 16,\r\n        text: prog,\r\n        events: {\r\n            onKeyDown: handleKeyPress\r\n        },\r\n        terminalCommands\r\n    }\r\n\r\n    const textGridRef = useRef();\r\n    const terminalRef = useRef();\r\n\r\n    const toolbar = [];\r\n    if( befungeInterpreter === null ) {\r\n        toolbar.push({ text: 'Run', classNames: 'button', onClick: () => runProgram() });\r\n        toolbar.push({ text: 'Debug', classNames: 'button', onClick: () => debugProgram() },);\r\n    }\r\n    else {\r\n        toolbar.push({ text: 'Stop', classNames: 'button', onClick: () => stopProgram() });\r\n        toolbar.push({ text: 'Step', classNames: 'button', onClick: () => stepProgram() });\r\n    }\r\n\r\n    return(\r\n    <div className=\"befungeIde\">\r\n        <ReflexContainer orientation=\"horizontal\">\r\n            {/* TOP MENU BAR */}\r\n            <ReflexElement style={{overflow:'hidden'}} minSize={24} maxSize={24}>\r\n                <Toolbar items={toolbar}></Toolbar>\r\n            </ReflexElement>\r\n\r\n            {/* MAIN AREA */}\r\n            <ReflexElement>\r\n                <ReflexContainer orientation=\"vertical\">\r\n                    <ReflexElement flex=\"1\">\r\n                        <ReflexContainer orientation=\"horizontal\">\r\n                            <ReflexElement flex=\"1\">\r\n                                <TextGrid ref={textGridRef} config={config} ></TextGrid>\r\n                            </ReflexElement>\r\n                            <ReflexSplitter />\r\n                            <ReflexElement minSize=\"200\" maxSize=\"400\" style={{overflow:'hidden'}}>\r\n                                <Terminal ref={terminalRef} commands={terminalCommands} onEnter={terminalOnEnter}></Terminal>\r\n                            </ReflexElement>\r\n                        </ReflexContainer>\r\n                    </ReflexElement>\r\n                    <ReflexSplitter />\r\n                    <ReflexElement style={{overflow:'hidden'}} minSize=\"200\" maxSize=\"400\">\r\n                    <div className=\"asside\">\r\n                        <div className=\"asside-header\">Debug Stack</div>\r\n                        <div className=\"asside-section\" style={{maxHeight: 200}}>\r\n                            <BefungeStackVivew program={befungeInterpreter}></BefungeStackVivew>            \r\n                        </div>\r\n                    </div>\r\n                    </ReflexElement>\r\n                </ReflexContainer>\r\n               \r\n            </ReflexElement>\r\n\r\n            {/* STATUS BAR */}\r\n            <ReflexElement style={{overflow:'hidden'}} minSize={24} maxSize={24}>\r\n                <TextGridStatusBar></TextGridStatusBar>\r\n            </ReflexElement>\r\n\r\n        </ReflexContainer>\r\n    </div>);\r\n});\r\n\r\nexport default BefungeIde;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.scss';\nimport BefungeIde from './Components/BefungeIde/BefungeIde';\nimport { store } from './store';\n\n\nexport default function App() {\n\n    return (\n        <Provider store={store}>\n            <div className=\"App\" style={{width: 'calc(100%)', height: 'calc(100% )', overflow: 'hidden'}}>    \n                <BefungeIde></BefungeIde>\n            </div>\n        </Provider>\n    );\n}\n"],"sourceRoot":""}