{"version":3,"sources":["Components/TextGrid/store/actions.js","Components/TextGrid/store/reducers.js","Components/TextGrid/store/epics.js","Components/TextGrid/store/index.js","Components/TextGrid/TextGrid.js","Components/TextGrid/index.js","serviceWorker.js","index.js","App.js"],"names":["NO_OP","SETUP_GRID","INITIALISE_GRID","MOUSE_MOVED","MOUSE_DOWN","MOUSE_UP","SCROLL_VIEW","DRAG_START","DRAG_END","KEY_DOWN","SET_HOVER_CELL","SET_CELL_VALUE","SET_TARGET_CELL","SHIFT_CELLS_IN_RANGE","INSERT_ROW","INSERT_COL","DELETE_ROW","DELETE_COL","SET_INSERT_MODE","SET_SELECTION_AREA","setCellValue","payload","type","setTargetCell","setInsertMode","insertMode","setSelectionArea","insertCol","rowIndex","colIndex","deleteCol","initialState","cellWidth","cellHeight","rows","cols","cells","viewport","xOffset","yOffset","hover","cellIndex","target","selection","isMouseDown","isDragging","startRowIndex","startColIndex","endRowIndex","endColIndex","selectedCells","epics","combineEpics","action","state","pipe","ofType","actions","mergeMap","console","log","width","height","text","value","Math","floor","replace","split","map","line","mx","mouseX","my","mouseY","hoverState","newActions","push","_moveTarget","dx","dy","key","isShiftDown","length","dir","numCols","max","epicMiddleware","createEpicMiddleware","store","createStore","rowId","colId","arr","x","y","_fillArrCells","sx","sy","ey","shiftCount","counter","ri","splice","_shiftLeft","abs","pop","_shiftRight","applyMiddleware","run","TextGridRow","props","useSelector","cellArr","Array","fill","className","style","maxHeight","minHeight","cell","cellId","TextGridCell","isRowHovered","isColHovered","isCellSelected","isCellHovered","classNames","join","getClassNames","maxWidth","minWidth","TextGridRangeSelection","sci","eci","sri","eri","left","min","top","TextGridStatusBar","TextGridConsole","useState","readOnlyPos","setReadOnlyPos","consoleText","setConsoleText","useEffect","clearConsole","onEnter","commands","clear","args","echo","printLine","lineItems","cmd","undefined","submitLine","substr","display","wrap","spellCheck","onChange","event","onKeyDown","preventDefault","selectionStart","onSelect","setSelectionRange","TextGrid","dispatch","useDispatch","rowsArr","ref","useRef","current","offsetWidth","offsetHeight","tw","th","onScroll","scrollLeft","scrollTop","draggable","tabIndex","shiftKey","onMouseMove","bounds","currentTarget","getBoundingClientRect","clientX","clientY","onMouseUp","onMouseDown","focus","cr","position","flexDirection","Boolean","window","location","hostname","match","ReactDOM","render","overflow","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.104a7675.chunk.js","sourcesContent":["export const NO_OP = '[TextGrid] NO Op';\r\nexport const INCREMENT_COUNTER = '[TextGrid] INCREMENT_COUNTER';\r\nexport const SETUP_GRID = '[TextGrid] Setup';\r\nexport const INITIALISE_GRID = '[TextGrid] Initialise';\r\n\r\nexport const MOUSE_MOVED = '[TextGrid] MouseMoved';\r\nexport const MOUSE_DOWN = '[TextGrid] Mouse Pressed';\r\nexport const MOUSE_UP = '[TextGrid] Mouse Released';\r\n\r\nexport const SCROLL_VIEW = '[TextGrid] Scroll View';\r\n\r\nexport const DRAG_START = '[TextGrid] Drag Start';\r\nexport const DRAG_END = '[TextGrid] Drag End';\r\nexport const DRAG_CANCEL = '[TextGrid] Drag Canceled';\r\n\r\nexport const KEY_DOWN = '[TextGrid] Key Down';\r\n\r\nexport const SET_HOVER_CELL = '[TextGrid] Set Hover Cell';\r\nexport const SET_CELL_VALUE = '[TextGrid] Set Cell Text';\r\nexport const SET_TARGET_CELL = '[TextGrid] Set Target Cell';\r\nexport const SHIFT_CELLS_IN_RANGE = '[TextGrid] Shift Cells In Range';\r\n\r\nexport const INSERT_ROW = '[TextGrid] Insert Row';\r\nexport const INSERT_COL = '[TextGrid] Insert Col';\r\nexport const DELETE_ROW = '[TextGrid] Delete Row';\r\nexport const DELETE_COL = '[TextGrid] Delete Col';\r\n\r\nexport const SET_INSERT_MODE = '[TextGrid] Set Insert Mode';\r\nexport const SET_SELECTION_AREA = '[TextGrid] Set Selection Area';\r\n\r\n// TODO ACTIONS:\r\n// - COPY SELECTION\r\n// - CUT SELECTION\r\n// - PASTE SELECTION\r\n// - FILL SELECTION\r\n\r\n\r\n// TODO BEHAVIOURS:\r\n// - allow for dynamic resize calculations\r\n// - move viewport when target is near borders\r\n// - ability to change direction of tyed text\r\n\r\n\r\nexport function none() {\r\n    return { type: NO_OP }\r\n}\r\n\r\nexport function setupGrid(width, height, text, cellWidth, cellHeight) {\r\n    return { type: SETUP_GRID, payload: {width, height, text, cellWidth, cellHeight} }\r\n}\r\n\r\nexport function initialiseGrid(payload) {\r\n    return { type: INITIALISE_GRID, payload }\r\n}\r\n\r\nexport function mouseMoved(mousePos) {\r\n    return { type: MOUSE_MOVED, payload: mousePos };\r\n}\r\n\r\nexport function mouseDown() {\r\n    return { type: MOUSE_DOWN };\r\n}\r\n\r\nexport function mouseUp() {\r\n    return { type: MOUSE_UP };\r\n}\r\n\r\nexport function scrollView(xOffset, yOffset) {\r\n    return { type: SCROLL_VIEW, payload: {xOffset, yOffset}};\r\n}\r\n\r\nexport function dragStart() {\r\n    return { type: DRAG_START };\r\n}\r\n\r\nexport function dragEnd() {\r\n    return { type: DRAG_END };\r\n}\r\n\r\nexport function dragCancel() {\r\n    return { type: DRAG_CANCEL };\r\n}\r\n\r\nexport function keyDown(payload) {\r\n    return { type: KEY_DOWN, payload };\r\n}\r\n\r\nexport function setHoverCell(payload) {\r\n    return { type: SET_HOVER_CELL, payload };\r\n}\r\n\r\nexport function incrementCounter(amount) {\r\n    return { type: INCREMENT_COUNTER, payload: amount }\r\n}\r\n\r\nexport function setCellValue(payload) {\r\n    return { type: SET_CELL_VALUE, payload};\r\n}\r\n\r\nexport function setTargetCell(payload) {\r\n    return { type: SET_TARGET_CELL, payload};\r\n}\r\n\r\nexport function setInsertMode(insertMode) {\r\n    return { type: SET_INSERT_MODE, payload: {insertMode}};\r\n}\r\n\r\nexport function setSelectionArea(payload) {\r\n    // {startRowIndex, startColIndex, endRowIndex, endColIndex } \r\n    return { type: SET_SELECTION_AREA, payload};\r\n}\r\n\r\nexport function shiftCellsInRange(startColIndex, startRowIndex, endColIndex, endRowIndex, dx, dy) {\r\n    return {\r\n        type: SHIFT_CELLS_IN_RANGE, \r\n        payload: { startColIndex, startRowIndex, endColIndex, endRowIndex, dx, dy }\r\n    };\r\n}\r\n\r\nexport function insertRow(rowIndex) {\r\n    return { type: INSERT_ROW, payload: {rowIndex}};\r\n}\r\n\r\nexport function insertCol(rowIndex, colIndex) {\r\n    return { type: INSERT_COL, payload: {rowIndex, colIndex}};\r\n}\r\n\r\nexport function deleteRow(rowIndex) {\r\n    return { type: DELETE_ROW, payload: {rowIndex}};\r\n}\r\n\r\nexport function deleteCol(rowIndex, colIndex) {\r\n    return { type: DELETE_COL, payload: {rowIndex, colIndex}};\r\n}\r\n","import * as actions from './actions';\r\n\r\nconst initialState = {\r\n    cellWidth: 24,\r\n    cellHeight: 24, \r\n    rows: 0,\r\n    cols: 0,\r\n    cells: [],\r\n    insertMode: true,\r\n\r\n    viewport: {\r\n        rows: 0,\r\n        cols: 0,\r\n        xOffset: 0,\r\n        yOffset: 0\r\n    },\r\n\r\n    hover: {\r\n        rowIndex: -1,\r\n        colIndex: -1,\r\n        cellIndex: -1\r\n    },\r\n\r\n    target: {\r\n        rowIndex: -1,\r\n        colIndex: -1,\r\n        cellIndex: -1\r\n    },\r\n\r\n    selection: {\r\n        isMouseDown: false,\r\n        isDragging: false,\r\n        startRowIndex: 0,\r\n        startColIndex: 0,\r\n        endRowIndex: 0,\r\n        endColIndex: 0\r\n    },\r\n\r\n    selectedCells: []\r\n};\r\n\r\nexport function reducer(state = initialState, action) {\r\n\r\n    switch(action.type) {\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.INITIALISE_GRID: {\r\n            return {...state, ...action.payload};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_HOVER_CELL: {\r\n            return {...state, hover: action.payload };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_CELL_VALUE: {\r\n            const rowId = action.payload.rowIndex;\r\n            const colId = action.payload.colIndex;\r\n            const value = action.payload.value;\r\n            const cells = state.cells;\r\n            _fillArrCells(cells, colId, rowId);\r\n            cells[rowId][colId] = value;\r\n            return {...state, cells };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_TARGET_CELL: {\r\n            const target = {...state.target, ...action.payload };\r\n            const selection = {\r\n                ...state.selection,\r\n                startRowIndex: target.rowIndex,\r\n                startColIndex: target.colIndex,\r\n                endRowIndex: target.rowIndex,\r\n                endColIndex: target.colIndex\r\n            };\r\n            return {...state, target, selection };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_INSERT_MODE: {\r\n            return {...state, insertMode: action.payload.insertMode }\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SHIFT_CELLS_IN_RANGE: {\r\n            const {startColIndex, startRowIndex, endColIndex, endRowIndex, dx, dy} = action.payload;\r\n            const cells = state.cells;\r\n            if(dx < 0 ) {  _shiftLeft(startColIndex, startRowIndex, endRowIndex, cells, Math.abs(dx));  }\r\n            if(dx > 0 ) {  _shiftRight(startColIndex, startRowIndex, endRowIndex, cells, Math.abs(dx));  }\r\n\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.INSERT_ROW: {\r\n            const {rowIndex} = action.payload;\r\n            const cells = state.cells;\r\n            cells.splice(rowIndex, 0, []);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.INSERT_COL: {\r\n            const {rowIndex, colIndex} = action.payload;\r\n            const cells = state.cells;\r\n            while(cells.length <= rowIndex) cells.push([]);\r\n            while(cells[rowIndex].length <= colIndex) cells[rowIndex].push('');\r\n            cells[rowIndex].splice(colIndex, 0, '');\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DELETE_ROW: {\r\n            const {rowIndex} = action.payload;\r\n            const cells = state.cells;\r\n            cells.splice(rowIndex, 1);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DELETE_COL: {\r\n            console.log(actions.DELETE_COL);\r\n            const {rowIndex, colIndex} = action.payload;\r\n            const cells = state.cells;\r\n            if(cells.length <= rowIndex) return state;\r\n            if(cells[rowIndex].length <= colIndex) return state;\r\n            cells[rowIndex].splice(colIndex, 1);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_SELECTION_AREA: {\r\n            const selection = {...state.selection, ...action.payload};\r\n            const target = {\r\n                ...state.target,\r\n                rowIndex: selection.endRowIndex,\r\n                colIndex: selection.endColIndex,\r\n                cellIndex: selection.endRowIndex * state.cols + selection.endColIndex\r\n            };\r\n            return {...state, selection, target };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOUSE_DOWN: {\r\n            const selection = {...state.selection, isMouseDown: true};\r\n            return {...state,  selection}\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOUSE_UP: {\r\n            const selection = {...state.selection, isMouseDown: false};\r\n            return {...state,  selection}\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SCROLL_VIEW: {\r\n            const {xOffset, yOffset} = action.payload;\r\n            const viewport = {...state.viewport, \r\n                xOffset: Math.floor(xOffset / state.cellWidth),\r\n                yOffset: Math.floor(yOffset / state.cellHeight)    \r\n            };\r\n            return { ...state, viewport };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DRAG_START: {\r\n            const target = {...state.target};\r\n            const selection = {...state.selection, isDragging: true};\r\n            selection.startColIndex = target.colIndex;\r\n            selection.startRowIndex = target.rowIndex;\r\n            selection.endColIndex = target.colIndex;\r\n            selection.endRowIndex = target.rowIndex + 1;\r\n            return {...state, selection};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DRAG_END: {\r\n            const selection = {...state.selection, isDragging: false};\r\n            return {...state, selection }\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nfunction _shiftLeft(sx, sy, ey, arr, shiftCount) {\r\n    for(let counter = 0; counter < shiftCount; counter++) {\r\n        for(let ri=sy; ri<=ey; ri++) {\r\n            arr[ri].splice(sx, 1);\r\n            arr[ri].push('');\r\n        }\r\n        sx-=1;\r\n    }\r\n}\r\n\r\nfunction _shiftRight(sx, sy, ey, arr, shiftCount) {\r\n    for(let counter = 0; counter < shiftCount; counter++) {\r\n        for(let ri=sy; ri<=ey; ri++) {\r\n            if(arr[ri]) {\r\n                arr[ri].pop();\r\n                arr[ri].splice(sx, 0, ['']);\r\n            }\r\n        }\r\n        sx+=1;\r\n    }\r\n}\r\n\r\nfunction _fillArrCells(arr, x, y) {\r\n    while(arr.length <= y)\r\n        arr.push([]);\r\n\r\n    while(arr[y].length <= x)\r\n        arr.push('');\r\n}","import { combineEpics, ofType } from 'redux-observable';\r\nimport * as actions from './actions';\r\n\r\nimport { mergeMap } from 'rxjs/operators';\r\n\r\n\r\n\r\nconst setupGrid = (action, state) => action.pipe(\r\n    ofType(actions.SETUP_GRID),\r\n    mergeMap((action) => {\r\n\r\n        console.log(action);\r\n\r\n        const width = action.payload.width;\r\n        const height = action.payload.height;\r\n        const text = action.payload.text;\r\n\r\n        const cellWidth = action.payload.cellWidth || state.value.cellWidth;\r\n        const cellHeight = action.payload.cellHeight || state.value.cellHeight;\r\n\r\n        const rows = Math.floor(height / (cellHeight-1)) + 1;\r\n        const cols = Math.floor(width / (cellWidth-1)) + 1;\r\n        \r\n        const viewport = {\r\n            ...state.value.viewport,\r\n            rows,\r\n            cols\r\n        };\r\n\r\n        // create a 2D array of characters, [rows][cols]\r\n        // regex strips out the various line endings\r\n        const cells = text.replace(/\\r\\n/g, \"\\r\").replace(/\\n/g, \"\\r\").split(/\\r/).map(line => line.split(''));\r\n        \r\n        // initialise the grid with the above calculated data\r\n        return [ actions.initialiseGrid({cellWidth, cellHeight, rows, cols, cells, viewport}) ];\r\n    })\r\n);\r\n\r\nconst onMouseMoved = (action, state) => action.pipe(\r\n    ofType(actions.MOUSE_MOVED),\r\n    mergeMap((action) => {\r\n\r\n        // get mouse coordinates\r\n        const mx = action.payload.mouseX;\r\n        const my = action.payload.mouseY;\r\n\r\n        // subtract 1 from width and height for row/col/cell index calculations\r\n        const cellWidth = state.value.cellWidth - 1;\r\n        const cellHeight = state.value.cellHeight - 1;\r\n\r\n        const viewport = state.value.viewport;\r\n\r\n        // calculate the row/col/cell index the mouse is over\r\n        const rowIndex = Math.floor(my / cellHeight) + viewport.yOffset;\r\n        const colIndex = Math.floor(mx / cellWidth) + viewport.xOffset;\r\n        const cellIndex = rowIndex * state.value.cols + colIndex;\r\n        const hoverState = { rowIndex, colIndex, cellIndex };\r\n\r\n        const newActions = [];\r\n\r\n        // update the hover state\r\n        if(cellIndex !== state.value.hover.cellIndex) {\r\n            newActions.push(actions.setHoverCell(hoverState));\r\n        }\r\n\r\n        // If we move the mouse while the mouse is down, than we will\r\n        // either begin the selection, or expand the selection\r\n        if(state.value.selection.isMouseDown) {\r\n            if( !state.value.selection.isDragging ) {\r\n                newActions.push(actions.dragStart());\r\n            }\r\n            else {\r\n                // TODO: This logic can be done in a \"Drag\" reducer.\r\n                const selection = {...state.value.selection};\r\n                selection.endRowIndex = rowIndex;\r\n                selection.endColIndex = colIndex + (selection.endColIndex < selection.startColIndex ? 0 : 1);\r\n                newActions.push(actions.setSelectionArea(selection)); \r\n            }                   \r\n        }\r\n        \r\n        return newActions;\r\n    })\r\n);\r\n\r\nconst onMouseDown = (action, state) => action.pipe(\r\n    ofType(actions.MOUSE_DOWN),\r\n    mergeMap((action) => {\r\n\r\n        // set the target cursor position to the location of the hovered cell\r\n        const target = _moveTarget(state.value, state.value.hover, 0, 0);\r\n        return [actions.setTargetCell(target)];\r\n    })\r\n);\r\n\r\nconst onMouseUp = (action, state) => action.pipe(\r\n    ofType(actions.MOUSE_UP),\r\n    mergeMap((action) => {\r\n        // No action required\r\n        return [];\r\n    })\r\n);\r\n\r\n\r\nconst onKeyDown = (action, state) => action.pipe(\r\n    ofType(actions.KEY_DOWN),\r\n    mergeMap((action) => {\r\n        const key = action.payload.key;\r\n        const rowIndex = state.value.target.rowIndex;\r\n        const colIndex = state.value.target.colIndex;\r\n        const insertMode = state.value.insertMode;\r\n        const isShiftDown = action.payload.isShiftDown;\r\n        const selection = {...state.value.selection};\r\n\r\n        if(key.length === 1) {\r\n            const target = _moveTarget(state.value, state.value.target, 1, 0);\r\n            return [\r\n                // insertMode ? actions.shiftCellsInRange(colIndex, rowIndex, target.colIndex, target.rowIndex, 1, 0) : actions.none(),\r\n                insertMode ? actions.insertCol(rowIndex, colIndex) : actions.none(),\r\n                actions.setCellValue({ rowIndex, colIndex, value: key }),\r\n                actions.setTargetCell(target)\r\n            ];\r\n        }\r\n        else {\r\n            if( key === 'Tab' ) {\r\n                const dir = isShiftDown ? -1 : 1;\r\n                const target = _moveTarget(state.value, state.value.target, dir, 0);\r\n                return[ actions.setTargetCell(target) ];\r\n            }\r\n            if( key === 'Enter' ) {\r\n                const target = _moveTarget(state.value, state.value.target, 0, 1);\r\n                return[ actions.setTargetCell(target) ];\r\n            }\r\n            else if( key === 'Backspace') {\r\n                const target = _moveTarget(state.value, state.value.target, -1, 0);\r\n                return[\r\n                    insertMode ? \r\n                        actions.deleteCol(target.rowIndex, target.colIndex) :\r\n                        actions.setCellValue({ rowIndex, colIndex, value: '' }),\r\n                    actions.setTargetCell(target)\r\n                ];\r\n            }\r\n            else if( key === 'Delete') {\r\n                return[ \r\n                    insertMode ? \r\n                        actions.shiftCellsInRange(colIndex, rowIndex, colIndex, rowIndex, -1, 0) :\r\n                        actions.setCellValue({ rowIndex, colIndex, value: '' }) \r\n                    ];\r\n            }\r\n            else if( key === 'ArrowLeft') {\r\n                \r\n                if(isShiftDown) {\r\n                    selection.endColIndex -= 1;\r\n                    return[  actions.setSelectionArea(selection) ];\r\n                }\r\n                else {\r\n                    const target = _moveTarget(state.value, state.value.target, -1, 0);\r\n                    return[ actions.setTargetCell(target) ];\r\n                }\r\n            }\r\n            else if( key === 'ArrowRight') {\r\n                if(isShiftDown) {\r\n                    selection.endColIndex += 1;\r\n                    return[  actions.setSelectionArea(selection) ];\r\n                }\r\n                else {\r\n                    const target = _moveTarget(state.value, state.value.target, 1, 0)\r\n                    return[ actions.setTargetCell(target) ];\r\n                }\r\n            }\r\n            else if( key === 'ArrowUp') {\r\n                if(isShiftDown) {\r\n                    selection.endRowIndex -= 1;\r\n                    return[  actions.setSelectionArea(selection) ];\r\n                }\r\n                else {\r\n                    const target =  _moveTarget(state.value, state.value.target, 0, -1);\r\n                    return[ actions.setTargetCell(target) ];\r\n                }\r\n            }\r\n            else if( key === 'ArrowDown') {\r\n                if(isShiftDown) {\r\n                    selection.endRowIndex += 1;\r\n                    return[  actions.setSelectionArea(selection) ];\r\n                }\r\n                else {\r\n                    const target = _moveTarget(state.value, state.value.target, 0, 1);\r\n                    return[ actions.setTargetCell(target) ];\r\n                }\r\n                \r\n            }\r\n            else if( key === 'Insert') {\r\n                return[ actions.setInsertMode(!state.value.insertMode) ];\r\n            }\r\n        }\r\n\r\n        return [];\r\n    })\r\n);\r\n\r\nexport const epics = combineEpics(\r\n    setupGrid,\r\n    onMouseMoved,\r\n    onMouseDown,\r\n    onMouseUp,\r\n    onKeyDown\r\n);\r\n\r\n\r\n// ============================================================================\r\n// HELPER FUNCTIONS\r\n// ============================================================================\r\n\r\nfunction _moveTarget(state, target, dx, dy) {\r\n    const numCols = state.cols;\r\n\r\n    let rowIndex = target.rowIndex + dy;\r\n    let colIndex = target.colIndex + dx;\r\n\r\n    // prevent wrapping\r\n    rowIndex = Math.max(rowIndex, 0);\r\n    colIndex = Math.max(colIndex, 0);\r\n\r\n\r\n    const cellIndex = rowIndex * numCols + colIndex;\r\n\r\n    // re-calculate the row/col index values based on the new cell index.\r\n    return { rowIndex, colIndex, cellIndex };\r\n}\r\n\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport { createEpicMiddleware } from 'redux-observable';\r\nimport { reducer } from './reducers';\r\nimport { epics } from './epics';\r\n\r\nexport * from './actions';\r\nexport * from './epics';\r\nexport * from './reducers';\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\nexport const store = createStore(reducer, applyMiddleware(epicMiddleware));\r\n\r\nepicMiddleware.run(epics);","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from './store/actions';\r\nimport './TextGrid.scss';\r\n\r\n\r\n/**\r\n * This component renders the text grid and handles\r\n */\r\nfunction TextGrid(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const viewport = useSelector(state => state.viewport);\r\n    const rowsArr = viewport.rows > 0 ? new Array(viewport.rows).fill('') : [];\r\n\r\n    const ref = useRef(null);\r\n    useEffect(() => {\r\n        const width = ref.current ? ref.current.offsetWidth : 0;\r\n        const height = ref.current ? ref.current.offsetHeight: 0;\r\n\r\n        dispatch(actions.setupGrid(width, height, props.text, props.tw, props.th));\r\n\r\n    }, [props, dispatch]);\r\n\r\n    const handleMouseMove = (event) => {\r\n        \r\n        let bounds = event.currentTarget.getBoundingClientRect();\r\n        let mouseX = event.clientX - bounds.left;\r\n        let mouseY = event.clientY - bounds.top;\r\n        \r\n        dispatch(actions.mouseMoved({mouseX, mouseY}));\r\n    }\r\n\r\n    const handleKeyPress = (event) => {\r\n        event.preventDefault();\r\n        dispatch(actions.keyDown({key: event.key, isShiftDown: event.shiftKey}));\r\n    }\r\n\r\n    const handleMouseDown = (event) => {\r\n        event.preventDefault();\r\n        event.currentTarget.focus();\r\n        dispatch(actions.mouseDown());\r\n    }\r\n\r\n    const handleMouseUp = (event) => {\r\n        event.preventDefault();\r\n        dispatch(actions.mouseUp());\r\n    }\r\n\r\n    const handleScroll = (event) => {\r\n        event.preventDefault();\r\n        dispatch(actions.scrollView(event.target.scrollLeft, event.target.scrollTop));\r\n    }\r\n\r\n    return(\r\n        <div ref={ref} className=\"text-grid-area\"\r\n            onScroll={handleScroll}\r\n            draggable\r\n            tabIndex='0'\r\n            onKeyDown={handleKeyPress}\r\n            onMouseMove={handleMouseMove} \r\n            onMouseUp={handleMouseUp}\r\n            onMouseDown={handleMouseDown} >\r\n            <div  className=\"text-grid\">\r\n\r\n                {rowsArr.map((cr, rowIndex) =>\r\n                    <TextGridRow key={`gridRow-${rowIndex}`} rowId={rowIndex + viewport.yOffset}></TextGridRow> \r\n                )}\r\n                <TextGridRangeSelection></TextGridRangeSelection>\r\n            </div>\r\n            <div style={{width: 10000, height: 10000, position: 'absolute'}}></div>\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * Rhis component renders each row of cells\r\n */\r\nfunction TextGridRow(props) {\r\n    \r\n    const rowId = props.rowId;\r\n    const cellHeight = useSelector(state => state.cellHeight);\r\n    const viewport = useSelector(state => state.viewport);\r\n    const numCols = useSelector(state=> state.cols);\r\n    const cellArr = viewport.cols > 0 ? new Array(viewport.cols).fill('') : [];\r\n\r\n    return(<div className={'text-grid-row'} style={{height: cellHeight, maxHeight: cellHeight, minHeight: cellHeight}}>\r\n        {cellArr.map((cell, colId) => {\r\n            const colIndex = colId + viewport.xOffset;\r\n            const cellId = rowId * numCols + colIndex;\r\n            return (<TextGridCell key={'cell-'+colIndex} rowId={rowId} colId={colIndex} cellId={cellId}></TextGridCell>);\r\n        })}\r\n    </div>);\r\n}\r\n\r\n/**\r\n * This component renders an individual cell within the table.\r\n */\r\nfunction TextGridCell(props) {\r\n\r\n    const rowId = props.rowId;\r\n    const colId = props.colId;\r\n    const cellId = props.cellId;\r\n\r\n    const cell = useSelector(state => {\r\n        if(rowId < state.cells.length && colId < state.cells[rowId].length)\r\n            return state.cells[rowId][colId];\r\n        return '';\r\n    });\r\n    \r\n    const cellWidth = useSelector(state => state.cellWidth);\r\n\r\n    const isRowHovered = useSelector (state => state.hover.rowIndex === rowId );\r\n    const isColHovered = useSelector (state => state.hover.colIndex === colId );\r\n    const isCellSelected = useSelector (state => state.target.cellIndex === cellId );\r\n    const insertMode = useSelector(state => state.insertMode );\r\n    const isCellHovered = isRowHovered && isColHovered;\r\n\r\n    const getClassNames = () => {\r\n\r\n        const classNames = ['text-grid-cell'];\r\n\r\n        if( isCellHovered ) classNames.push( 'cell-hover' );\r\n        if( isRowHovered )  classNames.push('row-hover');\r\n        if( isColHovered ) classNames.push('col-hover');\r\n        if( isCellSelected && insertMode ) classNames.push('active-insert')\r\n        if( isCellSelected && !insertMode ) classNames.push('active-override')\r\n\r\n        return classNames.join(' ');\r\n    }\r\n\r\n    return(<span className={getClassNames()}  style={{width: cellWidth, maxWidth: cellWidth, minWidth: cellWidth}} >\r\n        {cell}\r\n    </span>);\r\n}\r\n\r\n/**\r\n * This component renders the text selection area\r\n */\r\nfunction TextGridRangeSelection() {\r\n\r\n    const selection = useSelector(state => state.selection );\r\n    const cellWidth = useSelector(state => state.cellWidth);\r\n    const cellHeight = useSelector(state => state.cellHeight);\r\n    const viewport = useSelector(state => state.viewport);\r\n\r\n    // with the viewport in place, we need to calculate the relative position of the selction box\r\n    const sci = selection.startColIndex - viewport.xOffset;\r\n    const eci = selection.endColIndex - viewport.xOffset;\r\n    const sri = selection.startRowIndex - viewport.yOffset;\r\n    const eri = selection.endRowIndex - viewport.yOffset;\r\n\r\n    // calculate the size and position of the selection box\r\n    // position is relative to the top left of the TextGrid component\r\n    const width = ((eci - sci) * (cellWidth-1));\r\n    const height = (eri- sri + 1) * (cellHeight-1) + ((eri - sri) < 0 ? -(cellHeight-1) : 0);\r\n    const left = (sci * (cellWidth-1)) + Math.min(width, 0);\r\n    const top = (sri * (cellHeight-1)) + Math.min(height, 0);\r\n    const style={ width: Math.abs(width), height: Math.abs(height), left, top };\r\n\r\n    // render the selection grid.\r\n    return(<div className='text-grid-selection' style={style}></div>);\r\n}\r\n\r\n\r\n/**\r\n * \r\n */\r\nexport function TextGridStatusBar() {\r\n    const viewport = useSelector(state => state.viewport );\r\n    const target = useSelector(state => state.target);\r\n    const cells = useSelector(state => state.cells);\r\n\r\n    return(<div className=\"text-grid-status-bar\">\r\n        <ul>\r\n            <li>R: {viewport.rows}</li>\r\n            <li>C: {viewport.cols}</li>\r\n            <li>SX: {viewport.xOffset}</li>\r\n            <li>SY: {viewport.yOffset}</li>\r\n            <li>TX: {target.colIndex}{}</li>\r\n            <li>TY: {target.rowIndex}{}</li>\r\n            <li>NumRows: {cells.length}</li>\r\n            <li>NumCols: {!!cells[target.rowIndex] ? cells[target.rowIndex].length : ''}</li>\r\n        </ul>\r\n    </div>);\r\n}\r\n\r\n/**\r\n * This is the terminal window\r\n * i got a bit lazy with this component and have not used the redux sotre\r\n * TODO: refactor\r\n */\r\nexport function TextGridConsole() {\r\n\r\n    const [readOnlyPos, setReadOnlyPos] = useState(1);\r\n    let [consoleText, setConsoleText] = useState();\r\n\r\n    useEffect(() => {\r\n        clearConsole();\r\n        onEnter();\r\n    }, []);\r\n\r\n    const commands = {\r\n        clear: (args) => { clearConsole(); },\r\n        echo: (args) => { printLine(args.join(' ')); }\r\n    }\r\n\r\n    const submitLine = (line) => {\r\n        const lineItems = line.split(' ');\r\n\r\n        if(lineItems.length === 0)\r\n            return;\r\n\r\n        const [cmd, ...args] = lineItems;\r\n\r\n        if(commands[cmd] !== undefined){\r\n            commands[cmd](args);\r\n        }\r\n    }\r\n\r\n    const printLine = (value) => {\r\n        setConsoleText(consoleText + '\\n ' + value); consoleText += '\\n' + value; // HACK\r\n    }\r\n\r\n    const clearConsole = () => {\r\n        setConsoleText(''); consoleText = ''; // HACK\r\n    }\r\n\r\n    const onEnter = () => {\r\n        submitLine(consoleText.substr(readOnlyPos));\r\n        setConsoleText(consoleText + '\\n> '); consoleText += '\\n> '; // HACK\r\n        setReadOnlyPos(consoleText.length);\r\n    };\r\n\r\n    const handleKeyDown = (event) => {\r\n\r\n        if (event.key.length === 1) {\r\n            // allow printable characters\r\n        }\r\n        else if(event.key === 'Enter') {\r\n            onEnter();\r\n            event.preventDefault();\r\n        }\r\n        else if(event.key === 'Backspace') {\r\n            if(event.target.selectionStart <= readOnlyPos)\r\n                event.preventDefault();\r\n        }\r\n        else if(event.key === 'Delete') {\r\n            if(event.target.selectionStart < readOnlyPos)\r\n                event.preventDefault();\r\n        }\r\n    }\r\n\r\n    const handleSelect = (event) => {\r\n        // console.log('START: ' + event.target.selectionStart + '    READONLY: ' + readOnlyPos );\r\n        if(event.target.selectionStart === readOnlyPos-1){\r\n            event.target.setSelectionRange(readOnlyPos, readOnlyPos);\r\n        }\r\n        else if(event.target.selectionStart < readOnlyPos-1){\r\n            event.target.setSelectionRange(event.target.value.length, event.target.value.length);\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setConsoleText(event.target.value);\r\n    }\r\n\r\n    return(<div className=\"text-grid-console\" style={{height: 200, display: 'flex'}}>\r\n        <textarea wrap=\"off\" spellCheck=\"false\" value={consoleText}\r\n            onChange={handleChange}\r\n            onKeyDown={handleKeyDown}\r\n            onSelect={handleSelect}>\r\n        </textarea>\r\n    </div>);\r\n}\r\n\r\nexport  default TextGrid;","\r\nimport React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store';\r\nimport TextGridImpl, {TextGridStatusBar, TextGridConsole} from './TextGrid';\r\n\r\nexport * from './TextGrid';\r\n\r\nexport default function TextGrid(props) {\r\n    return(<Provider store={store}>\r\n        <div className=\"text-grid-container\" style={{display: 'flex', flexDirection: 'column', height: '100%'}}>\r\n            <TextGridImpl {...props} ></TextGridImpl>\r\n            <TextGridConsole></TextGridConsole>\r\n            <TextGridStatusBar></TextGridStatusBar>\r\n        </div>\r\n    </Provider>);\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.scss';\nimport TextGrid from './Components/TextGrid';\n\nexport default function App() {\n  const text = \n`\nHello world,\nthe quick brown fox \njumps over\nthe lazy \ndog\n`;\n\n  return (\n    <div className=\"App\">\n        <div style={{width: 'calc(100%)', height: 'calc(100% )', overflow: 'hidden'}}>\n          <TextGrid tw={32} th={32} text={text}></TextGrid>\n        </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}