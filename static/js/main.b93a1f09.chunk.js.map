{"version":3,"sources":["Components/TextGrid/store/actions.js","Components/TextGrid/store/reducers.js","Components/TextGrid/store/epics.js","store/store.js","Components/TextGrid/TextGrid.js","Components/Terminal/Terminal.js","Components/Toolbar/Toolbar.js","Components/BefungeIde/BefungeInterpreter.js","Components/BefungeIde/BefungeStackView.js","Components/BefungeIde/BefungeIde.js","serviceWorker.js","index.js","App.js"],"names":["NO_OP","SETUP_GRID","INITIALISE_GRID","MOUSE_MOVED","MOUSE_DOWN","MOUSE_UP","SCROLL_VIEW","DRAG","KEY_DOWN","SET_HOVER_CELL","SET_CELL_VALUE","SET_TARGET_CELL","MOVE_TARGET_CELL","INSERT_ROW","INSERT_COL","DELETE_ROW","DELETE_COL","SET_SELECTION_AREA","CLEAR_SELECTION_AREA","SET_TYPEING_DIRECTION","FILL_SELECTION","PASTE","COPY","CUT","none","type","setupGrid","width","height","text","cellWidth","cellHeight","payload","initialiseGrid","mouseMoved","mousePos","mouseDown","mouseUp","scrollView","xOffset","yOffset","drag","keyDown","setHoverCell","setCellValue","setTargetCell","rowIndex","colIndex","moveTargetCell","x","y","invert","setSelectionArea","clearSelectionArea","insertRow","insertCol","deleteRow","deleteCol","setTypeingDir","paste","copy","cut","fillSelection","initialState","rows","cols","cells","insertMode","viewport","hover","target","dir","selection","isMouseDown","isDragging","startRowIndex","startColIndex","endRowIndex","endColIndex","selectedCells","_fillArrCells","arr","length","push","calculateViewport","v","vLeft","vRight","vTop","vBottom","epics","combineEpics","action","state","pipe","ofType","actions","mergeMap","value","textGrid","Math","floor","replace","split","map","line","mx","mouseX","my","mouseY","hoverState","newActions","key","isShiftDown","cbResult","callback","cbActions","preventDefault","undefined","includes","s","_getSelectedText","navigator","clipboard","writeText","sx","sy","ex","ey","epicMiddleware","createEpicMiddleware","rootReducer","combineReducers","modifier","xDir","yDir","dx","dy","max","_moveTarget","splice","console","log","sri","min","eri","sci","eci","r","c","data","numCols","d","numRows","xi","yi","xMin","yMin","xMax","yMax","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","textGridEpics","TextGrid","forwardRef","props","ref","useImperativeHandle","test","getCells","getState","dispatch","useDispatch","vRows","useSelector","vXOffset","vYOffset","rowsArr","Array","fill","elementRef","useRef","useEffect","current","offsetWidth","offsetHeight","config","onPasteEvent","document","addEventListener","event","clipboardData","getData","removeEventListener","scrollLeft","scrollTop","className","onScroll","draggable","tabIndex","onKeyDown","ctrlKey","toLowerCase","shiftKey","events","onMouseMove","bounds","currentTarget","getBoundingClientRect","clientX","left","clientY","top","onMouseUp","onMouseDown","focus","onMouseLeave","cr","TextGridRow","rowId","TextGridRangeSelection","style","position","vCols","cellArr","maxHeight","minHeight","cell","colId","TextGridCell","isRowHovered","isColHovered","isCellSelected","textDirX","textDirY","isCellHovered","classNames","join","getClassNames","maxWidth","minWidth","abs","display","TextGridStatusBar","Terminal","useState","readOnlyPos","setReadOnlyPos","consoleText","setConsoleText","commands","clear","args","clearConsole","echo","printLine","submitLine","onEnter","lineItems","cmd","wasCleared","print","submitInput","border","disabled","wrap","spellCheck","onChange","substr","selectionStart","onSelect","setSelectionRange","Toolbar","items","item","index","onClick","BefungeInterpreter","program","instructionInfo","this","stack","stack$","BehaviorSubject","onInstructionExecutedCb","onConsoleOutCb","onProgramTerminateCb","onRequestConsoleInputCb","currentInstruction","nextInstruction","i","getInstructionDir","stringMode","waitingForInput","inputStack","ci","pushStack","charCodeAt","parseInt","a","popStack","b","String","fromCharCode","dirX","dirY","newInstruction","val","pushStck","shift","ni","getNextInstruction","next","pop","nx","ny","instruction","instructionDir","cDirX","cDirY","random","BefungeStackVivew","setStack","onStackChangeSubscription","subscribe","unsubscribe","reverse","float","runIntervilleTimer","BefungeIde","befungeInterpreter","setBefungeInterpreter","initProgram","textGridRef","interpreter","onInstructionExecuted","li","textGridStore","onConsoleOut","terminalRef","onProgramTerminate","clearInterval","onRequestConsoleInput","input","prompt","runProgram","setInterval","stepProgram","step","terminalCommands","toolbar","Boolean","location","hostname","match","ReactDOM","render","overflow","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"i6EAAaA,EAAQ,mBAERC,EAAa,mBACbC,EAAkB,wBAElBC,EAAc,wBACdC,EAAa,2BACbC,EAAW,4BAEXC,EAAc,yBAEdC,EAAO,kBAEPC,EAAW,sBAEXC,EAAiB,4BACjBC,EAAiB,2BAEjBC,EAAkB,6BAClBC,EAAmB,8BAEnBC,EAAa,wBACbC,EAAa,wBACbC,EAAa,wBACbC,EAAa,wBAEbC,EAAqB,gCACrBC,EAAuB,6BAEvBC,EAAwB,gCAExBC,EAAiB,4BAEjBC,EAAQ,mBACRC,EAAO,kBACPC,EAAM,iBAeZ,SAASC,IACZ,MAAO,CAAEC,KAAMzB,GAGZ,SAAS0B,EAAUC,EAAOC,EAAQC,EAAMC,EAAWC,GACtD,MAAO,CAAEN,KAAMxB,EAAY+B,QAAS,CAACL,QAAOC,SAAQC,OAAMC,YAAWC,eAGlE,SAASE,EAAeD,GAC3B,MAAO,CAAEP,KAAMvB,EAAiB8B,WAG7B,SAASE,EAAWC,GACvB,MAAO,CAAEV,KAAMtB,EAAa6B,QAASG,GAGlC,SAASC,IACZ,MAAO,CAAEX,KAAMrB,GAGZ,SAASiC,IACZ,MAAO,CAAEZ,KAAMpB,GAGZ,SAASiC,EAAWC,EAASC,GAChC,MAAO,CAAEf,KAAMnB,EAAa0B,QAAS,CAACO,UAASC,YAG5C,SAASC,IACZ,MAAO,CAAEhB,KAAMlB,GAGZ,SAASmC,EAAQV,GACpB,MAAO,CAAEP,KAAMjB,EAAUwB,WAGtB,SAASW,EAAaX,GACzB,MAAO,CAAEP,KAAMhB,EAAgBuB,WAG5B,SAASY,EAAaZ,GACzB,MAAO,CAAEP,KAAMf,EAAgBsB,WAG5B,SAASa,EAAcC,EAAUC,GACpC,MAAO,CAAEtB,KAAMd,EAAiBqB,QAAS,CAAEc,WAAUC,aAGlD,SAASC,EAAeC,EAAGC,EAAGC,GACjC,MAAO,CAAE1B,KAAMb,EAAkBoB,QAAS,CAACiB,IAAGC,IAAGC,WAI9C,SAASC,EAAiBpB,GAE7B,MAAO,CAAEP,KAAMR,EAAoBe,WAGhC,SAASqB,EAAmBrB,GAC/B,MAAO,CAACP,KAAMP,GAGX,SAASoC,EAAUR,GACtB,MAAO,CAAErB,KAAMZ,EAAYmB,QAAS,CAACc,aAGlC,SAASS,EAAUT,EAAUC,GAChC,MAAO,CAAEtB,KAAMX,EAAYkB,QAAS,CAACc,WAAUC,aAG5C,SAASS,EAAUV,GACtB,MAAO,CAAErB,KAAMV,EAAYiB,QAAS,CAACc,aAGlC,SAASW,GAAUX,EAAUC,GAChC,MAAO,CAAEtB,KAAMT,EAAYgB,QAAS,CAACc,WAAUC,aAG5C,SAASW,GAAcT,EAAGC,GAC7B,MAAO,CAAEzB,KAAMN,EAAuBa,QAAS,CAACiB,IAAGC,MAGhD,SAASS,GAAM9B,GAClB,MAAO,CAAEJ,KAAMJ,EAAOW,QAASH,GAG5B,SAAS+B,GAAK/B,GACjB,MAAO,CAAEJ,KAAMH,EAAMU,QAASH,GAG3B,SAASgC,GAAIhC,GAChB,MAAO,CAAEJ,KAAMF,EAAKS,QAASH,GAG1B,SAASiC,GAAcjC,GAC1B,MAAO,CAAEJ,KAAML,EAAgBY,QAASH,GC/I3C,IAAMkC,GAAe,CAClBjC,UAAW,GACXC,WAAY,GACZiC,KAAM,EACNC,KAAM,EACNC,MAAO,GACPC,YAAY,EAEZC,SAAU,CACNJ,KAAM,EACNC,KAAM,EACN1B,QAAS,EACTC,QAAS,GAGb6B,MAAO,CACHvB,UAAW,EACXC,UAAW,GAGfuB,OAAQ,CACJxB,UAAW,EACXC,UAAW,EACXwB,IAAK,CAACtB,EAAG,EAAGC,EAAG,IAGnBsB,UAAW,CACPC,aAAa,EACbC,YAAY,EACZC,cAAe,EACfC,cAAe,EACfC,YAAa,EACbC,YAAa,GAGjBC,cAAe,IAkTnB,SAASC,GAAcC,EAAKhC,EAAGC,GAC3B,KAAM+B,EAAIC,QAAUhC,GAChB+B,EAAIE,KAAK,IAEb,KAAMF,EAAI/B,GAAGgC,QAAUjC,GACnBgC,EAAI/B,GAAGiC,KAAK,IAepB,SAASC,GAAkBhB,EAAUE,GACjC,IAAMe,EAAC,eAAOjB,GAERkB,EAAQD,EAAE9C,QACVgD,EAASF,EAAE9C,QAAU8C,EAAEpB,KAAO,EAC9BuB,EAAOH,EAAE7C,QACTiD,EAAUJ,EAAE7C,QAAU6C,EAAErB,KAAO,EAGrC,OAAIM,EAAOvB,UAAYuC,GAAShB,EAAOvB,UAAYwC,GAC/CjB,EAAOxB,UAAY2C,GAAWnB,EAAOxB,UAAY0C,EAC1CpB,GAEPE,EAAOvB,SAAWuC,IAClBD,EAAE9C,QAAU+B,EAAOvB,UAElBuB,EAAOvB,UAAYwC,IACpBF,EAAE9C,QAAW+B,EAAOvB,SAAWsC,EAAEpB,KAAQ,GAEzCK,EAAOxB,SAAW0C,IAClBH,EAAE7C,QAAU8B,EAAOxB,UAEnBwB,EAAOxB,UAAY2C,IACnBJ,EAAE7C,QAAW8B,EAAOxB,SAAWuC,EAAErB,KAAQ,GAEtCqB,G,+BC5MEK,GAAQC,cA9KH,SAACC,EAAQC,GAAT,OAAmBD,EAAOE,KACxCC,aAAOC,GACPC,cAAS,SAACL,GAEN,IAAMjE,EAAQiE,EAAO5D,QAAQL,MACvBC,EAASgE,EAAO5D,QAAQJ,OACxBC,EAAO+D,EAAO5D,QAAQH,KAEtBC,EAAY8D,EAAO5D,QAAQF,WAAa+D,EAAMK,MAAMC,SAASrE,UAC7DC,EAAa6D,EAAO5D,QAAQD,YAAc8D,EAAMK,MAAMC,SAASpE,WAUrE,MAAO,CAAEiE,EAAuB,CAAClE,YAAWC,aAAYiC,KAR3CoC,KAAKC,MAAMzE,GAAUG,EAAW,IAAM,EAQWkC,KAPjDmC,KAAKC,MAAM1E,GAASG,EAAU,IAAM,EAOmBoC,MAHtDrC,EAAKyE,QAAQ,QAAS,MAAMA,QAAQ,MAAO,MAAMC,MAAM,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKF,MAAM,iBAOrF,SAACX,EAAQC,GAAT,OAAmBD,EAAOE,KAC3CC,aAAOC,GACPC,cAAS,SAACL,GAGN,IAAMc,EAAKd,EAAO5D,QAAQ2E,OACpBC,EAAKhB,EAAO5D,QAAQ6E,OAGpB/E,EAAY+D,EAAMK,MAAMC,SAASrE,UAAY,EAC7CC,EAAa8D,EAAMK,MAAMC,SAASpE,WAAa,EAE/CqC,EAAWyB,EAAMK,MAAMC,SAAS/B,SAGhCtB,EAAWsD,KAAKC,MAAMO,EAAK7E,GAAcqC,EAAS5B,QAClDO,EAAWqD,KAAKC,MAAMK,EAAK5E,GAAasC,EAAS7B,QAEjDuE,EAAa,CAAEhE,WAAUC,YACzBgE,EAAa,GAanB,OAVGjE,IAAa+C,EAAMK,MAAMC,SAAS9B,MAAMvB,UAAYC,IAAa8C,EAAMK,MAAMC,SAAS9B,MAAMtB,UAC3FgE,EAAW5B,KAAKa,EAAqBc,IAKtCjB,EAAMK,MAAMC,SAAS3B,UAAUC,aAC9BsC,EAAW5B,KAAKa,KAGbe,SAKG,SAACnB,EAAQC,GAAT,OAAmBD,EAAOE,KACxCC,aAAOC,GACPC,cAAS,SAACL,GACN,IAAMoB,EAAMpB,EAAO5D,QAAQgF,IACrBlE,EAAW+C,EAAMK,MAAMC,SAAS7B,OAAOxB,SACvCC,EAAW8C,EAAMK,MAAMC,SAAS7B,OAAOvB,SACvCkE,EAAcrB,EAAO5D,QAAQiF,YAE7BC,EAAWtB,EAAO5D,QAAQmF,SAAStB,EAAMK,MAAOc,IAAQ,GACxDI,EAAYF,EAASlB,SAAW,GAEtC,GAAGkB,EAASG,eACR,OAAOD,EAGX,GAAkB,IAAfJ,EAAI9B,OACH,OAAIW,EAAMK,MAAMC,SAAS3B,UAAUG,gBAAkBkB,EAAMK,MAAMC,SAAS3B,UAAUK,aAChFgB,EAAMK,MAAMC,SAAS3B,UAAUI,gBAAkBiB,EAAMK,MAAMC,SAAS3B,UAAUM,YAGrE,CAACkB,GAAsBgB,IAI5B,GAAN,mBACOI,GADP,CAEIpB,EAAqB,CAAElD,WAAUC,WAAUmD,MAAOc,IAClDhB,MAMR,GAAY,QAARgB,EAAgB,CAChB,IAAMzC,EAAM0C,GAAe,EAAI,EAC/B,MAAM,GAAN,mBAAWG,GAAX,CAAsBpB,EAAuBzB,EAAK,KAEtD,GAAY,UAARyC,EAAkB,CAClB,IAAMzC,EAAM0C,GAAe,EAAI,EAC/B,MAAM,GAAN,mBAAYG,GAAZ,CAAuBpB,EAAuB,EAAGzB,KAEhD,GAAY,cAARyC,EACL,MAAM,GAAN,mBACOI,GADP,CAEIpB,IACAA,EAAqB,CAAEE,MAAO,KAC9BF,OAAuBsB,OAAWA,GAAW,KAGhD,GAAY,WAARN,EACL,MAAM,GAAN,mBACOI,GADP,CAEIpB,IACAA,EAAqB,CAAElD,WAAUC,WAAUmD,MAAO,OAGrD,GAAIc,EAAIO,SAAS,SACtB,CAEI,IAAIhD,EAAM,CAACtB,EAAG,EAAGC,EAAG,GACpB,OAAO8D,GACH,IAAK,YAAazC,EAAItB,GAAK,EAAG,MAC9B,IAAK,aAAcsB,EAAItB,EAAI,EAAG,MAC9B,IAAK,UAAWsB,EAAIrB,GAAK,EAAG,MAC5B,IAAK,YAAaqB,EAAIrB,EAAI,EAO9B,GAAG+D,EAAa,CAEZ,IAAMzC,EAAS,eAAQqB,EAAMK,MAAMC,SAAS3B,WAG5C,OAFAA,EAAUM,aAAeP,EAAItB,EAC7BuB,EAAUK,aAAeN,EAAIrB,EACvB,GAAN,mBAAYkE,GAAZ,CAAuBpB,EAAyBxB,GAAYwB,GAAsBzB,EAAItB,EAAGsB,EAAIrB,KAG7F,MAAM,GAAN,mBACOkE,GADP,CAEIpB,EAAuBzB,EAAItB,EAAGsB,EAAIrB,GAClC8C,GAAsBzB,EAAItB,EAAGsB,EAAIrB,KAMjD,MAAO,UAIA,SAAC0C,EAAQC,GAAT,OAAmBD,EAAOE,KACrCC,aAAOC,GACPC,cAAS,SAACL,GAEN,IAAM4B,EAAIC,GAAiB5B,GAI3B,OAHA6B,UAAUC,UAAUC,UAAUJ,GAGvB,UAKD,SAAC5B,EAAQC,GAAT,OAAmBD,EAAOE,KACpCC,aAAOC,GACPC,cAAS,SAACL,GACN,IAAM4B,EAAIC,GAAiB5B,GAE3B,OADA6B,UAAUC,UAAUC,UAAUJ,GACvB,CAACxB,YAchB,SAASyB,GAAiB5B,GAOtB,IANA,IAAM3B,EAAQ2B,EAAMK,MAAMC,SAASjC,MAC7B2D,EAAKhC,EAAMK,MAAMC,SAAS3B,UAAUI,cACpCkD,EAAKjC,EAAMK,MAAMC,SAAS3B,UAAUG,cACpCoD,EAAKlC,EAAMK,MAAMC,SAAS3B,UAAUM,YACpCkD,EAAKnC,EAAMK,MAAMC,SAAS3B,UAAUK,YAAc,EACpD2C,EAAI,GACAtE,EAAE4E,EAAI5E,EAAE8E,EAAI9E,IAChB,GAAGA,GAAK8E,EACJR,GAAK,SADT,CAIA,IAAI,IAAIvE,EAAE4E,EAAI5E,EAAE8E,GAAM9E,EAAEiB,EAAMhB,GAAGgC,OAASjC,IACtCuE,GAAKtD,EAAMhB,GAAGD,GAGfC,EAAG8E,EAAG,IACLR,GAAK,MAEb,OAAOA,E,sBC5MLS,GAAiBC,eAEjBC,GAAcC,aAAgB,CAChCjC,SF+BG,WAAgD,IAA/BN,EAA8B,uDAAtB9B,GAAc6B,EAAQ,uCAElD,OAAOA,EAAOnE,MAIV,KAAKuE,EACD,IAAM5B,EAAQ,eACPyB,EAAMzB,SADC,CAEVJ,KAAM4B,EAAO5D,QAAQgC,KACrBC,KAAM2B,EAAO5D,QAAQiC,OAEzB,OAAO,eAAI4B,EAAX,GAAqBD,EAAO5D,QAA5B,CAAqCoC,aAMzC,KAAK4B,EACD,OAAO,eAAIH,EAAX,CAAkBxB,MAAOuB,EAAO5D,UAMpC,KAAKgE,EAED,IAAMlD,EAAW8C,EAAO5D,QAAQc,SAAW8C,EAAO5D,QAAQc,SAAW+C,EAAMvB,OAAOxB,SAC5EC,EAAW6C,EAAO5D,QAAQe,SAAW6C,EAAO5D,QAAQe,SAAW8C,EAAMvB,OAAOvB,SAC5EmD,EAAQN,EAAO5D,QAAQkE,MAEvBhC,EAAQ2B,EAAM3B,MAIpB,OAFAc,GAAcd,EAAOnB,EAAUD,GAC/BoB,EAAMpB,GAAUC,GAAYmD,EACrB,eAAIL,EAAX,CAAkB3B,UAMtB,KAAK8B,EACD,IAAM1B,EAAM,eAAOuB,EAAMvB,OAAb,GAAwBsB,EAAO5D,SACrCwC,EAAS,eACRqB,EAAMrB,UADE,CAEXG,cAAeL,EAAOxB,SACtB8B,cAAeN,EAAOvB,SACtB8B,YAAaP,EAAOxB,SACpBgC,YAAaR,EAAOvB,WAElBqB,EAAWgB,GAAkBS,EAAMzB,SAAUE,GACnD,OAAO,eAAIuB,EAAX,CAAkBzB,WAAUE,SAAQE,cAMxC,KAAKwB,EACD,IAAMqC,EAAWzC,EAAO5D,QAAQmB,QAAU,EAAI,EACxCmF,EAAO1C,EAAO5D,cAAgCsF,IAArB1B,EAAO5D,QAAQiB,EAAkB2C,EAAO5D,QAAQiB,EAAI4C,EAAMvB,OAAOC,IAAItB,EAC9FsF,EAAO3C,EAAO5D,cAAgCsF,IAArB1B,EAAO5D,QAAQkB,EAAkB0C,EAAO5D,QAAQkB,EAAI2C,EAAMvB,OAAOC,IAAIrB,EAC9FoB,EAAM,eAAOuB,EAAMvB,OAAb,GAuPxB,SAAqBA,EAAQkE,EAAIC,GAE7B,IAAI3F,EAAWwB,EAAOxB,SAAW2F,EAC7B1F,EAAWuB,EAAOvB,SAAWyF,EAMjC,OAHA1F,EAAWsD,KAAKsC,IAAI5F,EAAU,GAC9BC,EAAWqD,KAAKsC,IAAI3F,EAAU,GAEvB,CAAED,WAAUC,YAhQyB4F,CAAY9C,EAAMvB,OAAQgE,EAAOD,EAAUE,EAAOF,IAChF7D,EAAS,eACRqB,EAAMrB,UADE,CAEXG,cAAeL,EAAOxB,SACtB8B,cAAeN,EAAOvB,SACtB8B,YAAaP,EAAOxB,SACpBgC,YAAaR,EAAOvB,WAGlBqB,EAAWgB,GAAkBS,EAAMzB,SAAUE,GAEnD,OAAO,eAAKuB,EAAZ,CAAmBzB,WAAUE,SAAQE,cAOzC,KAAKwB,EAAqB,IACflD,EAAY8C,EAAO5D,QAAnBc,SACDoB,EAAQ2B,EAAM3B,MAEpB,OADAA,EAAM0E,OAAO9F,EAAU,EAAG,IACnB,eAAI+C,EAAX,CAAkB3B,UAMtB,KAAK8B,EAGD,IAHsB,IAAD,EACQJ,EAAO5D,QAA7Bc,EADc,EACdA,SAAUC,EADI,EACJA,SACXmB,EAAQ2B,EAAM3B,MACdA,EAAMgB,QAAUpC,GAAUoB,EAAMiB,KAAK,IAC3C,KAAMjB,EAAMpB,GAAUoC,QAAUnC,GAAUmB,EAAMpB,GAAUqC,KAAK,IAE/D,OADAjB,EAAMpB,GAAU8F,OAAO7F,EAAU,EAAG,IAC7B,eAAI8C,EAAX,CAAkB3B,UAMtB,KAAK8B,EAAqB,IACflD,EAAY8C,EAAO5D,QAAnBc,SACDoB,EAAQ2B,EAAM3B,MAEpB,OADAA,EAAM0E,OAAO9F,EAAU,GAChB,eAAI+C,EAAX,CAAkB3B,UAMtB,KAAK8B,EACD6C,QAAQC,IAAI9C,GADS,MAEQJ,EAAO5D,QAA7Bc,EAFc,EAEdA,SAAUC,EAFI,EAEJA,SACXmB,EAAQ2B,EAAM3B,MACpB,OAAGA,EAAMgB,QAAUpC,EAAiB+C,EACjC3B,EAAMpB,GAAUoC,QAAUnC,EAAiB8C,GAC9C3B,EAAMpB,GAAU8F,OAAO7F,EAAU,GAC1B,eAAI8C,EAAX,CAAkB3B,WAMtB,KAAK8B,EACD,IAAMxB,EAAS,eAAOqB,EAAMrB,UAAb,GAA2BoB,EAAO5D,SAC3CsC,EAAM,eACLuB,EAAMvB,OADD,CAERxB,SAAU0B,EAAUK,YACpB9B,SAAUyB,EAAUM,cAExB,OAAO,eAAIe,EAAX,CAAkBrB,YAAWF,WAGjC,KAAK0B,EAOD,IANA,IAAM9B,EAAQ2B,EAAM3B,MACd6E,EAAM3C,KAAK4C,IAAInD,EAAMrB,UAAUG,cAAekB,EAAMrB,UAAUK,aAC9DoE,EAAM7C,KAAKsC,IAAI7C,EAAMrB,UAAUG,cAAekB,EAAMrB,UAAUK,aAC9DqE,EAAM9C,KAAK4C,IAAInD,EAAMrB,UAAUI,cAAeiB,EAAMrB,UAAUM,aAC9DqE,GAAM/C,KAAKsC,IAAI7C,EAAMrB,UAAUI,cAAeiB,EAAMrB,UAAUM,aAE5DsE,GAAEL,EAAKK,IAAGH,GAAOG,GAAIlF,EAAMgB,OAAQkE,KACvC,IAAI,IAAIC,GAAEH,EAAKG,GAAEF,IAAOE,GAAInF,EAAMkF,IAAGlE,OAAQmE,KACzCnF,EAAMkF,IAAGC,IAAK,GAItB,OAAO,eAAIxD,EAAX,CAAkB3B,UAMtB,KAAK8B,EACD,IAAM1B,GAAM,eACLuB,EAAMvB,OADD,CAERxB,SAAU+C,EAAMxB,MAAMvB,SACtBC,SAAU8C,EAAMxB,MAAMtB,WAEpByB,GAAS,eACRqB,EAAMrB,UADE,CAEXI,cAAeN,GAAOvB,SACtB4B,cAAeL,GAAOxB,SACtBgC,YAAaR,GAAOvB,SACpB8B,YAAaP,GAAOxB,SACpB4B,YAAY,EACZD,aAAa,IACjB,OAAO,eAAIoB,EAAX,CAAmBvB,UAAQE,eAM/B,KAAKwB,EACD,IAAMxB,GAAS,eAAOqB,EAAMrB,UAAb,CAAwBE,YAAY,EAAOD,aAAa,IACvE,OAAO,eAAIoB,EAAX,CAAmBrB,eAMvB,KAAKwB,EAAsB,IAAD,GACKJ,EAAO5D,QAA3BO,GADe,GACfA,QAASC,GADM,GACNA,QACV4B,GAAQ,eAAOyB,EAAMzB,SAAb,CACV7B,QAAS6D,KAAKC,MAAM9D,GAAUsD,EAAM/D,WACpCU,QAAS4D,KAAKC,MAAM7D,GAAUqD,EAAM9D,cAExC,OAAO,eAAK8D,EAAZ,CAAmBzB,cAMvB,KAAK4B,EAED,GAAKH,EAAMrB,UAAUE,WAYhB,CAED,IAAMF,GAAS,eAAOqB,EAAMrB,WAC5BA,GAAUK,YAAcgB,EAAMxB,MAAMvB,SACpC0B,GAAUM,YAAce,EAAMxB,MAAMtB,SACpCyB,GAAUM,aAAgBN,GAAUM,YAAcN,GAAUI,cAAgB,EAAI,EAEhF,IAAMN,GAAM,eACLuB,EAAMvB,OADD,CAERxB,SAAU+C,EAAMxB,MAAMvB,SACtBC,SAAU8C,EAAMxB,MAAMtB,WAE1B,OAAO,eAAI8C,EAAX,CAAkBrB,aAAWF,YAtB7B,IAAMA,GAAM,eACLuB,EAAMvB,OADD,CAERxB,SAAU+C,EAAMxB,MAAMvB,SACtBC,SAAU8C,EAAMxB,MAAMtB,WAEpByB,GAAS,eAAOqB,EAAMrB,UAAb,CAAwBE,YAAY,IAGnD,OAAO,eAAImB,EAAX,CAAkBrB,aAAWF,YAsBrC,KAAK0B,EACD,IAAM1B,GAAM,eAAQuB,EAAMvB,QAE1B,OADAA,GAAOC,IAAP,eAAkBqB,EAAO5D,SAClB,eAAI6D,EAAX,CAAkBvB,YAItB,KAAK0B,EAeD,IAbA,IAAMsD,GAAO1D,EAAO5D,QAAQsE,QAAQ,QAAS,MAAMA,QAAQ,MAAO,MAAMC,MAAM,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKF,MAAM,OAErGrC,GAAQ2B,EAAM3B,MAEd2D,GAAKhC,EAAMrB,UAAUI,cACrBkD,GAAKjC,EAAMrB,UAAUG,cAGrB4E,GAAUnD,KAAKsC,IAAL,MAAAtC,KAAI,YAAQkD,GAAK9C,KAAI,SAAAgD,GAAC,OAAIA,EAAEtE,YACtCuE,GAAUH,GAAKpE,OAIbhC,GAAI,EAAGA,GAAEoG,GAAKpE,OAAQhC,KAC1B,IAAI,IAAID,GAAE,EAAGA,GAAEqG,GAAKpG,IAAGgC,OAAQjC,KAAK,CAChC,IAAMyG,GAAKzG,GAAI4E,GACT8B,GAAKzG,GAAI4E,GACf9C,GAAcd,GAAOwF,GAAIC,IACzBzF,GAAMyF,IAAID,IAAMJ,GAAKpG,IAAGD,IAKhC,IAAMuB,GAAS,eACRqB,EAAMrB,UADE,CAEXG,cAAemD,GACflD,cAAeiD,GACfhD,YAAaiD,GAAK2B,GAAU,EAC5B3E,YAAa+C,GAAK0B,KAGtB,OAAO,eAAI1D,EAAX,CAAkB3B,SAAOM,eAG7B,KAAKwB,EAWD,IAVA,IAAM9B,GAAQ2B,EAAM3B,MACd2D,GAAKhC,EAAMrB,UAAUI,cACrBkD,GAAKjC,EAAMrB,UAAUG,cACrBoD,GAAKlC,EAAMrB,UAAUM,YACrBkD,GAAKnC,EAAMrB,UAAUK,YACrB+E,GAAOxD,KAAK4C,IAAInB,GAAIE,IACpB8B,GAAOzD,KAAK4C,IAAIlB,GAAIE,IACpB8B,GAAO1D,KAAKsC,IAAIb,GAAIE,IACpBgC,GAAO3D,KAAKsC,IAAIZ,GAAIE,IAElB9E,GAAE2G,GAAM3G,IAAG6G,GAAM7G,KACrB,IAAI,IAAID,GAAE2G,GAAM3G,GAAE6G,GAAM7G,KACpB+B,GAAcd,GAAOjB,GAAGC,IACxBgB,GAAMhB,IAAGD,IAAK2C,EAAO5D,QAG7B,OAAO,eAAI6D,EAAX,CAAkB3B,WAMtB,QACI,OAAO2B,MEhUbmE,GAAkBC,OAAOC,sCAAwCC,KAC1DC,GAAQC,aACjBlC,GACA6B,GAAgBM,aAAgBrC,MAGpCA,GAAesC,IAAIC,I,UCbNC,GAAWC,sBAAW,SAACC,EAAOC,GAEvCC,8BAAoBD,GAAK,iBAAO,CAC5BE,KAAM,kBAAMjC,QAAQC,IAAI,gBACxBiC,SAAU,kBAAMX,GAAMY,WAAW7E,SAASjC,UAC1C,IAEJ,IAAM+G,EAAWC,cAEXC,EAAQC,aAAY,SAAAvF,GAAK,OAAIA,EAAMM,SAAS/B,SAASJ,QACrDqH,EAAWD,aAAY,SAAAvF,GAAK,OAAIA,EAAMM,SAAS/B,SAAS7B,WACxD+I,EAAWF,aAAY,SAAAvF,GAAK,OAAIA,EAAMM,SAAS/B,SAAS5B,WACxD+I,EAAUJ,EAAQ,EAAI,IAAIK,MAAML,GAAOM,KAAK,IAAM,GAElDC,EAAaC,iBAAO,MAC1BC,qBAAU,WACN,IAAMjK,EAAQ+J,EAAWG,QAAUH,EAAWG,QAAQC,YAAc,EAC9DlK,EAAS8J,EAAWG,QAAUH,EAAWG,QAAQE,aAAc,EAErEd,EAASjF,EAAkBrE,EAAOC,EAAQ+I,EAAMqB,OAAOnK,KAAM8I,EAAMqB,OAAOlK,UAAW6I,EAAMqB,OAAOjK,aAElG,IAAMkK,EAAeC,SAASC,iBAAiB,SAAS,SAACC,GAErDnB,EAASjF,GAAcoG,EAAMC,cAAcC,QAAQ,aAKvD,OAAO,WACHJ,SAASK,oBAAoBN,MAGlC,CAACtB,EAAOM,IAqFX,OATIS,EAAWG,UAGXH,EAAWG,QAAQW,WAAanB,EAAWV,EAAMqB,OAAOlK,UACxD4J,EAAWG,QAAQY,UAAYnB,EAAWX,EAAMqB,OAAOjK,YAG3D8G,QAAQC,IAAI,oBAGR,yBAAK8B,IAAKc,EAAYgB,UAAU,iBAC5BC,SAnCa,SAACP,GAClBA,EAAM/E,iBACN4D,EAASjF,EAAmBoG,EAAM9H,OAAOkI,WAAYJ,EAAM9H,OAAOmI,aAkC9DG,WAAS,EACTC,SAAS,IACTC,UA9Ee,SAACV,GAEpB,GAAIA,EAAMW,QAAS,CACf,IAAM/F,EAAMoF,EAAMpF,IAAIgG,cAEV,MAARhG,IAGa,MAARA,GACLiE,EAAUjF,MACVoG,EAAM/E,kBAEO,MAARL,IACLiE,EAAUjF,MACVoG,EAAM/E,wBAKV+E,EAAM/E,iBACN4D,EAASjF,EAAgB,CACrBgB,IAAKoF,EAAMpF,IACXC,YAAamF,EAAMa,SACnB9F,SAAUwD,EAAMqB,OAAOkB,OAAOJ,cAwDlCK,YAzFgB,SAACf,GAGrB,IAAIgB,EAAShB,EAAMiB,cAAcC,wBAC7B3G,EAASyF,EAAMmB,QAAUH,EAAOI,KAChC3G,EAASuF,EAAMqB,QAAUL,EAAOM,IAEpCzC,EAASjF,EAAmB,CAACW,SAAQE,aAmFjC8G,UA7Cc,SAACvB,GACnBA,EAAM/E,iBACN4D,EAASjF,MA4CL4H,YApDgB,SAACxB,GACrBA,EAAM/E,iBACN+E,EAAMiB,cAAcQ,QACpB5C,EAASjF,MAkDL8H,aArCiB,SAAC1B,GACtBnB,EAASjF,EAAqB,CAAClD,UAAW,EAAGC,UAAW,OAqCpD,yBAAM2J,UAAU,aAEXnB,EAAQ/E,KAAI,SAACuH,EAAIjL,GAAL,OACT,kBAACkL,GAAD,CAAahH,IAAG,kBAAalE,GAAYmL,MAAOnL,EAAWwI,OAE/D,kBAAC4C,GAAD,OAEJ,yBAAKC,MAAO,CAACxM,MAAO,IAAOC,OAAQ,IAAOwM,SAAU,kBAShE,SAASJ,GAAYrD,GAEjB,IAAMsD,EAAQtD,EAAMsD,MACdlM,EAAaqJ,aAAY,SAAAvF,GAAK,OAAIA,EAAMM,SAASpE,cACjDsM,EAAQjD,aAAY,SAAAvF,GAAK,OAAIA,EAAMM,SAAS/B,SAASH,QACrDoH,EAAWD,aAAY,SAAAvF,GAAK,OAAIA,EAAMM,SAAS/B,SAAS7B,WACxD+L,EAAUD,EAAQ,EAAI,IAAI7C,MAAM6C,GAAO5C,KAAK,IAAM,GAIxD,OAFA5C,QAAQC,IAAI,mBAEL,yBAAK4D,UAAW,gBAAiByB,MAAO,CAACvM,OAAQG,EAAYwM,UAAWxM,EAAYyM,UAAWzM,IACjGuM,EAAQ9H,KAAI,SAACiI,EAAMC,GAChB,IAAM3L,EAAW2L,EAAQrD,EACzB,OAAQ,kBAACsD,GAAD,CAAc3H,IAAK,QAAQiH,EAAM,IAAIlL,EAAUkL,MAAOA,EAAOS,MAAO3L,QAQxF,SAAS4L,GAAahE,GAGlB,IAAMsD,EAAQtD,EAAMsD,MACdS,EAAQ/D,EAAM+D,MAEdD,EAAOrD,aAAY,SAAAvF,GACrB,OAAGoI,EAAQpI,EAAMM,SAASjC,MAAMgB,QAAUwJ,EAAQ7I,EAAMM,SAASjC,MAAM+J,GAAO/I,OACnEW,EAAMM,SAASjC,MAAM+J,GAAOS,GAChC,MAGL5M,EAAYsJ,aAAY,SAAAvF,GAAK,OAAIA,EAAMM,SAASrE,aAEhD8M,EAAexD,aAAa,SAAAvF,GAAK,OAAIA,EAAMM,SAAS9B,MAAMvB,WAAamL,KACvEY,EAAezD,aAAa,SAAAvF,GAAK,OAAIA,EAAMM,SAAS9B,MAAMtB,WAAa2L,KACvEI,EAAiB1D,aAAa,SAAAvF,GAAK,OAAIA,EAAMM,SAAS7B,OAAOxB,WAAamL,GAASpI,EAAMM,SAAS7B,OAAOvB,WAAa2L,KAGtHK,EAAW3D,aAAY,SAAAvF,GAAK,OAAIiJ,EAAiBjJ,EAAMM,SAAS7B,OAAOC,IAAItB,EAAI,KAC/E+L,EAAW5D,aAAY,SAAAvF,GAAK,OAAIiJ,EAAiBjJ,EAAMM,SAAS7B,OAAOC,IAAIrB,EAAI,KAE/E+L,EAAiBL,GAAgBC,EAsBvC,OAAO,0BAAMnC,UAlBS,WAElB,IAAMwC,EAAa,CAAC,kBAWpB,OATID,GAAgBC,EAAW/J,KAAM,cACjCyJ,GAAgBM,EAAW/J,KAAK,aAChC0J,GAAeK,EAAW/J,KAAK,aAC/B2J,GAAiBI,EAAW/J,KAAK,mBACjC2J,GAAkBC,EAAW,GAAIG,EAAW/J,KAAK,wBACjD2J,GAAkBC,EAAW,GAAIG,EAAW/J,KAAK,yBACjD2J,GAAkBE,EAAW,GAAIE,EAAW/J,KAAK,uBACjD2J,GAAkBE,EAAW,GAAIE,EAAW/J,KAAK,0BAE9C+J,EAAWC,KAAK,KAKHC,GAAkBjB,MAAO,CAACxM,MAAOG,EAAWuN,SAAUvN,EAAWwN,SAAUxN,IAC/F,yBAAK4K,UAAU,0BACV+B,IAQb,SAASP,KAEL,IAAM1J,EAAY4G,aAAY,SAAAvF,GAAK,OAAIA,EAAMM,SAAS3B,aAChD1C,EAAYsJ,aAAY,SAAAvF,GAAK,OAAIA,EAAMM,SAASrE,aAChDC,EAAaqJ,aAAY,SAAAvF,GAAK,OAAIA,EAAMM,SAASpE,cACjDqC,EAAWgH,aAAY,SAAAvF,GAAK,OAAIA,EAAMM,SAAS/B,YAGjD8E,EAAM1E,EAAUI,cAAgBR,EAAS7B,QACvC4G,EAAM3E,EAAUM,YAAcV,EAAS7B,QACzCwG,EAAMvE,EAAUG,cAAgBP,EAAS5B,QACvCyG,EAAMzE,EAAUK,YAAcT,EAAS5B,QAI1CyG,EAAMF,IAAOA,GAAO,GACpBI,EAAMD,IAAOA,GAAO,GAIvB,IAAMvH,GAAUwH,EAAMD,IAAQpH,EAAU,GAClCF,GAAUqH,EAAKF,EAAM,IAAMhH,EAAW,IAAOkH,EAAMF,EAAO,IAAMhH,EAAW,GAAK,GAChFyL,EAAQtE,GAAOpH,EAAU,GAAMsE,KAAK4C,IAAIrH,EAAO,GAC/C+L,EAAO3E,GAAOhH,EAAW,GAAMqE,KAAK4C,IAAIpH,EAAQ,GAClDuM,EAAM,CAAExM,MAAOyE,KAAKmJ,IAAI5N,GAAQC,OAAQwE,KAAKmJ,IAAI3N,GAAS4L,OAAME,OAMpE,OAJa,IAAV/L,GAA0B,IAAXC,IACduM,EAAMqB,QAAU,QAGb,yBAAK9C,UAAU,sBAAsByB,MAAOA,IAOhD,SAASsB,KACZ,IAAMrL,EAAWgH,aAAY,SAAAvF,GAAK,OAAIA,EAAMM,SAAS/B,YAC/CE,EAAS8G,aAAY,SAAAvF,GAAK,OAAIA,EAAMM,SAAS7B,UAC7CE,EAAY4G,aAAY,SAAAvF,GAAK,OAAIA,EAAMM,SAAS3B,aAEtD,OAAO,yBAAKkI,UAAU,wBAClB,4BACI,kCAAQtI,EAASJ,MACjB,kCAAQI,EAASH,MACjB,mCAASG,EAAS7B,SAClB,mCAAS6B,EAAS5B,SAClB,mCAAS8B,EAAOvB,UAChB,mCAASuB,EAAOxB,UAEhB,mCAAS0B,EAAUI,eACnB,mCAASJ,EAAUG,eACnB,mCAASH,EAAUM,aACnB,mCAASN,EAAUK,aACnB,yCAAeL,EAAUE,WAAa,OAAS,SAC/C,0CAAgBF,EAAUC,YAAa,OAAS,W,aCnR/CiL,I,MAAWhF,sBAAW,SAACC,EAAOC,GAAS,IAAD,EAEX+E,mBAAS,GAFE,mBAE1CC,EAF0C,KAE7BC,EAF6B,OAGXF,mBAAS,IAHE,mBAG1CG,EAH0C,KAG7BC,EAH6B,KAKzCC,EAAQ,aACVC,MAAO,SAACC,GAAWC,KACnBC,KAAM,SAACF,GAAWG,EAAUH,EAAKf,KAAK,QACnCxE,EAAMqF,UAGPM,EAAa,SAAC7J,GAGhB,IAAIkE,EAAM4F,UAAW5F,EAAM4F,QAAQ9J,GAAnC,CAIA,IAAM+J,EAAY/J,EAAKF,MAAM,KAE7B,GAAwB,IAArBiK,EAAUtL,OAAb,CATyB,mBAYFsL,GAAhBC,EAZkB,KAYVP,EAZU,gBAcJ5I,IAAlB0I,EAASS,IACRT,EAASS,GAAKP,MAMhBG,EAAY,SAACnK,GACf6J,EAAeD,EAAc,MAAQ5J,GAAQ4J,GAAe,KAAO5J,GAInEwK,GAAa,EACXP,EAAe,WACjBJ,EAAe,MAAOD,EAAc,KACpCD,EAAe,GAAID,EAAc,EACjCc,GAAa,GA+DjB,OAlBA9E,qBAAU,WACNmE,EAAe,MACfF,EAAe,KAChB,IAEHhF,8BAAoBD,GAAK,iBAAO,CAC5B+F,MAAO,SAAC9O,GAEJkO,EADgBD,EAAcjO,GAE9BgO,GAAgBC,EAAcjO,GAAMqD,SAExC0L,YAN4B,WAOxBN,EAAW,IACXP,EAAeD,EAAc,QAC7BD,GADsCC,GAAe,QAC1B5K,YAE/B,CAACoL,EAAYR,IAEV,yBAAKpD,UAAU,WAAWyB,MAAO,CAACI,UAAW,IAAK3M,OAAQ,IAAK4N,QAAS,OAAQqB,OAAQlG,EAAMmG,SAAW,iBAAmBtP,IAE/H,8BAAUuP,KAAK,MAAMC,WAAW,QAAQ9K,MAAO4J,EAC3CmB,SAzBa,SAAC7E,GAClB2D,EAAe3D,EAAM9H,OAAO4B,QAyBxB4G,UAtDc,SAACV,GAEM,IAArBA,EAAMpF,IAAI9B,SAGQ,UAAdkH,EAAMpF,KAbdsJ,EAAWR,EAAYoB,OAAOtB,KACX,IAAfc,IACAX,EAAeD,EAAc,QAC7BD,GADsCC,GAAe,QAC1B5K,SAE/BwL,GAAa,EAUTtE,EAAM/E,kBAEY,cAAd+E,EAAMpF,IACPoF,EAAM9H,OAAO6M,gBAAkBvB,GAC9BxD,EAAM/E,iBAEQ,WAAd+E,EAAMpF,KACPoF,EAAM9H,OAAO6M,eAAiBvB,GAC7BxD,EAAM/E,mBAwCV+J,SApCa,SAAChF,GACfA,EAAM9H,OAAO6M,iBAAmBvB,EAAY,EAC3CxD,EAAM9H,OAAO+M,kBAAkBzB,EAAaA,GAExCxD,EAAM9H,OAAO6M,eAAiBvB,EAAY,GAC9CxD,EAAM9H,OAAO+M,kBAAkBjF,EAAM9H,OAAO4B,MAAMhB,OAAQkH,EAAM9H,OAAO4B,MAAMhB,gB,MCpFlF,SAASoM,GAAQ3G,GAGpB,IAAM4G,EAAQ5G,EAAM4G,OAAS,GAG7B,OAAO,yBAAK7E,UAAU,WAClB,4BACK6E,EAAM/K,KAAK,SAACgL,EAAMC,GACf,OAAO,wBAAIzK,IAAK,UAAUyK,EAAO/E,UAAW8E,EAAKtC,WAAYwC,QAASF,EAAKE,SAAUF,EAAK3P,W,+BCVrF8P,G,WAEjB,WAAYC,GAAU,0BAwBtBC,gBAAkB,CACd,MAAO,gCACP,IAAK,uCACL,IAAI,0CACJ,IAAK,6CACL,IAAK,kEACL,IAAK,8EACL,IAAK,+EACL,IAAK,gEACL,IAAK,qBACL,IAAK,oBACL,IAAK,kBACL,EAAK,oBACL,IAAK,8CACL,EAAK,qDACL,IAAK,kDACL,IAAK,oFACL,IAAK,sCACL,KAAM,sCACN,EAAK,0CACL,IAAK,yDACL,IAAK,0CACL,IAAK,yBACL,EAAK,8JACL,EAAK,wIACL,IAAK,oCACL,IAAK,oDACL,IAAK,cACL,WAAc,4CAlDdC,KAAKF,QAAUA,EACfE,KAAKrI,QAAUqI,KAAKF,QAAQ1M,OAC5B4M,KAAKvI,QAAUnD,KAAKsC,IAAKoJ,KAAKF,QAAQpL,KAAI,SAAA4C,GAAC,OAAIA,EAAElE,WAEjD4M,KAAKC,MAAQ,GACbD,KAAKE,OAAS,IAAIC,KAAgB,IAElCH,KAAKI,wBAA0B,KAC/BJ,KAAKK,eAAiB,KACtBL,KAAKM,qBAAuB,KAC5BN,KAAKO,wBAA0B,KAG/BP,KAAKQ,mBAAqB,KAC1BR,KAAKS,gBAAL,aAAyBtP,EAAG,EAAGC,EAAG,EAAGsP,EAAGZ,EAAQ,GAAG,IAAOE,KAAKW,kBAAkB,EAAG,EAAGb,EAAQ,GAAG,KAClGE,KAAKY,YAAa,EAElBZ,KAAKa,iBAAkB,EAEvBb,KAAKc,WAAa,G,oDAoClB,IAAGd,KAAKa,gBAAR,CAGAb,KAAKQ,mBAAqBR,KAAKS,gBAC/B,IAAIM,EAAKf,KAAKQ,mBAGd,GAAU,OAAPO,EAAH,CAGA,GAAGf,KAAKY,WACS,MAATG,EAAGL,EACHV,KAAKY,YAAa,EAGlBZ,KAAKgB,UAAUD,EAAGL,EAAEO,WAAW,SAGlC,GAAIF,EAAGL,EAAEjL,SAAS,CAAC,IAAK,IAAK,IAAK,IAAK,YAGvC,GAAIsL,EAAGL,GAAK,KAAOK,EAAGL,GAAK,IAE5BV,KAAKgB,UAAUE,SAASH,EAAGL,SAE1B,GAAa,MAATK,EAAGL,EAAW,CAEnB,IAAMS,EAAInB,KAAKoB,WACTC,EAAIrB,KAAKoB,WACfpB,KAAKgB,UAAUG,EAAIE,QAElB,GAAa,MAATN,EAAGL,EAAW,CAEnB,IAAMS,EAAInB,KAAKoB,WACTC,EAAIrB,KAAKoB,WACfpB,KAAKgB,UAAUK,EAAIF,QAElB,GAAa,MAATJ,EAAGL,EAAW,CAEnB,IAAMS,EAAInB,KAAKoB,WACTC,EAAIrB,KAAKoB,WACfpB,KAAKgB,UAAUG,EAAIE,QAElB,GAAa,MAATN,EAAGL,EAAW,CAEnB,IAAMS,EAAInB,KAAKoB,WACTC,EAAIrB,KAAKoB,WACfpB,KAAKgB,UAAUK,EAAIF,QAElB,GAAa,MAATJ,EAAGL,EAAW,CAEnB,IAAMS,EAAInB,KAAKoB,WACTC,EAAIrB,KAAKoB,WACfpB,KAAKgB,UAAUK,EAAIF,QAElB,GAAa,MAATJ,EAAGL,EAAW,CAEnB,IAAMS,EAAInB,KAAKoB,WACfpB,KAAKgB,UAAgB,IAANG,EAAU,EAAI,QAE5B,GAAa,MAATJ,EAAGL,EAAW,CAGnB,IAAMS,EAAInB,KAAKoB,WACTC,EAAIrB,KAAKoB,WACfpB,KAAKgB,UAAUK,EAAIF,EAAI,EAAI,QAE1B,GAAa,MAATJ,EAAGL,EAERV,KAAKoB,gBAKJ,GAAa,MAATL,EAAGL,EAERV,KAAKoB,gBAKJ,GAAY,MAATL,EAAGL,EAEPV,KAAKY,YAAcZ,KAAKY,gBAEvB,GAAa,MAATG,EAAGL,EAERV,KAAKgB,UAAWhB,KAAKC,MAAMD,KAAKC,MAAM7M,OAAQ,SAE7C,GAAa,OAAT2N,EAAGL,EAAY,CAEpB,IAAMS,EAAInB,KAAKoB,WACTC,EAAIrB,KAAKoB,WACfpB,KAAKgB,UAAUG,GACfnB,KAAKgB,UAAUK,QAEd,GAAa,MAATN,EAAGL,EAERV,KAAKoB,gBAEJ,GAAa,MAATL,EAAGL,EAAY,CAEpB,IAAMS,EAAInB,KAAKoB,WACfpB,KAAKK,eAAgBc,QAEpB,GAAa,MAATJ,EAAGL,EAAY,CAEpB,IAAMS,EAAInB,KAAKoB,WACfpB,KAAKK,eAAgBiB,OAAOC,aAAaJ,SAExC,GAAa,MAATJ,EAAGL,EAERK,EAAGS,MAAQ,EACXT,EAAGU,MAAQ,OAEV,GAAa,MAATV,EAAGL,EAAY,CAEpB,IAAMtP,EAAI4O,KAAKoB,WACTjQ,EAAI6O,KAAKoB,WACT7N,EAAIyM,KAAKoB,WACTM,EAAiBJ,OAAOC,aAAahO,GAC3CyM,KAAKF,QAAQ1O,GAAGD,GAAKuQ,OAIpB,GAAa,MAATX,EAAGL,EAAW,CAEnB,IAAMtP,EAAI4O,KAAKoB,WACTjQ,EAAI6O,KAAKoB,WACTO,EAAM3B,KAAKF,QAAQ1O,GAAGD,GAC5B6O,KAAK4B,SAASD,QAEb,GAAa,MAATZ,EAAGL,EAAY,CAGpB,GAA8B,IAA3BV,KAAKc,WAAW1N,OAKf,OAJA4M,KAAKa,iBAAkB,OACnBb,KAAKO,yBACLP,KAAKO,2BAKT,IAAMoB,EAAM3B,KAAKc,WAAWe,QAC5B7B,KAAKgB,UAAUE,SAASS,SAG3B,GAAa,MAATZ,EAAGL,EAAY,CAEpB,GAA8B,IAA3BV,KAAKc,WAAW1N,OAKf,OAJA4M,KAAKa,iBAAkB,OACnBb,KAAKO,yBACLP,KAAKO,2BAKT,IAAMoB,EAAM3B,KAAKc,WAAWe,QAC5B7B,KAAKgB,UAAUW,EAAIV,WAAW,QAGpB,MAATF,EAAGL,IAERK,EAAGS,KAAO,EACVT,EAAGU,KAAO,EAEPzB,KAAKM,sBACJN,KAAKM,wBAIb,IAAMwB,EAAK9B,KAAK+B,qBAChB/B,KAAKS,gBAAkBqB,EAGnB9B,KAAKI,yBACLJ,KAAKI,wBAAwBW,EAAIe,O,gCAG/BH,GACN3B,KAAKC,MAAM5M,KAAKsO,GAChB3B,KAAKE,OAAO8B,KAAKhC,KAAKC,S,iCAGtB,IAAM0B,EAAM3B,KAAKC,MAAMgC,MAEvB,OADAjC,KAAKE,OAAO8B,KAAKhC,KAAKC,OACf0B,I,2CAIP,IAAMZ,EAAKf,KAAKQ,mBACZ0B,EAAKnB,EAAG5P,EAAI4P,EAAGS,KACfW,EAAKpB,EAAG3P,EAAI2P,EAAGU,KAGfU,EAAK,IAAIA,EAAKnC,KAAKrI,QAAU,GAC7BuK,EAAK,IAAIA,EAAKlC,KAAKvI,QAAU,GAC7B0K,GAAMnC,KAAKrI,UAAUwK,EAAK,GAC1BD,GAAMlC,KAAKvI,UAAUyK,EAAK,GAE9B,IAAME,EAAeF,EAAKlC,KAAKF,QAAQqC,GAAI/O,OAAU4M,KAAKF,QAAQqC,GAAID,GAAM,GACtEG,EAAiBrC,KAAKW,kBAAkBI,EAAGS,KAAMT,EAAGU,KAAMW,GAEhE,OAAO,aAACjR,EAAG+Q,EAAI9Q,EAAG+Q,EAAIzB,EAAG0B,GAAgBC,K,wCAG3BC,EAAOC,EAAOH,GAC5B,IAAIZ,EAAOc,EACPb,EAAOc,EACX,OAAOH,GACH,IAAK,IAAOZ,EAAO,EAAGC,EAAO,EAAG,MAChC,IAAK,IAAOD,GAAO,EAAGC,EAAO,EAAG,MAChC,IAAK,IAAOD,EAAO,EAAGC,GAAO,EAAG,MAChC,IAAK,IAAOD,EAAO,EAAGC,EAAO,EAAG,MAChC,IAAK,IACD,IAAMhP,EAAM6B,KAAKC,MAAsB,EAAhBD,KAAKkO,UAChB,IAAR/P,IAAc+O,EAAO,EAAGC,EAAO,GACvB,IAARhP,IAAc+O,EAAO,EAAGC,EAAO,GACvB,IAARhP,IAAc+O,GAAO,EAAGC,EAAO,GACvB,IAARhP,IAAc+O,EAAO,EAAGC,GAAO,GACnC,MAEJ,IAAK,IAEDA,EAAO,EACPD,EAAa,IAFHxB,KAAKC,MAAMD,KAAKC,MAAM7M,OAAS,GAExB,GAAK,EACtB,MAEJ,IAAK,IAEDqO,EAAa,IADHzB,KAAKC,MAAMD,KAAKC,MAAM7M,OAAS,GACxB,GAAK,EACtBoO,EAAO,EAMf,MAAO,CAACA,OAAMC,U,4BAGZE,GACF3B,KAAKc,WAAWzN,KAAKsO,GACrB3B,KAAKa,iBAAkB,I,4CAILxL,GAClB2K,KAAKI,wBAA0B/K,I,mCAEtBA,GACT2K,KAAKK,eAAiBhL,I,4CAEJA,GAClB2K,KAAKO,wBAA0BlL,I,yCAGhBA,GACf2K,KAAKM,qBAAuBjL,M,WC5T7B,SAASoN,GAAkB5J,GAAQ,IAAD,EAEXgF,mBAAS,IAFE,mBAE9BoC,EAF8B,KAEvByC,EAFuB,KAqBrC,OAjBA5I,qBAAU,WAEN,IAAI6I,EAA4B,KAQhC,OANG9J,EAAMiH,UACL6C,EAA4B9J,EAAMiH,QAAQI,OAAO0C,WAAU,SAAClN,GACxDgN,EAAS,YAAIhN,QAId,WACAiN,GACCA,EAA0BE,cAC9BH,EAAS,OAEd,CAAC7J,EAAMiH,UAGV,wBAAIlF,UAAU,sBACRqF,EAAM6C,UAAUpO,KAAI,SAACgL,EAAMC,GAAP,OAAiB,wBAAIzK,IAAK,WAAWyK,GACvD,0BAAMtD,MAAO,CAAC0G,MAAM,SAAUrD,GAC9B,0BAAMrD,MAAO,CAAC0G,MAAM,UAAWzB,OAAOC,aAAa7B,SChB/D,IAAIsD,GAAqB,KA4IVC,GA1IIrK,sBAAW,SAACC,EAAOC,GAAS,IAAD,EAEQ+E,mBAAS,MAFjB,mBAErCqF,EAFqC,KAEjBC,EAFiB,KAqBpCC,EAAc,WAChB,IAAMhR,EAAQiR,EAAYtJ,QAAQd,WAC5BqK,EAAc,IAAIzD,GAAmBzN,GAE3CkR,EAAYC,uBAAsB,SAACC,EAAI1B,GACzB,OAAPA,IACC2B,GAActK,SAASjF,EAAQnD,cAAe+Q,EAAG1Q,EAAG0Q,EAAG3Q,IACvDsS,GAActK,SAASjF,EAAQtC,cAAekQ,EAAGN,KAAMM,EAAGL,WAIlE6B,EAAYI,cAAa,SAAA3T,GACrB4T,EAAY5J,QAAQ8E,MAAM9O,MAE9BuT,EAAYM,oBAAmB,WAC3BC,cAAcb,IACdA,GAAqB,KACrBG,EAAsB,MACtBQ,EAAY5J,QAAQ8E,MAAM,2BAC1B8E,EAAY5J,QAAQ+E,iBAExBwE,EAAYQ,uBAAsB,WAC9B,IAAMC,EAAQ5L,OAAO6L,OAAO,gBAAiB,IAC1Cd,GAAsBA,EAAmBrC,iBAAmBkD,GAC3Db,EAAmBa,MAAMA,MAGjCb,EAAqBI,EACrBH,EAAsBG,GAEtBG,GAActK,SAASjF,EAAQnD,cAAe,EAAG,IACjD0S,GAActK,SAASjF,EAAQtC,cAAe,EAAG,KAQ/CqS,EAAa,WACfb,IACAJ,GAAqBkB,aAAY,WAC7BC,MACD,IAGDA,EAAc,WAChBjB,EAAmBkB,QAGjBC,EAAmB,CACrB,iBAAkB,SAACjG,GA3DF,IAACpN,EAAUC,EAAVD,EA2DyBkQ,SAAS9C,EAAK,IA3D7BnN,EA2DkCiQ,SAAS9C,EAAK,IA1D5EqF,GAActK,SAASjF,EAAQnD,cAAcC,EAAUC,KA2DvD,iBAAkB,SAACmN,GAxDF,IAAC5H,EAAMC,EAAND,EAwDyB0K,SAAS9C,EAAK,IAxDjC3H,EAwDsCyK,SAAS9C,EAAK,IAvD5EqF,GAActK,SAASjF,EAAQtC,cAAc4E,EAAMC,KAwDnD,IAAO,SAAC2H,GAAW6F,KACnB,KAAQ,SAAC7F,GAAW+F,KACpB,MAAS,SAAC/F,GAAWrH,QAAQC,IAAKkM,EAAmBjD,SAqBnD/F,EAAS,CACXlK,UAAW,GACXC,WAAY,GACZF,KAhBE,iFAiBFqL,OAAQ,CACJJ,UAjGe,SAAC1C,EAAOpD,GAC3B,MAAY,MAARA,EAAoB,CAAEK,gBAAgB,EAAOrB,QAAS,CAACA,EAAQtC,cAAe,EAAG,KACzE,MAARsD,EAAoB,CAAEK,gBAAgB,EAAOrB,QAAS,CAACA,EAAQtC,cAAe,EAAG,KACzE,MAARsD,EAAoB,CAAEK,gBAAgB,EAAOrB,QAAS,CAACA,EAAQtC,eAAe,EAAG,KACzE,MAARsD,EAAoB,CAAEK,gBAAgB,EAAOrB,QAAS,CAACA,EAAQtC,cAAe,GAAG,KAC9E,KA8FPyS,oBAGEhB,EAAcxJ,mBACd8J,EAAc9J,mBAEdyK,EAAU,GAUhB,OAT2B,OAAvBpB,GACAoB,EAAQjR,KAAK,CAAEtD,KAAM,MAAOqN,WAAY,SAAUwC,QAAS,kBAAMqE,OACjEK,EAAQjR,KAAK,CAAEtD,KAAM,QAASqN,WAAY,SAAUwC,QAAS,WAzD7DwD,SA4DAkB,EAAQjR,KAAK,CAAEtD,KAAM,OAAQqN,WAAY,SAAUwC,QAAS,kBAAMuD,EAAsB,SACxFmB,EAAQjR,KAAK,CAAEtD,KAAM,OAAQqN,WAAY,SAAUwC,QAAS,kBAAMuE,QAItE,yBAAKvJ,UAAU,cAEX,yBAAKA,UAAU,QACX,kBAAC,GAAD,CAAS6E,MAAO6E,IAChB,kBAAC,GAAD,CAAUxL,IAAKuK,EAAanJ,OAAQA,IACpC,kBAAC,GAAD,CAAUpB,IAAK6K,EAAazF,SAAUmG,EAAkB5F,QA/CxC,SAACsF,GAClBb,GAAsBA,EAAmBrC,iBACxCqC,EAAmBa,MAAMA,MA8CzB,kBAACpG,GAAD,OAEJ,yBAAK/C,UAAU,UACX,yBAAKA,UAAU,iBAAf,UACA,yBAAKA,UAAU,iBAAiByB,MAAO,CAACI,UAAW,MAC/C,kBAACgG,GAAD,CAAmB3C,QAASoD,UCrIxBqB,QACW,cAA7BpM,OAAOqM,SAASC,UAEe,UAA7BtM,OAAOqM,SAASC,UAEhBtM,OAAOqM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCCD,WAEX,OACI,kBAAC,IAAD,CAAUtM,MAAOA,IACb,yBAAKsC,UAAU,MAAMyB,MAAO,CAACxM,MAAO,aAAcC,OAAQ,cAAe+U,SAAU,WAC/E,kBAAC,GAAD,UDNA,MAASzK,SAAS0K,eAAe,SD6H3C,kBAAmBlP,WACrBA,UAAUmP,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b93a1f09.chunk.js","sourcesContent":["export const NO_OP = '[TextGrid] NO Op';\r\n\r\nexport const SETUP_GRID = '[TextGrid] Setup';\r\nexport const INITIALISE_GRID = '[TextGrid] Initialise';\r\n\r\nexport const MOUSE_MOVED = '[TextGrid] MouseMoved';\r\nexport const MOUSE_DOWN = '[TextGrid] Mouse Pressed';\r\nexport const MOUSE_UP = '[TextGrid] Mouse Released';\r\n\r\nexport const SCROLL_VIEW = '[TextGrid] Scroll View';\r\n\r\nexport const DRAG = '[TextGrid] Drag';\r\n\r\nexport const KEY_DOWN = '[TextGrid] Key Down';\r\n\r\nexport const SET_HOVER_CELL = '[TextGrid] Set Hover Cell';\r\nexport const SET_CELL_VALUE = '[TextGrid] Set Cell Text';\r\n\r\nexport const SET_TARGET_CELL = '[TextGrid] Set Target Cell';\r\nexport const MOVE_TARGET_CELL = '[TextGrid] Move Target Cell';\r\n\r\nexport const INSERT_ROW = '[TextGrid] Insert Row';\r\nexport const INSERT_COL = '[TextGrid] Insert Col';\r\nexport const DELETE_ROW = '[TextGrid] Delete Row';\r\nexport const DELETE_COL = '[TextGrid] Delete Col';\r\n\r\nexport const SET_SELECTION_AREA = '[TextGrid] Set Selection Area';\r\nexport const CLEAR_SELECTION_AREA = '[TextGrid] Clear Selection';\r\n\r\nexport const SET_TYPEING_DIRECTION = '[TextGrid] Set Text Direction';\r\n\r\nexport const FILL_SELECTION = '[TextGrid] Fill Selection';\r\n\r\nexport const PASTE = '[TextGrid] Paste';\r\nexport const COPY = '[TextGrid] Copy';\r\nexport const CUT = '[TextGrid] Cut';\r\n\r\n// TODO ACTIONS:\r\n// - COPY SELECTION\r\n// - CUT SELECTION\r\n// - PASTE SELECTION\r\n// - FILL SELECTION\r\n\r\n\r\n// TODO BEHAVIOURS:\r\n// - allow for dynamic resize calculations\r\n// - move viewport when target is near borders\r\n// - ability to change direction of tyed text\r\n\r\n\r\nexport function none() {\r\n    return { type: NO_OP }\r\n}\r\n\r\nexport function setupGrid(width, height, text, cellWidth, cellHeight) {\r\n    return { type: SETUP_GRID, payload: {width, height, text, cellWidth, cellHeight} }\r\n}\r\n\r\nexport function initialiseGrid(payload) {\r\n    return { type: INITIALISE_GRID, payload }\r\n}\r\n\r\nexport function mouseMoved(mousePos) {\r\n    return { type: MOUSE_MOVED, payload: mousePos };\r\n}\r\n\r\nexport function mouseDown() {\r\n    return { type: MOUSE_DOWN };\r\n}\r\n\r\nexport function mouseUp() {\r\n    return { type: MOUSE_UP };\r\n}\r\n\r\nexport function scrollView(xOffset, yOffset) {\r\n    return { type: SCROLL_VIEW, payload: {xOffset, yOffset}};\r\n}\r\n\r\nexport function drag() {\r\n    return { type: DRAG };\r\n}\r\n\r\nexport function keyDown(payload) {\r\n    return { type: KEY_DOWN, payload };\r\n}\r\n\r\nexport function setHoverCell(payload) {\r\n    return { type: SET_HOVER_CELL, payload };\r\n}\r\n\r\nexport function setCellValue(payload) {\r\n    return { type: SET_CELL_VALUE, payload};\r\n}\r\n\r\nexport function setTargetCell(rowIndex, colIndex) {\r\n    return { type: SET_TARGET_CELL, payload: { rowIndex, colIndex} };\r\n}\r\n\r\nexport function moveTargetCell(x, y, invert) {\r\n    return { type: MOVE_TARGET_CELL, payload: {x, y, invert} };\r\n}\r\n\r\n\r\nexport function setSelectionArea(payload) {\r\n    // {startRowIndex, startColIndex, endRowIndex, endColIndex } \r\n    return { type: SET_SELECTION_AREA, payload};\r\n}\r\n\r\nexport function clearSelectionArea(payload) {\r\n    return {type: CLEAR_SELECTION_AREA };\r\n}\r\n\r\nexport function insertRow(rowIndex) {\r\n    return { type: INSERT_ROW, payload: {rowIndex}};\r\n}\r\n\r\nexport function insertCol(rowIndex, colIndex) {\r\n    return { type: INSERT_COL, payload: {rowIndex, colIndex}};\r\n}\r\n\r\nexport function deleteRow(rowIndex) {\r\n    return { type: DELETE_ROW, payload: {rowIndex}};\r\n}\r\n\r\nexport function deleteCol(rowIndex, colIndex) {\r\n    return { type: DELETE_COL, payload: {rowIndex, colIndex}};\r\n}\r\n\r\nexport function setTypeingDir(x, y) {\r\n    return { type: SET_TYPEING_DIRECTION, payload: {x, y} };\r\n}\r\n\r\nexport function paste(text) {\r\n    return { type: PASTE, payload: text };\r\n}\r\n\r\nexport function copy(text) {\r\n    return { type: COPY, payload: text };\r\n}\r\n\r\nexport function cut(text) {\r\n    return { type: CUT, payload: text };\r\n}\r\n\r\nexport function fillSelection(text) {\r\n    return { type: FILL_SELECTION, payload: text };\r\n}","import * as actions from './actions';\r\n\r\n const initialState = {\r\n    cellWidth: 24,\r\n    cellHeight: 24, \r\n    rows: 0,    // TODO: set to length of cells\r\n    cols: 0,    // TODO: set to length of longest row in cells.\r\n    cells: [],\r\n    insertMode: false,\r\n\r\n    viewport: {\r\n        rows: 0,\r\n        cols: 0,\r\n        xOffset: 0,\r\n        yOffset: 0\r\n    },\r\n\r\n    hover: {\r\n        rowIndex: -1,\r\n        colIndex: -1,\r\n    },\r\n\r\n    target: {\r\n        rowIndex: -1,\r\n        colIndex: -1,\r\n        dir: {x: 1, y: 0}\r\n    },\r\n\r\n    selection: {\r\n        isMouseDown: false,\r\n        isDragging: false,\r\n        startRowIndex: 0,\r\n        startColIndex: 0,\r\n        endRowIndex: 0,\r\n        endColIndex: 0\r\n    },\r\n\r\n    selectedCells: []\r\n};\r\n\r\n\r\n\r\n\r\nexport function reducer(state = initialState, action) {\r\n\r\n    switch(action.type) {\r\n        /**\r\n         * \r\n         */\r\n        case actions.INITIALISE_GRID: {\r\n            const viewport = {\r\n                ...state.viewport,\r\n                rows: action.payload.rows,\r\n                cols: action.payload.cols\r\n            };\r\n            return {...state, ...action.payload, viewport};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_HOVER_CELL: {\r\n            return {...state, hover: action.payload };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_CELL_VALUE: {\r\n\r\n            const rowIndex = action.payload.rowIndex ? action.payload.rowIndex : state.target.rowIndex;\r\n            const colIndex = action.payload.colIndex ? action.payload.colIndex : state.target.colIndex;\r\n            const value = action.payload.value;\r\n\r\n            const cells = state.cells;\r\n\r\n            _fillArrCells(cells, colIndex, rowIndex);\r\n            cells[rowIndex][colIndex] = value;\r\n            return {...state, cells };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_TARGET_CELL: {\r\n            const target = {...state.target, ...action.payload };\r\n            const selection = {\r\n                ...state.selection,\r\n                startRowIndex: target.rowIndex,\r\n                startColIndex: target.colIndex,\r\n                endRowIndex: target.rowIndex,\r\n                endColIndex: target.colIndex\r\n            };\r\n            const viewport = calculateViewport(state.viewport, target);\r\n            return {...state, viewport, target, selection };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOVE_TARGET_CELL: {\r\n            const modifier = action.payload.invert ? -1 : 1;\r\n            const xDir = action.payload && action.payload.x !== undefined ? action.payload.x : state.target.dir.x;\r\n            const yDir = action.payload && action.payload.y !== undefined ? action.payload.y : state.target.dir.y;\r\n            const target = {...state.target, ..._moveTarget(state.target, xDir * modifier, yDir * modifier) };\r\n            const selection = {\r\n                ...state.selection,\r\n                startRowIndex: target.rowIndex,\r\n                startColIndex: target.colIndex,\r\n                endRowIndex: target.rowIndex,\r\n                endColIndex: target.colIndex\r\n            };\r\n\r\n            const viewport = calculateViewport(state.viewport, target);\r\n\r\n            return { ...state, viewport, target, selection };\r\n        }\r\n\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.INSERT_ROW: {\r\n            const {rowIndex} = action.payload;\r\n            const cells = state.cells;\r\n            cells.splice(rowIndex, 0, []);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.INSERT_COL: {\r\n            const {rowIndex, colIndex} = action.payload;\r\n            const cells = state.cells;\r\n            while(cells.length <= rowIndex) cells.push([]);\r\n            while(cells[rowIndex].length <= colIndex) cells[rowIndex].push('');\r\n            cells[rowIndex].splice(colIndex, 0, '');\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DELETE_ROW: {\r\n            const {rowIndex} = action.payload;\r\n            const cells = state.cells;\r\n            cells.splice(rowIndex, 1);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DELETE_COL: {\r\n            console.log(actions.DELETE_COL);\r\n            const {rowIndex, colIndex} = action.payload;\r\n            const cells = state.cells;\r\n            if(cells.length <= rowIndex) return state;\r\n            if(cells[rowIndex].length <= colIndex) return state;\r\n            cells[rowIndex].splice(colIndex, 1);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_SELECTION_AREA: {\r\n            const selection = {...state.selection, ...action.payload};\r\n            const target = {\r\n                ...state.target,\r\n                rowIndex: selection.endRowIndex,\r\n                colIndex: selection.endColIndex,\r\n            };\r\n            return {...state, selection, target };\r\n        }\r\n\r\n        case actions.CLEAR_SELECTION_AREA: {\r\n            const cells = state.cells;\r\n            const sri = Math.min(state.selection.startRowIndex, state.selection.endRowIndex);\r\n            const eri = Math.max(state.selection.startRowIndex, state.selection.endRowIndex);\r\n            const sci = Math.min(state.selection.startColIndex, state.selection.endColIndex);\r\n            const eci = Math.max(state.selection.startColIndex, state.selection.endColIndex);\r\n\r\n            for(let r=sri; r<=eri && r < cells.length; r++){\r\n                for(let c=sci; c<eci && c < cells[r].length; c++) {\r\n                    cells[r][c] = '';\r\n                }\r\n            }\r\n\r\n            return {...state, cells };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOUSE_DOWN: {\r\n            const target = {\r\n                ...state.target,\r\n                rowIndex: state.hover.rowIndex,\r\n                colIndex: state.hover.colIndex,\r\n            };\r\n            const selection = {\r\n                ...state.selection,\r\n                startColIndex: target.colIndex,\r\n                startRowIndex: target.rowIndex,\r\n                endColIndex: target.colIndex,\r\n                endRowIndex: target.rowIndex,\r\n                isDragging: false, \r\n                isMouseDown: true};\r\n            return {...state,  target, selection}\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOUSE_UP: {\r\n            const selection = {...state.selection, isDragging: false, isMouseDown: false};\r\n            return {...state,  selection}\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SCROLL_VIEW: {\r\n            const {xOffset, yOffset} = action.payload;\r\n            const viewport = {...state.viewport, \r\n                xOffset: Math.floor(xOffset / state.cellWidth),\r\n                yOffset: Math.floor(yOffset / state.cellHeight)    \r\n            };\r\n            return { ...state, viewport };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DRAG: {\r\n\r\n            if( !state.selection.isDragging ) {\r\n                // Begin Dragging\r\n                const target = {\r\n                    ...state.target,\r\n                    rowIndex: state.hover.rowIndex,\r\n                    colIndex: state.hover.colIndex,\r\n                };\r\n                const selection = {...state.selection, isDragging: true};\r\n                \r\n    \r\n                return {...state, selection, target};\r\n            }\r\n            else {\r\n                // Continue dragging\r\n                const selection = {...state.selection};\r\n                selection.endRowIndex = state.hover.rowIndex;\r\n                selection.endColIndex = state.hover.colIndex;\r\n                selection.endColIndex += (selection.endColIndex < selection.startColIndex ? 0 : 1);\r\n                \r\n                const target = {\r\n                    ...state.target,\r\n                    rowIndex: state.hover.rowIndex,\r\n                    colIndex: state.hover.colIndex,\r\n                };\r\n                return {...state, selection, target };\r\n            }\r\n           \r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_TYPEING_DIRECTION: {\r\n            const target = { ...state.target };\r\n            target.dir = { ...action.payload };\r\n            return {...state, target };\r\n            //return state;\r\n        }\r\n\r\n        case actions.PASTE: {\r\n\r\n            const data = action.payload.replace(/\\r\\n/g, \"\\r\").replace(/\\n/g, \"\\r\").split(/\\r/).map(line => line.split(''));\r\n            \r\n            const cells = state.cells;\r\n\r\n            const sx = state.selection.startColIndex;\r\n            const sy = state.selection.startRowIndex;\r\n            \r\n            // number of rows / columns pasted\r\n            const numCols = Math.max(...data.map(d => d.length));\r\n            const numRows = data.length;\r\n\r\n\r\n            // fill the cells with the paste data\r\n            for(let y = 0; y<data.length; y++) {\r\n                for(let x=0; x<data[y].length; x++) {\r\n                    const xi = x + sx;\r\n                    const yi = y + sy;\r\n                    _fillArrCells(cells, xi, yi);\r\n                    cells[yi][xi] = data[y][x];\r\n                }\r\n            }\r\n\r\n            // update the selection area\r\n            const selection = {\r\n                ...state.selection,\r\n                startRowIndex: sy,\r\n                startColIndex: sx,\r\n                endRowIndex: sy + numRows - 1,\r\n                endColIndex: sx + numCols\r\n            };\r\n\r\n            return {...state, cells, selection };\r\n        }\r\n\r\n        case actions.FILL_SELECTION: {\r\n            const cells = state.cells;\r\n            const sx = state.selection.startColIndex;\r\n            const sy = state.selection.startRowIndex;\r\n            const ex = state.selection.endColIndex;\r\n            const ey = state.selection.endRowIndex;\r\n            const xMin = Math.min(sx, ex);\r\n            const yMin = Math.min(sy, ey);\r\n            const xMax = Math.max(sx, ex);\r\n            const yMax = Math.max(sy, ey);\r\n            // fill the cells with the paste data\r\n            for(let y=yMin; y<=yMax; y++) {\r\n                for(let x=xMin; x<xMax; x++) {\r\n                    _fillArrCells(cells, x, y);\r\n                    cells[y][x] = action.payload;\r\n                }\r\n            }\r\n            return {...state, cells };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\n\r\nfunction _fillArrCells(arr, x, y) {\r\n    while(arr.length <= y)\r\n        arr.push([]);\r\n\r\n    while(arr[y].length <= x)\r\n        arr[y].push('');\r\n}\r\n\r\nfunction _moveTarget(target, dx, dy) {\r\n\r\n    let rowIndex = target.rowIndex + dy;\r\n    let colIndex = target.colIndex + dx;\r\n\r\n    // prevent wrapping\r\n    rowIndex = Math.max(rowIndex, 0);\r\n    colIndex = Math.max(colIndex, 0);\r\n\r\n    return { rowIndex, colIndex };\r\n}\r\n\r\nfunction calculateViewport(viewport, target) {\r\n    const v = {...viewport};\r\n\r\n    const vLeft = v.xOffset;\r\n    const vRight = v.xOffset + v.cols - 2;\r\n    const vTop = v.yOffset;\r\n    const vBottom = v.yOffset + v.rows - 1;\r\n\r\n    // if the target is within the viewport, dont change\r\n    if( target.colIndex >= vLeft && target.colIndex <= vRight &&\r\n        target.rowIndex >= vBottom && target.rowIndex <= vTop )\r\n        return viewport;\r\n\r\n    if( target.colIndex < vLeft ) \r\n        v.xOffset = target.colIndex;\r\n\r\n    if(  target.colIndex >= vRight ) \r\n        v.xOffset = (target.colIndex - v.cols) + 3;\r\n\r\n    if( target.rowIndex < vTop ) \r\n        v.yOffset = target.rowIndex;\r\n\r\n    if( target.rowIndex >= vBottom ) \r\n        v.yOffset = (target.rowIndex - v.rows) + 2;\r\n\r\n    return v;\r\n}","import { combineEpics, ofType } from 'redux-observable';\r\nimport * as actions from './actions';\r\n\r\nimport { mergeMap } from 'rxjs/operators';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst setupGrid = (action, state) => action.pipe(\r\n    ofType(actions.SETUP_GRID),\r\n    mergeMap((action) => {\r\n\r\n        const width = action.payload.width;\r\n        const height = action.payload.height;\r\n        const text = action.payload.text;\r\n\r\n        const cellWidth = action.payload.cellWidth || state.value.textGrid.cellWidth;\r\n        const cellHeight = action.payload.cellHeight || state.value.textGrid.cellHeight;\r\n\r\n        const rows = Math.floor(height / (cellHeight-1)) + 1;\r\n        const cols = Math.floor(width / (cellWidth-1)) + 1;\r\n        \r\n        // create a 2D array of characters, [rows][cols]\r\n        // regex strips out the various line endings\r\n        const cells = text.replace(/\\r\\n/g, \"\\r\").replace(/\\n/g, \"\\r\").split(/\\r/).map(line => line.split(''));\r\n        \r\n        // initialise the grid with the above calculated data\r\n        return [ actions.initialiseGrid({cellWidth, cellHeight, rows, cols, cells}) ];\r\n    })\r\n);\r\n\r\nconst onMouseMoved = (action, state) => action.pipe(\r\n    ofType(actions.MOUSE_MOVED),\r\n    mergeMap((action) => {\r\n\r\n        // get mouse coordinates\r\n        const mx = action.payload.mouseX;\r\n        const my = action.payload.mouseY;\r\n\r\n        // subtract 1 from width and height for row/col/cell index calculations\r\n        const cellWidth = state.value.textGrid.cellWidth - 1;\r\n        const cellHeight = state.value.textGrid.cellHeight - 1;\r\n\r\n        const viewport = state.value.textGrid.viewport;\r\n\r\n        // calculate the row/col/cell index the mouse is over\r\n        const rowIndex = Math.floor(my / cellHeight) + viewport.yOffset;\r\n        const colIndex = Math.floor(mx / cellWidth) + viewport.xOffset;\r\n        \r\n        const hoverState = { rowIndex, colIndex };\r\n        const newActions = [];\r\n\r\n        // update the hover state\r\n        if(rowIndex !== state.value.textGrid.hover.rowIndex || colIndex !== state.value.textGrid.hover.colIndex) {\r\n            newActions.push(actions.setHoverCell(hoverState));\r\n        }\r\n\r\n        // If we move the mouse while the mouse is down, than we will\r\n        // either begin the selection, or expand the selection via the drag action\r\n        if(state.value.textGrid.selection.isMouseDown) {\r\n            newActions.push(actions.drag());                   \r\n        }\r\n\r\n        return newActions;\r\n    })\r\n);\r\n\r\n\r\nconst onKeyDown = (action, state) => action.pipe(\r\n    ofType(actions.KEY_DOWN),\r\n    mergeMap((action) => {\r\n        const key = action.payload.key;\r\n        const rowIndex = state.value.textGrid.target.rowIndex;\r\n        const colIndex = state.value.textGrid.target.colIndex;\r\n        const isShiftDown = action.payload.isShiftDown;\r\n        \r\n        const cbResult = action.payload.callback(state.value, key) || {};\r\n        const cbActions = cbResult.actions || [];\r\n        \r\n        if(cbResult.preventDefault) {\r\n            return cbActions;\r\n        }\r\n\r\n        if(key.length === 1) {\r\n            if( state.value.textGrid.selection.startRowIndex !== state.value.textGrid.selection.endRowIndex ||\r\n                state.value.textGrid.selection.startColIndex !== state.value.textGrid.selection.endColIndex  ) {\r\n\r\n                    // fill the slection area\r\n                    return [actions.fillSelection(key)];\r\n            }\r\n            else {\r\n                // insert the character at the cursor positon\r\n                return [\r\n                    ...cbActions,\r\n                    actions.setCellValue({ rowIndex, colIndex, value: key }),\r\n                    actions.moveTargetCell(),\r\n                ];\r\n            }\r\n            \r\n        }\r\n        else {\r\n            if( key === 'Tab' ) {\r\n                const dir = isShiftDown ? -1 : 1;\r\n                return[ ...cbActions, actions.moveTargetCell(dir, 0) ];\r\n            }\r\n            if( key === 'Enter' ) {\r\n                const dir = isShiftDown ? -1 : 1;\r\n                return [ ...cbActions, actions.moveTargetCell(0, dir) ];\r\n            }\r\n            else if( key === 'Backspace') {\r\n                return [\r\n                    ...cbActions,\r\n                    actions.clearSelectionArea(),\r\n                    actions.setCellValue({ value: '' }),\r\n                    actions.moveTargetCell(undefined, undefined, true)\r\n                ];\r\n            }\r\n            else if( key === 'Delete') {\r\n                return [ \r\n                    ...cbActions, \r\n                    actions.clearSelectionArea(),\r\n                    actions.setCellValue({ rowIndex, colIndex, value: '' }) \r\n                ];\r\n            }\r\n            else if( key.includes('Arrow') )\r\n            {\r\n                // calculate xy direction of arrow key press\r\n                let dir = {x: 0, y: 0};\r\n                switch(key) {\r\n                    case 'ArrowLeft': dir.x = -1; break;\r\n                    case 'ArrowRight': dir.x = 1; break;\r\n                    case 'ArrowUp': dir.y = -1; break;\r\n                    case 'ArrowDown': dir.y = 1; break;\r\n                    default: break;\r\n                }\r\n\r\n                // if we press arrow keys while shift is pressed, we are selecting\r\n                // otherwise, we are moving the target cursor position.\r\n\r\n                if(isShiftDown) {\r\n                    // TODO: create action to grow/shrink the selection area\r\n                    const selection = { ...state.value.textGrid.selection };\r\n                    selection.endColIndex += dir.x;\r\n                    selection.endRowIndex += dir.y;\r\n                    return[  ...cbActions, actions.setSelectionArea(selection), actions.setTypeingDir(dir.x, dir.y) ];\r\n                }\r\n                else {\r\n                    return [\r\n                        ...cbActions, \r\n                        actions.moveTargetCell(dir.x, dir.y), \r\n                        actions.setTypeingDir(dir.x, dir.y)\r\n                    ];\r\n                }\r\n            }\r\n        }\r\n\r\n        return [];\r\n    })\r\n);\r\n\r\nconst onCopy = (action, state) => action.pipe(\r\n    ofType(actions.COPY),\r\n    mergeMap((action) => {\r\n        \r\n        const s = _getSelectedText(state);\r\n        navigator.clipboard.writeText(s)\r\n\r\n\r\n        return [];\r\n\r\n    })\r\n);\r\n\r\nconst onCut = (action, state) => action.pipe(\r\n    ofType(actions.CUT),\r\n    mergeMap((action) => {\r\n        const s = _getSelectedText(state);\r\n        navigator.clipboard.writeText(s)\r\n        return [actions.clearSelectionArea()]\r\n    })\r\n);\r\n\r\nexport const epics = combineEpics(\r\n    setupGrid,\r\n    onMouseMoved,\r\n    onKeyDown,\r\n    onCopy,\r\n    onCut\r\n);\r\n\r\n\r\n\r\nfunction _getSelectedText(state) {\r\n    const cells = state.value.textGrid.cells;\r\n    const sx = state.value.textGrid.selection.startColIndex;\r\n    const sy = state.value.textGrid.selection.startRowIndex;\r\n    const ex = state.value.textGrid.selection.endColIndex;\r\n    const ey = state.value.textGrid.selection.endRowIndex + 1;\r\n    let s = '';\r\n    for(let y=sy; y<ey; y++){\r\n        if(y >= ey){\r\n            s += '\\n';\r\n            continue;\r\n        }\r\n        for(let x=sx; x<ex && x<cells[y].length ; x++) {\r\n            s += cells[y][x];\r\n        }\r\n\r\n        if(y <ey-1)\r\n            s += '\\n';\r\n    }\r\n    return s;\r\n}","\r\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux'\r\nimport { createEpicMiddleware } from 'redux-observable';\r\n\r\nimport {\r\n    reducer as textGridReducer, \r\n    epics as textGridEpics\r\n} from '../Components/TextGrid/store';\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\n\r\nconst rootReducer = combineReducers({\r\n    textGrid: textGridReducer\r\n});\r\n\r\n\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(\r\n    rootReducer, \r\n    composeEnhancer(applyMiddleware(epicMiddleware))\r\n);\r\n\r\nepicMiddleware.run(textGridEpics);","import React, { useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { store } from '../../store';\r\nimport * as actions from './store/actions';\r\nimport './TextGrid.scss';\r\n\r\n\r\n/**\r\n * This component renders the text grid and handles\r\n */\r\nexport const TextGrid = forwardRef((props, ref) => {\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        test: () => console.log('hello world'),\r\n        getCells: () => store.getState().textGrid.cells\r\n    }), []);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const vRows = useSelector(state => state.textGrid.viewport.rows);\r\n    const vXOffset = useSelector(state => state.textGrid.viewport.xOffset);\r\n    const vYOffset = useSelector(state => state.textGrid.viewport.yOffset);\r\n    const rowsArr = vRows > 0 ? new Array(vRows).fill('') : [];\r\n\r\n    const elementRef = useRef(null);\r\n    useEffect(() => {\r\n        const width = elementRef.current ? elementRef.current.offsetWidth : 0;\r\n        const height = elementRef.current ? elementRef.current.offsetHeight: 0;\r\n\r\n        dispatch(actions.setupGrid(width, height, props.config.text, props.config.cellWidth, props.config.cellHeight));\r\n\r\n        const onPasteEvent = document.addEventListener('paste', (event) => {\r\n            // TODO: paste text at cursor location\r\n            dispatch(actions.paste(event.clipboardData.getData('text')));\r\n            //console.log(\"PASTE\");\r\n            //console.log(event.clipboardData.getData('text'));\r\n        });\r\n\r\n        return () => {\r\n            document.removeEventListener(onPasteEvent);\r\n        };\r\n\r\n    }, [props, dispatch]);\r\n\r\n    const handleMouseMove = (event) => {\r\n        \r\n        // calculate the mouse position relative to the position of this component.\r\n        let bounds = event.currentTarget.getBoundingClientRect();\r\n        let mouseX = event.clientX - bounds.left;\r\n        let mouseY = event.clientY - bounds.top;\r\n        \r\n        dispatch(actions.mouseMoved({mouseX, mouseY}));\r\n    };\r\n\r\n    const handleKeyPress = (event) => {\r\n        \r\n        if( event.ctrlKey ){\r\n            const key = event.key.toLowerCase();\r\n\r\n            if( key === 'v') {\r\n                // Paste event - do nothing, this will allow the onPaste event to fire\r\n            }\r\n            else if( key === 'c') {\r\n                dispatch( actions.copy());\r\n                event.preventDefault();\r\n            }\r\n            else if( key === 'x' ) {\r\n                dispatch( actions.cut());\r\n                event.preventDefault();\r\n            }\r\n            \r\n        }\r\n        else {\r\n            event.preventDefault();\r\n            dispatch(actions.keyDown({ \r\n                key: event.key, \r\n                isShiftDown: event.shiftKey, \r\n                callback: props.config.events.onKeyDown\r\n            }));\r\n        }\r\n        \r\n    };\r\n\r\n    const handleMouseDown = (event) => {\r\n        event.preventDefault();\r\n        event.currentTarget.focus();\r\n        dispatch(actions.mouseDown());\r\n    };\r\n\r\n    const handleMouseUp = (event) => {\r\n        event.preventDefault();\r\n        dispatch(actions.mouseUp());\r\n    };\r\n\r\n    const handleScroll = (event) => {\r\n        event.preventDefault();\r\n        dispatch(actions.scrollView(event.target.scrollLeft, event.target.scrollTop));\r\n    };\r\n\r\n    const handleMouseLeave = (event) => {\r\n        dispatch(actions.setHoverCell({rowIndex: -1, colIndex: -1}));\r\n    };\r\n\r\n    const handleCopy = (event) => {\r\n        console.log(\"COPY\");\r\n        event.preventDefault();\r\n    };\r\n\r\n    const handleCut = (event) => {\r\n        console.log(\"CUT\");\r\n        event.preventDefault();\r\n    };\r\n\r\n    const handlePaste = (event) => {\r\n        console.log(\"PASTE\");\r\n        event.preventDefault();\r\n    }\r\n\r\n    if( elementRef.current ) {\r\n        // set the scrollposition\r\n        // this.refs.messages.scrollTop = this.refs.messages.scrollHeight\r\n        elementRef.current.scrollLeft = vXOffset * props.config.cellWidth;\r\n        elementRef.current.scrollTop = vYOffset * props.config.cellHeight;\r\n    }\r\n\r\n    console.log('GRID RE-RENDERED');\r\n\r\n    return(\r\n        <div ref={elementRef} className=\"text-grid-area\"\r\n            onScroll={handleScroll}\r\n            draggable\r\n            tabIndex='0'\r\n            onKeyDown={handleKeyPress}\r\n            onMouseMove={handleMouseMove} \r\n            onMouseUp={handleMouseUp}\r\n            onMouseDown={handleMouseDown}\r\n            onMouseLeave={handleMouseLeave}>\r\n            <div  className=\"text-grid\">\r\n\r\n                {rowsArr.map((cr, rowIndex) =>\r\n                    <TextGridRow key={`gridRow-${rowIndex}`} rowId={rowIndex + vYOffset}></TextGridRow> \r\n                )}\r\n                <TextGridRangeSelection></TextGridRangeSelection>\r\n            </div>\r\n            <div style={{width: 10000, height: 10000, position: 'absolute'}}></div>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n/**\r\n * Rhis component renders each row of cells\r\n */\r\nfunction TextGridRow(props) {\r\n    \r\n    const rowId = props.rowId;\r\n    const cellHeight = useSelector(state => state.textGrid.cellHeight);\r\n    const vCols = useSelector(state => state.textGrid.viewport.cols);\r\n    const vXOffset = useSelector(state => state.textGrid.viewport.xOffset);\r\n    const cellArr = vCols > 0 ? new Array(vCols).fill('') : [];\r\n\r\n    console.log('ROW RE-RENDERED');\r\n\r\n    return(<div className={'text-grid-row'} style={{height: cellHeight, maxHeight: cellHeight, minHeight: cellHeight}}>\r\n        {cellArr.map((cell, colId) => {\r\n            const colIndex = colId + vXOffset;\r\n            return (<TextGridCell key={'cell-'+rowId+'-'+colIndex} rowId={rowId} colId={colIndex} ></TextGridCell>);\r\n        })}\r\n    </div>);\r\n}\r\n\r\n/**\r\n * This component renders an individual cell within the table.\r\n */\r\nfunction TextGridCell(props) {\r\n\r\n\r\n    const rowId = props.rowId;\r\n    const colId = props.colId;\r\n\r\n    const cell = useSelector(state => {\r\n        if(rowId < state.textGrid.cells.length && colId < state.textGrid.cells[rowId].length)\r\n            return state.textGrid.cells[rowId][colId];\r\n        return '';\r\n    });\r\n    \r\n    const cellWidth = useSelector(state => state.textGrid.cellWidth);\r\n\r\n    const isRowHovered = useSelector (state => state.textGrid.hover.rowIndex === rowId );\r\n    const isColHovered = useSelector (state => state.textGrid.hover.colIndex === colId );\r\n    const isCellSelected = useSelector (state => state.textGrid.target.rowIndex === rowId && state.textGrid.target.colIndex === colId);\r\n\r\n    // the isCellSelected ternary is used to prevent re-rendering of every cell when the direction changes\r\n    const textDirX = useSelector(state => isCellSelected ? state.textGrid.target.dir.x : 0);\r\n    const textDirY = useSelector(state => isCellSelected ? state.textGrid.target.dir.y : 0);\r\n\r\n    const isCellHovered =  isRowHovered && isColHovered;\r\n    \r\n    \r\n\r\n    const getClassNames = () => {\r\n\r\n        const classNames = ['text-grid-cell'];\r\n\r\n        if( isCellHovered ) classNames.push( 'cell-hover' );\r\n        if( isRowHovered )  classNames.push('row-hover');\r\n        if( isColHovered ) classNames.push('col-hover');\r\n        if( isCellSelected ) classNames.push('active-override');\r\n        if( isCellSelected && textDirX > 0 ) classNames.push('active-override-left');\r\n        if( isCellSelected && textDirX < 0 ) classNames.push('active-override-right');\r\n        if( isCellSelected && textDirY > 0 ) classNames.push('active-override-top');\r\n        if( isCellSelected && textDirY < 0 ) classNames.push('active-override-bottom');\r\n\r\n        return classNames.join(' ');\r\n    }\r\n\r\n    \r\n\r\n    return(<span className={getClassNames()}  style={{width: cellWidth, maxWidth: cellWidth, minWidth: cellWidth}} >\r\n        <div className=\"text-grid-cell-content\">\r\n            {cell}\r\n        </div>\r\n    </span>);\r\n}\r\n\r\n/**\r\n * This component renders the text selection area\r\n */\r\nfunction TextGridRangeSelection() {\r\n\r\n    const selection = useSelector(state => state.textGrid.selection );\r\n    const cellWidth = useSelector(state => state.textGrid.cellWidth);\r\n    const cellHeight = useSelector(state => state.textGrid.cellHeight);\r\n    const viewport = useSelector(state => state.textGrid.viewport);\r\n\r\n    // with the viewport in place, we need to calculate the relative position of the selction box\r\n    let sci = selection.startColIndex - viewport.xOffset;\r\n    const eci = selection.endColIndex - viewport.xOffset;\r\n    let sri = selection.startRowIndex - viewport.yOffset;\r\n    const eri = selection.endRowIndex - viewport.yOffset;\r\n\r\n    // if we are dragging upward, than our selection needs to start from the\r\n    // top of the next row.\r\n    if(eri < sri) { sri += 1; }\r\n    if(eci < sci) { sci += 1; }\r\n\r\n    // calculate the size and position of the selection box\r\n    // position is relative to the top left of the TextGrid component\r\n    const width = ((eci - sci) * (cellWidth-1));\r\n    const height = (eri- sri + 1) * (cellHeight-1) + ((eri - sri) < 0 ? -(cellHeight-1) : 0);\r\n    const left = (sci * (cellWidth-1)) + Math.min(width, 0);\r\n    const top = (sri * (cellHeight-1)) + Math.min(height, 0);\r\n    let style={ width: Math.abs(width), height: Math.abs(height), left, top };\r\n\r\n    if(width === 0 || height === 0)\r\n        style.display = 'none';\r\n\r\n    // render the selection grid.\r\n    return(<div className='text-grid-selection' style={style}></div>);\r\n}\r\n\r\n\r\n/**\r\n * \r\n */\r\nexport function TextGridStatusBar() {\r\n    const viewport = useSelector(state => state.textGrid.viewport );\r\n    const target = useSelector(state => state.textGrid.target);\r\n    const selection = useSelector(state => state.textGrid.selection);\r\n\r\n    return(<div className=\"text-grid-status-bar\">\r\n        <ul>\r\n            <li>R: {viewport.rows}</li>\r\n            <li>C: {viewport.cols}</li>\r\n            <li>SX: {viewport.xOffset}</li>\r\n            <li>SY: {viewport.yOffset}</li>\r\n            <li>TX: {target.colIndex}{}</li>\r\n            <li>TY: {target.rowIndex}{}</li>\r\n\r\n            <li>SX: {selection.startColIndex}</li>\r\n            <li>SY: {selection.startRowIndex}</li>\r\n            <li>EX: {selection.endColIndex}</li>\r\n            <li>EY: {selection.endRowIndex}</li>\r\n            <li>dragging: {selection.isDragging ? 'true' : 'false'}</li>\r\n            <li>mouseDown: {selection.isMouseDown? 'true' : 'false'}</li>\r\n            \r\n        </ul>\r\n    </div>);\r\n}\r\n\r\n\r\n\r\n","import React, {useState, useEffect, forwardRef, useImperativeHandle} from 'react';\r\nimport './Terminal.scss';\r\nimport { none } from '../TextGrid/store/actions';\r\n\r\n/**\r\n * This is the terminal window\r\n * i got a bit lazy with this component and have not used the redux sotre\r\n * TODO: refactor\r\n */\r\nexport const Terminal = forwardRef((props, ref) => {\r\n\r\n    let [readOnlyPos, setReadOnlyPos] = useState(1);\r\n    let [consoleText, setConsoleText] = useState('');\r\n\r\n    const commands = {\r\n        clear: (args) => { clearConsole(); },\r\n        echo: (args) => { printLine(args.join(' ')); },\r\n        ...props.commands\r\n    };\r\n\r\n    const submitLine = (line) => {\r\n        \r\n        // the onEnter method should return true to prevent default behaviour\r\n        if( props.onEnter && props.onEnter(line) ) {\r\n            return;\r\n        }\r\n        \r\n        const lineItems = line.split(' ');\r\n\r\n        if(lineItems.length === 0)\r\n            return;\r\n\r\n        const [cmd, ...args] = lineItems;\r\n\r\n        if(commands[cmd] !== undefined){\r\n            commands[cmd](args);\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    const printLine = (value) => {\r\n        setConsoleText(consoleText + '\\n ' + value); consoleText += '\\n' + value; // HACK\r\n    }\r\n\r\n\r\n    let wasCleared = false;\r\n    const clearConsole = () => {\r\n        setConsoleText('> '); consoleText = '> ';\r\n        setReadOnlyPos(2); readOnlyPos = 2;\r\n        wasCleared = true;\r\n    }\r\n\r\n    const onEnter = () => {\r\n        // submitLine should return true to prevent default behaviour\r\n        submitLine(consoleText.substr(readOnlyPos));\r\n        if( wasCleared === false ) {\r\n            setConsoleText(consoleText + '\\n> '); consoleText += '\\n> '; // HACK\r\n            setReadOnlyPos(consoleText.length);\r\n        }\r\n        wasCleared = false;\r\n    };\r\n\r\n    const handleKeyDown = (event) => {\r\n\r\n        if (event.key.length === 1) {\r\n            // allow printable characters\r\n        }\r\n        else if(event.key === 'Enter') {\r\n            onEnter();\r\n            event.preventDefault();\r\n        }\r\n        else if(event.key === 'Backspace') {\r\n            if(event.target.selectionStart <= readOnlyPos)\r\n                event.preventDefault();\r\n        }\r\n        else if(event.key === 'Delete') {\r\n            if(event.target.selectionStart < readOnlyPos)\r\n                event.preventDefault();\r\n        }\r\n    }\r\n\r\n    const handleSelect = (event) => {\r\n        if(event.target.selectionStart === readOnlyPos-1){\r\n            event.target.setSelectionRange(readOnlyPos, readOnlyPos);\r\n        }\r\n        else if(event.target.selectionStart < readOnlyPos-1){\r\n            event.target.setSelectionRange(event.target.value.length, event.target.value.length);\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setConsoleText(event.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setConsoleText('> ');\r\n        setReadOnlyPos(2);\r\n    }, []);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        print: (text) => {\r\n            const newText = consoleText + text;\r\n            setConsoleText(newText);\r\n            setReadOnlyPos((consoleText + text).length);\r\n        },\r\n        submitInput() {\r\n            submitLine('');\r\n            setConsoleText(consoleText + '\\n> '); consoleText += '\\n> '; // HACK\r\n            setReadOnlyPos(consoleText.length);\r\n        }\r\n    }), [submitLine, consoleText]);\r\n\r\n    return(<div className=\"terminal\" style={{maxHeight: 200, height: 200, display: 'flex', border: props.disabled ? '10px solid red' : none}}>\r\n        \r\n        <textarea wrap=\"off\" spellCheck=\"false\" value={consoleText}\r\n            onChange={handleChange}\r\n            onKeyDown={handleKeyDown}\r\n            onSelect={handleSelect}>\r\n        </textarea>\r\n    </div>);\r\n});","import React from 'react';\r\nimport './Toolbar.scss';\r\n\r\nexport function Toolbar(props) {\r\n\r\n\r\n    const items = props.items || [];\r\n    \r\n\r\n    return(<div className=\"toolbar\">\r\n        <ul>\r\n            {items.map( (item, index) => {\r\n                return(<li key={'tbitem-'+index} className={item.classNames} onClick={item.onClick}>{item.text}</li>);\r\n            })}\r\n        </ul>\r\n    </div>);\r\n}","import { BehaviorSubject } from 'rxjs';\r\n\r\nexport default class BefungeInterpreter {\r\n    \r\n    constructor(program) {\r\n        \r\n        this.program = program;\r\n        this.numRows = this.program.length;\r\n        this.numCols = Math.max( this.program.map(r => r.length) );\r\n        \r\n        this.stack = [];\r\n        this.stack$ = new BehaviorSubject([]);\r\n\r\n        this.onInstructionExecutedCb = null;\r\n        this.onConsoleOutCb = null;\r\n        this.onProgramTerminateCb = null;\r\n        this.onRequestConsoleInputCb = null;\r\n        \r\n\r\n        this.currentInstruction = null;\r\n        this.nextInstruction = { x: 0, y: 0, i: program[0][0], ...this.getInstructionDir(1, 0, program[0][0]) };\r\n        this.stringMode = false;\r\n\r\n        this.waitingForInput = false;\r\n\r\n        this.inputStack = [];\r\n    }\r\n\r\n    instructionInfo = {\r\n        '0-9': 'Push this number on the stack',\r\n        '+': 'Addition: Pop a and b, then push a+b',\r\n        '-':'Subtraction: Pop a and b, then push b-a',\r\n        '*': 'Multiplication: Pop a and b, then push a*b',\r\n        '/': 'Integer division: Pop a and b, then push b/a, rounded towards 0',\r\n        '%': 'Modulo: Pop a and b, then push the remainder of the integer division of b/a',\r\n        '!': 'Logical NOT: Pop a value. If the value is zero, push 1; otherwise, push zero',\r\n        '`': 'Greater than: Pop a and b, then push 1 if b>a, otherwise zero',\r\n        '>': 'Start moving right',\r\n        '<': 'Start moving left',\r\n        '^': 'Start moving up',\r\n        'v': 'Start moving down',\r\n        '?': 'Start moving in a random cardinal direction',\r\n        '_': 'Pop a value; move right if value=0, left otherwise',\r\n        '|': 'Pop a value; move down if value=0, up otherwise',\r\n        '\"': 'Start string mode: push each character\\'s ASCII value all the way up to the next\"',\r\n        ':': 'Duplicate value on top of the stack',\r\n        '\\\\': 'Swap two values on top of the stack',\r\n        '$': 'Pop value from the stack and discard it',\r\n        '.': 'Pop value and output as an integer followed by a space',\r\n        ',': 'Pop value and output as ASCII character',\r\n        '#': 'Bridge: Skip next cell',\r\n        'p': 'A \"put\" call (a way to store a value for later use). Pop y, x, and v, then change the character at (x,y) in the program to the character with ASCII value v',\r\n        'g': 'A \"get\" call (a way to retrieve data in storage). Pop y and x, then push ASCII value of the character at that position in the program',\r\n        '&': 'Ask user for a number and push it',\r\n        '~': 'Ask user for a character and push its ASCII value',\r\n        '@': 'End program',\r\n        \"StringMode\": 'all characters are pushed onto the stack'\r\n    }\r\n\r\n    step() {\r\n\r\n        if(this.waitingForInput)\r\n            return;\r\n        \r\n        this.currentInstruction = this.nextInstruction;\r\n        let ci = this.currentInstruction;\r\n\r\n\r\n        if(ci === null)\r\n            return;\r\n\r\n        if(this.stringMode) {\r\n            if( ci.i === '\"') {\r\n                this.stringMode = false;\r\n            }\r\n            else {\r\n                this.pushStack(ci.i.charCodeAt(0));\r\n            }\r\n        }\r\n        else if( ci.i.includes(['>', '<', 'v', '^', '?']) ) {\r\n            // direction modifiers already calculated\r\n        }\r\n        else if( ci.i >= '0' && ci.i <= '9') {\r\n            // push the number onto the stack\r\n            this.pushStack(parseInt(ci.i));\r\n        }\r\n        else if( ci.i === '+') {\r\n            // Addition: Pop a and b, then push a+b\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(a + b);\r\n        }\r\n        else if( ci.i === '-') {\r\n            // Subtraction: Pop a and b, then push b-a\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(b - a);\r\n        }\r\n        else if( ci.i === '*') {\r\n            // Multiplication: Pop a and b, then push a*b\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(a * b);\r\n        }\r\n        else if( ci.i === '/') {\r\n            // Integer division: Pop a and b, then push b/a, rounded towards 0.\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(b / a);\r\n        }\r\n        else if( ci.i === '%') {\r\n            // Modulo: Pop a and b, then push the remainder of the integer division of b/a.\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(b % a);\r\n        }\r\n        else if( ci.i === '!') {\r\n            // Logical NOT: Pop a value. If the value is zero, push 1; otherwise, push zero.\r\n            const a = this.popStack();\r\n            this.pushStack(a === 0 ? 1 : 0);\r\n        }\r\n        else if( ci.i === '`') {\r\n            // yes, its the grave character!\r\n            // Greater than: Pop a and b, then push 1 if b>a, otherwise zero.\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(b > a ? 1 : 0);\r\n        }\r\n        else if( ci.i === '_') {\r\n            // Pop a value; move right if value=0, left otherwise\r\n            this.popStack(); \r\n            // the direction was already calculated when we fetched this instruction, so we just need to pop off the value\r\n            // ci.dirY = 0;\r\n            // ci.dirX = a === 0 ? 1 : -1;\r\n        }\r\n        else if( ci.i === '|') {\r\n            // Pop a value; move down if value=0, up otherwise\r\n            this.popStack(); \r\n            // the direction was already calculated when we fetched this instruction, so we just need to pop off the value\r\n            // ci.dirY = 0;\r\n            // ci.dirX = a === 0 ? 1 : -1;\r\n        }\r\n        else if(ci.i === '\"') {\r\n            // Start string mode: push each character's ASCII value all the way up to the next \" quote character\r\n            this.stringMode = !this.stringMode;\r\n        }\r\n        else if( ci.i === ':') {\r\n            // Duplicate value on top of the stack\r\n            this.pushStack( this.stack[this.stack.length -1]);\r\n        }\r\n        else if( ci.i === '\\\\') {\r\n            // Swap two values on top of the stack\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(a);\r\n            this.pushStack(b);\r\n        }\r\n        else if( ci.i === '$') {\r\n            // Pop value from the stack and discard it\r\n            this.popStack();\r\n        }\r\n        else if( ci.i === '.' ) {\r\n            // Pop value and output as an integer followed by a space\r\n            const a = this.popStack();\r\n            this.onConsoleOutCb( a );\r\n        }\r\n        else if( ci.i === ',' ) {\r\n            // Pop value and output as ASCII character\r\n            const a = this.popStack();\r\n            this.onConsoleOutCb( String.fromCharCode(a) );\r\n        }\r\n        else if( ci.i === '#' ) {\r\n            // Bridge: Skip next cell\r\n            ci.dirX *= 2;\r\n            ci.dirY *= 2\r\n        }\r\n        else if( ci.i === 'p' ) {\r\n            // A \"put\" call (a way to store a value for later use). Pop y, x, and v, then change the character at (x,y) in the program to the character with ASCII value v\r\n            const y = this.popStack();\r\n            const x = this.popStack();\r\n            const v = this.popStack();\r\n            const newInstruction = String.fromCharCode(v);\r\n            this.program[y][x] = newInstruction;\r\n            // TODO: update the editor text\r\n        }\r\n\r\n        else if( ci.i === 'g') {\r\n            // A \"get\" call (a way to retrieve data in storage). Pop y and x, then push ASCII value of the character at that position in the program\r\n            const y = this.popStack();\r\n            const x = this.popStack();\r\n            const val = this.program[y][x]; // TODO: grow program size\r\n            this.pushStck(val);\r\n        }\r\n        else if( ci.i === '&' ) {\r\n            // Ask user for a number and push it\r\n            // TODO: ask the user for a number\r\n            if(this.inputStack.length === 0) {\r\n                this.waitingForInput = true;\r\n                if( this.onRequestConsoleInputCb ) {\r\n                    this.onRequestConsoleInputCb();\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                const val = this.inputStack.shift();\r\n                this.pushStack(parseInt(val));\r\n            }\r\n        }\r\n        else if( ci.i === '~' ) {\r\n            // Ask user for a character and push its ASCII value\r\n            if(this.inputStack.length === 0) {\r\n                this.waitingForInput = true;\r\n                if( this.onRequestConsoleInputCb ) {\r\n                    this.onRequestConsoleInputCb();\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                const val = this.inputStack.shift();\r\n                this.pushStack(val.charCodeAt(0));\r\n            }\r\n        }\r\n        else if( ci.i === '@') {\r\n            // End of program\r\n            ci.dirX = 0;\r\n            ci.dirY = 0;\r\n\r\n            if(this.onProgramTerminateCb){\r\n                this.onProgramTerminateCb();\r\n            }\r\n        }\r\n\r\n        const ni = this.getNextInstruction();\r\n        this.nextInstruction = ni;\r\n\r\n        \r\n        if( this.onInstructionExecutedCb )\r\n            this.onInstructionExecutedCb(ci, ni);\r\n    }\r\n\r\n    pushStack(val) {\r\n        this.stack.push(val);\r\n        this.stack$.next(this.stack);\r\n    }\r\n    popStack() {\r\n        const val = this.stack.pop();\r\n        this.stack$.next(this.stack);\r\n        return val;\r\n    }\r\n\r\n    getNextInstruction() {\r\n        const ci = this.currentInstruction;\r\n        let nx = ci.x + ci.dirX;\r\n        let ny = ci.y + ci.dirY;\r\n\r\n        // wrap the instructions\r\n        if( ny < 0 ) ny = this.numRows - 1;\r\n        if( nx < 0 ) nx = this.numCols - 1;\r\n        if( ny >= this.numRows ) ny = 0;\r\n        if( nx >= this.numCols ) nx = 0;\r\n        \r\n        const instruction = (nx < this.program[ny].length) ? this.program[ny][nx] : '';\r\n        const instructionDir = this.getInstructionDir(ci.dirX, ci.dirY, instruction);\r\n        \r\n        return {x: nx, y: ny, i: instruction, ...instructionDir };\r\n    }\r\n\r\n    getInstructionDir(cDirX, cDirY, instruction) {\r\n        let dirX = cDirX;\r\n        let dirY = cDirY;\r\n        switch(instruction) {\r\n            case '>': { dirX = 1; dirY = 0; break; }\r\n            case '<': { dirX =-1; dirY = 0; break; }\r\n            case '^': { dirX = 0; dirY =-1; break; }\r\n            case 'v': { dirX = 0; dirY = 1; break; }\r\n            case '?': { \r\n                const dir = Math.floor(Math.random() * 4);\r\n                if( dir === 0 ) { dirX = 1; dirY = 0 } // left\r\n                if( dir === 1 ) { dirX = 0; dirY = 1 } // down\r\n                if( dir === 2 ) { dirX =-1; dirY = 0 } // right\r\n                if( dir === 3 ) { dirX = 0; dirY =-1 } // up\r\n                break;\r\n            }\r\n            case '_': {\r\n                const a = this.stack[this.stack.length - 1];\r\n                dirY = 0;\r\n                dirX = a === 0 ? 1 : -1;\r\n                break;\r\n            }\r\n            case '|': {\r\n                const a = this.stack[this.stack.length - 1];\r\n                dirY = a === 0 ? 1 : -1;\r\n                dirX = 0;\r\n                break;\r\n            }\r\n            default: break;\r\n        }\r\n\r\n        return {dirX, dirY};\r\n    }\r\n\r\n    input(val) {\r\n        this.inputStack.push(val);\r\n        this.waitingForInput = false;\r\n        \r\n    }\r\n\r\n    onInstructionExecuted(callback) {\r\n        this.onInstructionExecutedCb = callback;\r\n    }\r\n    onConsoleOut(callback) {\r\n        this.onConsoleOutCb = callback;\r\n    }\r\n    onRequestConsoleInput(callback) {\r\n        this.onRequestConsoleInputCb = callback;\r\n    }\r\n\r\n    onProgramTerminate(callback) {\r\n        this.onProgramTerminateCb = callback;\r\n    }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nexport function BefungeStackVivew(props) {\r\n\r\n    const [stack, setStack] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let onStackChangeSubscription = null; \r\n        \r\n        if(props.program) {\r\n            onStackChangeSubscription = props.program.stack$.subscribe((s) => {\r\n                setStack([...s]);\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            if(onStackChangeSubscription)\r\n                onStackChangeSubscription.unsubscribe();\r\n            setStack([]);\r\n        };\r\n    }, [props.program]);\r\n\r\n    return (\r\n    <ul className=\"befunge-stack-view\">\r\n        { stack.reverse().map((item, index) => <li key={'bfstack-'+index}>\r\n            <span style={{float:'left'}}>{item}</span>\r\n            <span style={{float:'right'}}>{String.fromCharCode(item)}</span>\r\n        </li> ) }\r\n    </ul>);\r\n}","\r\nimport React, {useRef, forwardRef, useState} from 'react';\r\nimport { TextGrid, TextGridStatusBar, actions} from '../TextGrid';\r\nimport { Terminal } from '../Terminal';\r\nimport { Toolbar } from '../Toolbar';\r\nimport BefungeInterpreter from './BefungeInterpreter';\r\nimport { store as textGridStore } from '../../store';\r\n\r\nimport './BefungeIde.scss';\r\nimport { BefungeStackVivew } from './BefungeStackView';\r\n\r\nlet runIntervilleTimer = null;\r\n\r\nconst BefungeIde = forwardRef((props, ref) => {\r\n\r\n    let [befungeInterpreter, setBefungeInterpreter] = useState(null);\r\n    \r\n\r\n    const handleKeyPress = (store, key) => {\r\n        if( key === 'v') return { preventDefault: false, actions: [actions.setTypeingDir( 0, 1)] };\r\n        if( key === '>') return { preventDefault: false, actions: [actions.setTypeingDir( 1, 0)] };\r\n        if( key === '<') return { preventDefault: false, actions: [actions.setTypeingDir(-1, 0)] };\r\n        if( key === '^') return { preventDefault: false, actions: [actions.setTypeingDir( 0,-1)] };\r\n        return { };\r\n    }\r\n\r\n    const setCursorPos = (rowIndex, colIndex) => {\r\n        textGridStore.dispatch(actions.setTargetCell(rowIndex, colIndex));\r\n    };\r\n\r\n    const setCursorDir = (xDir, yDir) => {\r\n        textGridStore.dispatch(actions.setTypeingDir(xDir, yDir));\r\n    }\r\n\r\n    const initProgram = () => {\r\n        const cells = textGridRef.current.getCells();\r\n        const interpreter = new BefungeInterpreter(cells);\r\n        \r\n        interpreter.onInstructionExecuted((li, ni) => {\r\n            if(ni !== null ) {\r\n                textGridStore.dispatch(actions.setTargetCell( ni.y, ni.x ));\r\n                textGridStore.dispatch(actions.setTypeingDir( ni.dirX, ni.dirY ));\r\n            }\r\n        });\r\n        \r\n        interpreter.onConsoleOut(text => {\r\n            terminalRef.current.print(text);\r\n        });\r\n        interpreter.onProgramTerminate(() => {\r\n            clearInterval(runIntervilleTimer);\r\n            runIntervilleTimer = null;\r\n            setBefungeInterpreter(null);\r\n            terminalRef.current.print('\\nProgram Terminated!\\n');\r\n            terminalRef.current.submitInput();\r\n        });\r\n        interpreter.onRequestConsoleInput(() => {\r\n            const input = window.prompt(\"Enter a value\", \"\");\r\n            if(befungeInterpreter && befungeInterpreter.waitingForInput && input)\r\n                befungeInterpreter.input(input);\r\n        });\r\n\r\n        befungeInterpreter = interpreter; // hack\r\n        setBefungeInterpreter(interpreter);\r\n\r\n        textGridStore.dispatch(actions.setTargetCell( 0, 0 ));\r\n        textGridStore.dispatch(actions.setTypeingDir( 1, 0 ));\r\n    }\r\n\r\n    const debugProgram = () => {\r\n        initProgram();\r\n    };\r\n\r\n    \r\n    const runProgram = () => {\r\n        initProgram();\r\n        runIntervilleTimer = setInterval(() => {\r\n            stepProgram();\r\n        }, 0);\r\n    };\r\n\r\n    const stepProgram = () => {\r\n        befungeInterpreter.step();\r\n    };\r\n\r\n    const terminalCommands = {\r\n        'set-cursor-pos': (args) => { setCursorPos(parseInt(args[0]), parseInt(args[1])); },\r\n        'set-cursor-dir': (args) => { setCursorDir(parseInt(args[0]), parseInt(args[1])); },\r\n        'run': (args) => { runProgram() },\r\n        'next': (args) => { stepProgram(); },\r\n        'stack': (args) => { console.log( befungeInterpreter.stack); }\r\n    };\r\n\r\n    const terminalOnEnter = (input) => {\r\n        if(befungeInterpreter && befungeInterpreter.waitingForInput)\r\n            befungeInterpreter.input(input);\r\n    }\r\n\r\nconst prog = \r\n`>              v\r\nv  ,,,,,\"Hello\"<\r\n>48*,          v\r\nv,,,,,,\"World!\"<\r\n>25*,@`;\r\n\r\n// const prog = \r\n// `64+\"!dlroW ,olleH\">:#,_@`;\r\n\r\n// const prog = \r\n// `~:1+!#@_,`;\r\n\r\n    const config = {\r\n        cellWidth: 32,\r\n        cellHeight: 32,\r\n        text: prog,\r\n        events: {\r\n            onKeyDown: handleKeyPress\r\n        },\r\n        terminalCommands\r\n    }\r\n\r\n    const textGridRef = useRef();\r\n    const terminalRef = useRef();\r\n\r\n    const toolbar = [];\r\n    if( befungeInterpreter === null ) {\r\n        toolbar.push({ text: 'Run', classNames: 'button', onClick: () => runProgram() });\r\n        toolbar.push({ text: 'Debug', classNames: 'button', onClick: () => debugProgram() },);\r\n    }\r\n    else {\r\n        toolbar.push({ text: 'Stop', classNames: 'button', onClick: () => setBefungeInterpreter(null) });\r\n        toolbar.push({ text: 'Step', classNames: 'button', onClick: () => stepProgram() });\r\n    }\r\n\r\n    return(\r\n    <div className=\"befungeIde\">\r\n        \r\n        <div className=\"main\">\r\n            <Toolbar items={toolbar}></Toolbar>\r\n            <TextGrid ref={textGridRef} config={config} ></TextGrid>\r\n            <Terminal ref={terminalRef} commands={terminalCommands} onEnter={terminalOnEnter}></Terminal>\r\n            <TextGridStatusBar></TextGridStatusBar>\r\n        </div>\r\n        <div className=\"asside\">\r\n            <div className=\"asside-header\"> Stack</div>\r\n            <div className=\"asside-section\" style={{maxHeight: 200}}>\r\n                <BefungeStackVivew program={befungeInterpreter}></BefungeStackVivew>            \r\n            </div>\r\n        </div>\r\n    </div>);\r\n});\r\n\r\nexport default BefungeIde;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.scss';\nimport BefungeIde from './Components/BefungeIde/BefungeIde';\nimport { store } from './store';\n\n\nexport default function App() {\n\n    return (\n        <Provider store={store}>\n            <div className=\"App\" style={{width: 'calc(100%)', height: 'calc(100% )', overflow: 'hidden'}}>    \n                <BefungeIde></BefungeIde>\n            </div>\n        </Provider>\n    );\n}\n"],"sourceRoot":""}