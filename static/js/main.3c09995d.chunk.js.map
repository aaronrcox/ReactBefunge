{"version":3,"sources":["Components/TextGrid/store/actions.js","Components/TextGrid/store/reducers.js","Components/TextGrid/store/epics.js","store/store.js","Components/TextGrid/TextGrid.js","Components/Terminal/store/reducer.js","Components/Terminal/store/actions.js","Components/Terminal/Terminal.js","Components/Toolbar/Toolbar.js","Components/BefungeIde/BefungeInterpreter.js","Components/BefungeIde/BefungeStackView.js","Components/BefungeIde/BefungeIde.js","serviceWorker.js","index.js","App.js"],"names":["NO_OP","SET_TEXT","SET_VIEWPORT","SET_CELL_SIZE","MOUSE_MOVED","MOUSE_DOWN","MOUSE_UP","SCROLL_VIEW","DRAG","KEY_DOWN","SET_HOVER_CELL","SET_CELL_VALUE","SET_TARGET_CELL","MOVE_SELECTION","INSERT_ROW","INSERT_COL","DELETE_ROW","DELETE_COL","SET_SELECTION_AREA","CLEAR_SELECTION_AREA","SET_TYPEING_DIRECTION","FILL_SELECTION","PASTE","COPY","CUT","none","type","setViewport","width","height","scrollX","scrollY","payload","setText","text","setCellSize","mouseMoved","mousePos","mouseDown","mouseUp","scrollView","xOffset","yOffset","drag","keyDown","setHoverCell","setCellValue","setTargetCell","rowIndex","colIndex","moveSelection","xAmount","yAmount","invert","setSelectionArea","clearSelectionArea","insertRow","insertCol","deleteRow","deleteCol","setTypeingDir","x","y","paste","copy","cut","fillSelection","initialState","initialised","cellWidth","cellHeight","rows","cols","cells","cursorDir","viewport","hover","selection","showSelection","isMouseDown","isDragging","startRowIndex","startColIndex","endRowIndex","endColIndex","selectedCells","_fillArrCells","arr","length","push","epics","combineEpics","action","state","pipe","ofType","actions","mergeMap","mx","mouseX","value","textGrid","my","mouseY","Math","floor","hoverState","newActions","key","isShiftDown","cbResult","callback","cbActions","numItemsSelected","abs","preventDefault","dir","undefined","includes","s","_getSelectedText","navigator","clipboard","writeText","sx","sy","ex","ey","epicMiddleware","createEpicMiddleware","rootReducer","combineReducers","replace","split","map","line","rid","cid","pop","console","log","_trimArrCells","invertMod","xDir","yDir","splice","sri","min","eri","max","sci","eci","r","c","target","data","numCols","d","numRows","xi","yi","xMin","yMin","xMax","yMax","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","textGridEpics","TextGridCanvas","forwardRef","props","ref","useImperativeHandle","getCells","getState","dispatch","useDispatch","fullWidth","useSelector","fullHeight","canvasRef","useRef","scrollRef","resizeCanvas","useCallback","current","clientWidth","clientHeight","scrollLeft","scrollTop","useEffect","config","useLayoutEffect","canvas","ctx","getContext","requestAnimFrameObj","renderLoopFn","textColor","save","fillStyle","fillRect","translate","startCol","startRow","endCol","endRow","strokeStyle","beginPath","xPos","moveTo","lineTo","yPos","stroke","closePath","textAlign","textBaseline","font","fillText","globalAlpha","left","right","top","bottom","strokeRect","restore","TextGridCanvasRender","handle","requestAnimationFrame","cancelAnimationFrame","dimensions","className","onScroll","event","style","position","overflow","display","tabIndex","onKeyDown","ctrlKey","toLowerCase","shiftKey","events","onMouseMove","bounds","currentTarget","getBoundingClientRect","clientX","clientY","onMouseUp","onMouseDown","focus","onMouseLeave","pointerEvents","TextGridStatusBar","readOnlyPos","consoleText","reducer","warn","Terminal","useReducer","commands","clear","args","echo","join","submitLine","onEnter","lineItems","cmd","print","submitInput","userInput","substr","wrap","spellCheck","onChange","selectionStart","onSelect","setSelectionRange","Toolbar","items","item","index","classNames","onClick","BefungeInterpreter","program","instructionInfo","this","stack","stack$","BehaviorSubject","onInstructionExecutedCb","onConsoleOutCb","onProgramTerminateCb","onRequestConsoleInputCb","currentInstruction","nextInstruction","i","getInstructionDir","stringMode","waitingForInput","inputStack","skipCount","ci","pushStack","charCodeAt","parseInt","a","popStack","b","String","fromCharCode","v","newInstruction","val","shift","dirX","dirY","ni","getNextInstruction","next","nx","ny","instruction","instructionDir","cDirX","cDirY","random","BefungeStackVivew","useState","setStack","onStackChangeSubscription","subscribe","unsubscribe","reverse","float","runIntervilleTimer","BefungeIde","befungeInterpreter","setBefungeInterpreter","initProgram","textGridRef","interpreter","onInstructionExecuted","li","textGridStore","onConsoleOut","terminalRef","onProgramTerminate","stopProgram","onRequestConsoleInput","input","prompt","runProgram","setInterval","stepProgram","clearInterval","step","terminalCommands","toolbar","orientation","minSize","maxSize","flex","propagateDimensions","maxHeight","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c09995d.chunk.js","sourcesContent":["export const NO_OP = '[TextGrid] NO Op';\r\n\r\nexport const SET_TEXT = '[TextGrid] Set Text';\r\nexport const SET_VIEWPORT = '[TextGrid] Set viewport';\r\nexport const SET_CELL_SIZE = '[TextGrid] Set Cell Size';\r\n\r\nexport const MOUSE_MOVED = '[TextGrid] MouseMoved';\r\nexport const MOUSE_DOWN = '[TextGrid] Mouse Pressed';\r\nexport const MOUSE_UP = '[TextGrid] Mouse Released';\r\n\r\nexport const SCROLL_VIEW = '[TextGrid] Scroll View';\r\n\r\nexport const DRAG = '[TextGrid] Drag';\r\n\r\nexport const KEY_DOWN = '[TextGrid] Key Down';\r\n\r\nexport const SET_HOVER_CELL = '[TextGrid] Set Hover Cell';\r\nexport const SET_CELL_VALUE = '[TextGrid] Set Cell Text';\r\n\r\nexport const SET_TARGET_CELL = '[TextGrid] Set Target Cell';\r\nexport const MOVE_SELECTION = '[TextGrid] Move Selection';\r\n\r\nexport const INSERT_ROW = '[TextGrid] Insert Row';\r\nexport const INSERT_COL = '[TextGrid] Insert Col';\r\nexport const DELETE_ROW = '[TextGrid] Delete Row';\r\nexport const DELETE_COL = '[TextGrid] Delete Col';\r\n\r\nexport const SET_SELECTION_AREA = '[TextGrid] Set Selection Area';\r\nexport const CLEAR_SELECTION_AREA = '[TextGrid] Clear Selection';\r\n\r\nexport const SET_TYPEING_DIRECTION = '[TextGrid] Set Text Direction';\r\n\r\nexport const FILL_SELECTION = '[TextGrid] Fill Selection';\r\n\r\nexport const PASTE = '[TextGrid] Paste';\r\nexport const COPY = '[TextGrid] Copy';\r\nexport const CUT = '[TextGrid] Cut';\r\n\r\n// TODO ACTIONS:\r\n// - COPY SELECTION\r\n// - CUT SELECTION\r\n// - PASTE SELECTION\r\n// - FILL SELECTION\r\n\r\n\r\n// TODO BEHAVIOURS:\r\n// - allow for dynamic resize calculations\r\n// - move viewport when target is near borders\r\n// - ability to change direction of tyed text\r\n\r\n\r\nexport function none() {\r\n    return { type: NO_OP }\r\n}\r\n\r\n\r\nexport function setViewport(width, height, scrollX, scrollY) {\r\n    return { type: SET_VIEWPORT, payload: {width, height, scrollX, scrollY} };\r\n}\r\n\r\nexport function setText(text) {\r\n    return {type: SET_TEXT, payload: {text} };\r\n}\r\n\r\nexport function setCellSize(width, height) {\r\n    return {type: SET_CELL_SIZE, payload: {width, height} };\r\n}\r\n\r\nexport function mouseMoved(mousePos) {\r\n    return { type: MOUSE_MOVED, payload: mousePos };\r\n}\r\n\r\nexport function mouseDown() {\r\n    return { type: MOUSE_DOWN };\r\n}\r\n\r\nexport function mouseUp() {\r\n    return { type: MOUSE_UP };\r\n}\r\n\r\nexport function scrollView(xOffset, yOffset) {\r\n    return { type: SCROLL_VIEW, payload: {xOffset, yOffset}};\r\n}\r\n\r\nexport function drag() {\r\n    return { type: DRAG };\r\n}\r\n\r\nexport function keyDown(payload) {\r\n    return { type: KEY_DOWN, payload };\r\n}\r\n\r\nexport function setHoverCell(payload) {\r\n    return { type: SET_HOVER_CELL, payload };\r\n}\r\n\r\nexport function setCellValue(payload) {\r\n    return { type: SET_CELL_VALUE, payload};\r\n}\r\n\r\nexport function setTargetCell(rowIndex, colIndex) {\r\n    return { type: SET_TARGET_CELL, payload: { rowIndex, colIndex} };\r\n}\r\n\r\nexport function moveSelection(xAmount, yAmount, invert) {\r\n    return { type: MOVE_SELECTION, payload: {xAmount, yAmount, invert} };\r\n}\r\n\r\n\r\nexport function setSelectionArea(payload) {\r\n    // {startRowIndex, startColIndex, endRowIndex, endColIndex } \r\n    return { type: SET_SELECTION_AREA, payload};\r\n}\r\n\r\nexport function clearSelectionArea(payload) {\r\n    return {type: CLEAR_SELECTION_AREA };\r\n}\r\n\r\nexport function insertRow(rowIndex) {\r\n    return { type: INSERT_ROW, payload: {rowIndex}};\r\n}\r\n\r\nexport function insertCol(rowIndex, colIndex) {\r\n    return { type: INSERT_COL, payload: {rowIndex, colIndex}};\r\n}\r\n\r\nexport function deleteRow(rowIndex) {\r\n    return { type: DELETE_ROW, payload: {rowIndex}};\r\n}\r\n\r\nexport function deleteCol(rowIndex, colIndex) {\r\n    return { type: DELETE_COL, payload: {rowIndex, colIndex}};\r\n}\r\n\r\nexport function setTypeingDir(x, y) {\r\n    return { type: SET_TYPEING_DIRECTION, payload: {x, y} };\r\n}\r\n\r\nexport function paste(text) {\r\n    return { type: PASTE, payload: text };\r\n}\r\n\r\nexport function copy(text) {\r\n    return { type: COPY, payload: text };\r\n}\r\n\r\nexport function cut(text) {\r\n    return { type: CUT, payload: text };\r\n}\r\n\r\nexport function fillSelection(text) {\r\n    return { type: FILL_SELECTION, payload: text };\r\n}","import * as actions from './actions';\r\n\r\n const initialState = {\r\n    initialised: false,\r\n    cellWidth: 24,\r\n    cellHeight: 24, \r\n    rows: 25,    // Befunge 93 specifies strict row / col sizes\r\n    cols: 80,    // Befunge 93 specifies strict row / col sizes\r\n    cells: [],\r\n    cursorDir: {x: 1, y: 0},\r\n\r\n    viewport: {\r\n        rows: 0,\r\n        cols: 0,\r\n        width: 0,\r\n        height: 0,\r\n        scrollX: 0,\r\n        scrollY: 0,\r\n        xOffset: 0,\r\n        yOffset: 0\r\n    },\r\n\r\n    hover: {\r\n        rowIndex: -1,\r\n        colIndex: -1,\r\n    },\r\n\r\n    selection: {\r\n        showSelection: false,\r\n        isMouseDown: false,\r\n        isDragging: false,\r\n        startRowIndex: 0,\r\n        startColIndex: 0,\r\n        endRowIndex: 0,\r\n        endColIndex: 0\r\n    },\r\n\r\n    selectedCells: []\r\n};\r\n\r\n\r\n\r\n\r\nexport function reducer(state = initialState, action) {\r\n\r\n\r\n    switch(action.type) {\r\n        \r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_VIEWPORT: {\r\n            const rows = Math.floor(action.payload.width / state.cellWidth);\r\n            const cols = Math.floor(action.payload.height / state.cellHeight);\r\n            const viewport = {...state.viewport, ...action.payload, rows, cols };\r\n            return {...state, viewport};\r\n        }\r\n\r\n        case actions.SET_TEXT: {\r\n            const text = action.payload.text;\r\n            const cells = text.replace(/\\r\\n/g, \"\\r\").replace(/\\n/g, \"\\r\").split(/\\r/).map(line => line.split(''));\r\n        \r\n            return {...state, cells };\r\n        }\r\n\r\n        case actions.SET_CELL_SIZE: {\r\n            const cellWidth = action.payload.width;\r\n            const cellHeight = action.payload.height;\r\n            return {...state, cellWidth, cellHeight };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_HOVER_CELL: {\r\n            return {...state, hover: action.payload };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_CELL_VALUE: {\r\n\r\n            const rowIndex = action.payload.rowIndex ? action.payload.rowIndex : state.selection.startRowIndex;\r\n            const colIndex = action.payload.colIndex ? action.payload.colIndex : state.selection.startColIndex;\r\n            const value = action.payload.value;\r\n\r\n            const cells = state.cells;\r\n\r\n            _fillArrCells(cells, colIndex, rowIndex);\r\n            cells[rowIndex][colIndex] = value;\r\n\r\n            _trimArrCells(cells);\r\n\r\n            \r\n            return {...state, cells };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_TARGET_CELL: {\r\n\r\n            // set the target\r\n            const rowIndex = action.payload.rowIndex;\r\n            const colIndex = action.payload.colIndex;\r\n\r\n            // reset the selection area\r\n            const selection = {\r\n                ...state.selection,\r\n                showSelection: false,\r\n                startRowIndex: rowIndex,\r\n                startColIndex: colIndex,\r\n                endRowIndex: rowIndex,\r\n                endColIndex: colIndex\r\n            };\r\n\r\n            return {...state, selection };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOVE_SELECTION: {\r\n            const invertMod = action.payload && action.payload.invert ? -1 : 1;\r\n            const xDir = (action.payload && action.payload.xAmount !== undefined ? action.payload.xAmount : state.cursorDir.x) * invertMod;\r\n            const yDir = (action.payload && action.payload.yAmount !== undefined ? action.payload.yAmount : state.cursorDir.y) * invertMod;\r\n            \r\n            const selection = { ...state.selection };\r\n            selection.startColIndex += xDir;\r\n            selection.endColIndex += xDir;\r\n            selection.startRowIndex += yDir;\r\n            selection.endRowIndex += yDir;\r\n\r\n            return { ...state, selection };\r\n        }\r\n\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.INSERT_ROW: {\r\n            const {rowIndex} = action.payload;\r\n            const cells = state.cells;\r\n            cells.splice(rowIndex, 0, []);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.INSERT_COL: {\r\n            const {rowIndex, colIndex} = action.payload;\r\n            const cells = state.cells;\r\n            while(cells.length <= rowIndex) cells.push([]);\r\n            while(cells[rowIndex].length <= colIndex) cells[rowIndex].push('');\r\n            cells[rowIndex].splice(colIndex, 0, '');\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DELETE_ROW: {\r\n            const {rowIndex} = action.payload;\r\n            const cells = state.cells;\r\n            cells.splice(rowIndex, 1);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DELETE_COL: {\r\n            console.log(actions.DELETE_COL);\r\n            const {rowIndex, colIndex} = action.payload;\r\n            const cells = state.cells;\r\n            if(cells.length <= rowIndex) return state;\r\n            if(cells[rowIndex].length <= colIndex) return state;\r\n            cells[rowIndex].splice(colIndex, 1);\r\n            return {...state, cells};\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_SELECTION_AREA: {\r\n            const selection = {...state.selection, ...action.payload};\r\n            return {...state, selection };\r\n        }\r\n\r\n        case actions.CLEAR_SELECTION_AREA: {\r\n            const cells = state.cells;\r\n            const sri = Math.min(state.selection.startRowIndex, state.selection.endRowIndex);\r\n            const eri = Math.max(state.selection.startRowIndex, state.selection.endRowIndex);\r\n            const sci = Math.min(state.selection.startColIndex, state.selection.endColIndex);\r\n            const eci = Math.max(state.selection.startColIndex, state.selection.endColIndex);\r\n\r\n            for(let r=sri; r<=eri && r < cells.length; r++) {\r\n                for(let c=sci; c<=eci && c < cells[r].length; c++) {\r\n                    cells[r][c] = '';\r\n                }\r\n            }\r\n\r\n            return {...state, cells };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOUSE_DOWN: {\r\n            const target = {\r\n                ...state.target,\r\n                rowIndex: state.hover.rowIndex,\r\n                colIndex: state.hover.colIndex,\r\n            };\r\n            const selection = {\r\n                ...state.selection,\r\n                showSelection: true,\r\n                startColIndex: target.colIndex,\r\n                startRowIndex: target.rowIndex,\r\n                endColIndex: target.colIndex,\r\n                endRowIndex: target.rowIndex,\r\n                isDragging: false, \r\n                isMouseDown: true};\r\n            return {...state,  target, selection}\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.MOUSE_UP: {\r\n            const selection = {...state.selection, isDragging: false, isMouseDown: false};\r\n            return {...state,  selection}\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SCROLL_VIEW: {\r\n            const {xOffset, yOffset} = action.payload;\r\n            const viewport = {...state.viewport, \r\n                xOffset: Math.floor(xOffset / state.cellWidth),\r\n                yOffset: Math.floor(yOffset / state.cellHeight)    \r\n            };\r\n            return { ...state, viewport };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.DRAG: {\r\n\r\n            //if( !state.selection.isDragging ) { // Begin Dragging\r\n            //    const selection = {...state.selection, isDragging: true, showSelection: true};\r\n            //    return {...state, selection};\r\n            //}\r\n            //else { // Continue dragging\r\n                const selection = {...state.selection};\r\n                selection.endRowIndex = state.hover.rowIndex;\r\n                selection.endColIndex = state.hover.colIndex;\r\n                return {...state, selection };\r\n            //}  \r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        case actions.SET_TYPEING_DIRECTION: {\r\n            const cursorDir = {  ...action.payload };\r\n            return {...state, cursorDir };\r\n        }\r\n\r\n        case actions.PASTE: {\r\n\r\n            const data = action.payload.replace(/\\r\\n/g, \"\\r\").replace(/\\n/g, \"\\r\").split(/\\r/).map(line => line.split(''));\r\n            \r\n            const cells = state.cells;\r\n\r\n            const sx = state.selection.startColIndex;\r\n            const sy = state.selection.startRowIndex;\r\n            \r\n            // number of rows / columns pasted\r\n            const numCols = Math.max(...data.map(d => d.length));\r\n            const numRows = data.length;\r\n\r\n\r\n            // fill the cells with the paste data\r\n            for(let y = 0; y<data.length; y++) {\r\n                for(let x=0; x<data[y].length; x++) {\r\n                    const xi = x + sx;\r\n                    const yi = y + sy;\r\n                    _fillArrCells(cells, xi, yi);\r\n                    cells[yi][xi] = data[y][x];\r\n                }\r\n            }\r\n\r\n            \r\n\r\n            // update the selection area\r\n            const selection = {\r\n                ...state.selection,\r\n                startRowIndex: sy,\r\n                startColIndex: sx,\r\n                endRowIndex: sy + numRows - 1,\r\n                endColIndex: sx + numCols\r\n            };\r\n\r\n            \r\n\r\n            return {...state, cells, selection };\r\n        }\r\n\r\n        case actions.FILL_SELECTION: {\r\n            const cells = state.cells;\r\n\r\n            const sx = state.selection.startColIndex;\r\n            const sy = state.selection.startRowIndex;\r\n            const ex = state.selection.endColIndex;\r\n            const ey = state.selection.endRowIndex;\r\n\r\n            // calculate the left right, top and bottom bounds of the selection\r\n            const xMin = Math.min(sx, ex);\r\n            const yMin = Math.min(sy, ey);\r\n            const xMax = Math.max(sx, ex);\r\n            const yMax = Math.max(sy, ey);\r\n\r\n            // fill the cells with the paste data\r\n            for(let y=yMin; y<=yMax; y++) {\r\n                for(let x=xMin; x<=xMax; x++) {\r\n                    _fillArrCells(cells, x, y);\r\n                    cells[y][x] = action.payload;\r\n                }\r\n            }\r\n\r\n            return {...state, cells };\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nfunction _fillArrCells(arr, x, y) {\r\n    while(arr.length <= y)\r\n        arr.push([]);\r\n\r\n    while(arr[y].length <= x)\r\n        arr[y].push('');\r\n}\r\n\r\nfunction _trimArrCells(arr) {\r\n    \r\n    // trim each row\r\n    for(let rid = arr.length - 1; rid >= 0; rid--){\r\n        for(let cid = arr[rid].length - 1; cid >= 0; cid--){\r\n            if( arr[rid][cid] )  break;\r\n            arr[rid].pop();\r\n        }\r\n    }\r\n\r\n    // remove empty rows\r\n    for(let rid = arr.length - 1; rid >= 0; rid--){\r\n        if(arr[rid].length > 0) break;\r\n        arr.pop();\r\n    }\r\n\r\n    console.log(arr);\r\n}\r\n","import { combineEpics, ofType } from 'redux-observable';\r\nimport * as actions from './actions';\r\n\r\nimport { mergeMap } from 'rxjs/operators';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst onMouseMoved = (action, state) => action.pipe(\r\n    ofType(actions.MOUSE_MOVED),\r\n    mergeMap((action) => {\r\n\r\n        // get mouse coordinates\r\n        const mx = action.payload.mouseX + state.value.textGrid.viewport.scrollX;\r\n        const my = action.payload.mouseY + state.value.textGrid.viewport.scrollY;\r\n\r\n        // subtract 1 from width and height for row/col/cell index calculations\r\n        const cellWidth = state.value.textGrid.cellWidth;\r\n        const cellHeight = state.value.textGrid.cellHeight;\r\n\r\n        // calculate the row/col/cell index the mouse is over\r\n        let rowIndex = Math.floor(my / cellHeight);\r\n        let colIndex = Math.floor(mx / cellWidth);\r\n\r\n\r\n        // clamp the rowIndex and colIndex within bounds of the grid.\r\n        if( rowIndex < 0 ) rowIndex = 0;\r\n        if( colIndex < 0 ) colIndex = 0;\r\n        if( rowIndex >= state.value.textGrid.rows) rowIndex = state.value.textGrid.rows - 1;\r\n        if( colIndex >= state.value.textGrid.cols) colIndex = state.value.textGrid.cols - 1;\r\n\r\n        const hoverState = { rowIndex, colIndex };\r\n        const newActions = [];\r\n\r\n        // update the hover state\r\n        if(rowIndex !== state.value.textGrid.hover.rowIndex || colIndex !== state.value.textGrid.hover.colIndex) {\r\n            newActions.push(actions.setHoverCell(hoverState));\r\n        }\r\n\r\n        // If we move the mouse while the mouse is down, than we will\r\n        // either begin the selection, or expand the selection via the drag action\r\n        if(state.value.textGrid.selection.isMouseDown) {\r\n            newActions.push(actions.drag());                   \r\n        }\r\n\r\n        return newActions;\r\n    })\r\n);\r\n\r\n\r\nconst onKeyDown = (action, state) => action.pipe(\r\n    ofType(actions.KEY_DOWN),\r\n    mergeMap((action) => {\r\n        const key = action.payload.key;\r\n\r\n        const isShiftDown = action.payload.isShiftDown;\r\n        \r\n        const cbResult = action.payload.callback(state.value, key) || {};\r\n        const cbActions = cbResult.actions || [];\r\n\r\n        const numRowsSelected = Math.abs(state.value.textGrid.selection.endRowIndex - state.value.textGrid.selection.startRowIndex) + 1;\r\n        const numColsSelected = Math.abs(state.value.textGrid.selection.endColIndex - state.value.textGrid.selection.startColIndex) + 1;\r\n        const numItemsSelected = numRowsSelected * numColsSelected;\r\n        \r\n        if(cbResult.preventDefault) {\r\n            return cbActions;\r\n        }\r\n\r\n        if(key.length === 1) {\r\n            if( numItemsSelected > 1) {\r\n                return [...cbActions, actions.fillSelection(key)];\r\n            }\r\n            \r\n            return [ ...cbActions, actions.fillSelection(key), actions.moveSelection() ];\r\n        }\r\n        else {\r\n            if( key === 'Tab' ) {\r\n                const dir = isShiftDown ? -1 : 1;\r\n                return[ ...cbActions, actions.moveSelection(dir, 0) ];\r\n            }\r\n            if( key === 'Enter' ) {\r\n                const dir = isShiftDown ? -1 : 1;\r\n                return [ ...cbActions, actions.moveSelection(0, dir) ];\r\n            }\r\n            else if( key === 'Backspace') {\r\n\r\n                cbActions.push(actions.clearSelectionArea());\r\n                \r\n                // only move the selection if we have 1 item selected\r\n                if( numItemsSelected === 1 )\r\n                    cbActions.push(actions.moveSelection(undefined, undefined, true));\r\n\r\n                return cbActions;\r\n            }\r\n            else if( key === 'Delete') {\r\n                return [...cbActions, actions.clearSelectionArea() ];\r\n            }\r\n            else if( key.includes('Arrow') )\r\n            {\r\n                // calculate xy direction of arrow key press\r\n                let cursorDir = {x: 0, y: 0};\r\n                switch(key) {\r\n                    case 'ArrowLeft': cursorDir.x = -1; break;\r\n                    case 'ArrowRight': cursorDir.x = 1; break;\r\n                    case 'ArrowUp': cursorDir.y = -1; break;\r\n                    case 'ArrowDown': cursorDir.y = 1; break;\r\n                    default: break;\r\n                }\r\n\r\n                // if we press arrow keys while shift is pressed, we are selecting\r\n                // otherwise, we are moving the target cursor position.\r\n\r\n                if(isShiftDown) {\r\n                    // TODO: create action to grow/shrink the selection area\r\n                    const selection = { ...state.value.textGrid.selection };\r\n                    selection.endColIndex += cursorDir.x;\r\n                    selection.endRowIndex += cursorDir.y;\r\n                    selection.showSelection = true;\r\n                    return[  \r\n                        ...cbActions, \r\n                        actions.setSelectionArea(selection), \r\n                        actions.setTypeingDir(cursorDir.x, cursorDir.y)\r\n                    ];\r\n                }\r\n                else {\r\n                    return [\r\n                        ...cbActions, \r\n                        actions.moveSelection(cursorDir.x, cursorDir.y), \r\n                        actions.setTypeingDir(cursorDir.x, cursorDir.y)\r\n                    ];\r\n                }\r\n            }\r\n        }\r\n\r\n        return [];\r\n    })\r\n);\r\n\r\nconst onCopy = (action, state) => action.pipe(\r\n    ofType(actions.COPY),\r\n    mergeMap((action) => {\r\n        \r\n        const s = _getSelectedText(state);\r\n        navigator.clipboard.writeText(s)\r\n\r\n        return [];\r\n\r\n    })\r\n);\r\n\r\nconst onCut = (action, state) => action.pipe(\r\n    ofType(actions.CUT),\r\n    mergeMap((action) => {\r\n        const s = _getSelectedText(state);\r\n        navigator.clipboard.writeText(s)\r\n        return [actions.clearSelectionArea()]\r\n    })\r\n);\r\n\r\nexport const epics = combineEpics(\r\n    onMouseMoved,\r\n    onKeyDown,\r\n    onCopy,\r\n    onCut\r\n);\r\n\r\n\r\n\r\nfunction _getSelectedText(state) {\r\n    const cells = state.value.textGrid.cells;\r\n    const sx = state.value.textGrid.selection.startColIndex;\r\n    const sy = state.value.textGrid.selection.startRowIndex;\r\n    const ex = state.value.textGrid.selection.endColIndex;\r\n    const ey = state.value.textGrid.selection.endRowIndex + 1;\r\n    let s = '';\r\n    for(let y=sy; y<ey; y++){\r\n        if(y >= ey){\r\n            s += '\\n';\r\n            continue;\r\n        }\r\n        for(let x=sx; x<ex && x<cells[y].length ; x++) {\r\n            s += cells[y][x];\r\n        }\r\n\r\n        if(y <ey-1)\r\n            s += '\\n';\r\n    }\r\n    return s;\r\n}","\r\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux'\r\nimport { createEpicMiddleware } from 'redux-observable';\r\n\r\nimport {\r\n    reducer as textGridReducer, \r\n    epics as textGridEpics\r\n} from '../Components/TextGrid/store';\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\n\r\nconst rootReducer = combineReducers({\r\n    textGrid: textGridReducer\r\n});\r\n\r\n\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(\r\n    rootReducer, \r\n    composeEnhancer(applyMiddleware(epicMiddleware))\r\n);\r\n\r\nepicMiddleware.run(textGridEpics);","import React, { useEffect, useLayoutEffect, useRef, forwardRef, useImperativeHandle, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { store } from '../../store';\r\nimport * as actions from './store/actions';\r\nimport './TextGrid.scss';\r\n\r\nfunction TextGridCanvasRender(canvas, ctx, state) {\r\n\r\n    const backgroundColor = 'rgb(30, 30, 30)';\r\n    const gridColor = 'rgb(37, 37, 38)';\r\n    const textColor = 'rgb(220, 220, 170)';\r\n\r\n\r\n    ctx.save();\r\n\r\n    // render the background color\r\n    ctx.fillStyle = backgroundColor;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // basicly a camera, move the to the position of the scrollbars for rendering offsets.\r\n    ctx.translate(-state.viewport.scrollX, -state.viewport.scrollY);\r\n\r\n\r\n    // calculate the cells to render based on the scrollbar positions\r\n    const numCols = Math.floor(canvas.width / state.cellWidth);\r\n    const numRows = Math.floor(canvas.height / state.cellHeight);\r\n    const startCol = Math.floor(state.viewport.scrollX / state.cellWidth);\r\n    const startRow = Math.floor(state.viewport.scrollY / state.cellHeight);\r\n    const endCol = startCol + numCols + 1;\r\n    const endRow = startRow + numRows + 1;\r\n\r\n\r\n    // begin: render the Grid\r\n    // ------------------------------------------------------------------------\r\n    ctx.strokeStyle = gridColor;\r\n    ctx.beginPath();\r\n\r\n    // vertical lines\r\n    for(let xi = startCol; xi < endCol && xi <=state.cols; xi++){\r\n        const xPos = xi * state.cellWidth;\r\n        ctx.moveTo(xPos, state.viewport.scrollY);\r\n        ctx.lineTo(xPos, state.rows  * state.cellHeight);\r\n    }\r\n\r\n    // horizontal  lines\r\n    for(let yi = startRow; yi<endRow && yi <=state.rows; yi++){\r\n        const yPos = yi * state.cellHeight;\r\n        ctx.moveTo(state.viewport.scrollX, yPos);\r\n        ctx.lineTo(state.cols * state.cellWidth, yPos);\r\n    }\r\n\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n    \r\n\r\n    // ------------------------------------------------------------------------\r\n    // end: render the grid\r\n\r\n    // begin: render the instructions\r\n    // -----------------------------------------------------------------------\r\n    ctx.textAlign = 'center'\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillStyle = textColor;\r\n    ctx.font = '10pt source-code-pro, Menlo, Monaco, Consolas'\r\n    \r\n    for(let yi = startRow; yi<state.cells.length && yi<endRow; yi++){\r\n        for(let xi = startCol; xi < state.cells[yi].length && xi<endCol; xi++) {\r\n            const xPos = xi * state.cellWidth + (state.cellWidth * 0.5);\r\n            const yPos = yi * state.cellHeight + (state.cellHeight * 0.5) + 1;\r\n            ctx.fillText(state.cells[yi][xi], xPos, yPos);\r\n        }\r\n    }\r\n    // -----------------------------------------------------------------------\r\n    // end: render the instructions\r\n\r\n    // begin: render an overlay over the column and row cells\r\n    // -----------------------------------------------------------------------\r\n    {\r\n        const xPos = state.hover.colIndex * state.cellWidth;\r\n        const yPos = state.hover.rowIndex * state.cellHeight\r\n    \r\n        if( yPos < state.rows * state.cellHeight && xPos < state.cols * state.cellWidth) {\r\n            ctx.globalAlpha = 0.01;\r\n            ctx.fillStyle = 'white';\r\n\r\n            ctx.fillRect(state.viewport.scrollX, yPos, state.cols * state.cellWidth, state.cellHeight);\r\n            ctx.fillRect(xPos, state.viewport.scrollY, state.cellWidth, state.rows * state.cellHeight);\r\n            \r\n            ctx.globalAlpha = 1;\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------------------------------\r\n    // end: render an overlay over the hovered cells\r\n\r\n    // begin: render the hilighted cells\r\n    // -----------------------------------------------------------------------\r\n    {\r\n        const left = Math.min(state.selection.startColIndex, state.selection.endColIndex);\r\n        const right = Math.max(state.selection.startColIndex, state.selection.endColIndex);\r\n        const top = Math.min(state.selection.startRowIndex, state.selection.endRowIndex);\r\n        const bottom = Math.max(state.selection.startRowIndex, state.selection.endRowIndex);\r\n\r\n        const xPos = left * state.cellWidth;\r\n        const yPos = top * state.cellHeight;\r\n        const width = (right - left + 1) * state.cellWidth;\r\n        const height = (bottom - top + 1) * state.cellHeight;\r\n\r\n        ctx.globalAlpha = 0.04;\r\n        ctx.fillStyle = textColor;\r\n        \r\n        ctx.fillRect(xPos, yPos, width, height);\r\n        \r\n        ctx.globalAlpha = 1;\r\n        ctx.strokeStyle = textColor;\r\n        ctx.strokeRect(xPos, yPos, width, height);\r\n    }\r\n    // -----------------------------------------------------------------------\r\n    // end: render the hilighted cells\r\n\r\n    ctx.restore();\r\n\r\n}\r\n\r\n\r\nexport const TextGridCanvas = forwardRef((props, ref) => {\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        getCells: () => store.getState().textGrid.cells\r\n    }), []);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const fullWidth = useSelector(state => state.textGrid.cols * state.textGrid.cellWidth);\r\n    const fullHeight = useSelector(state => state.textGrid.rows * state.textGrid.cellHeight);\r\n\r\n    console.log({fullWidth, fullHeight});\r\n\r\n    const canvasRef = useRef(null);\r\n    const scrollRef = useRef(null);  \r\n\r\n    const handleMouseMove = (event) => {\r\n        \r\n        // calculate the mouse position relative to the position of this component.\r\n        let bounds = event.currentTarget.getBoundingClientRect();\r\n        let mouseX = event.clientX - bounds.left;\r\n        let mouseY = event.clientY - bounds.top;\r\n        \r\n        dispatch(actions.mouseMoved({mouseX, mouseY}));\r\n    };\r\n\r\n    const handleMouseDown = (event) => {\r\n        event.preventDefault();\r\n        event.currentTarget.focus();\r\n        dispatch(actions.mouseDown());\r\n    };\r\n\r\n    const handleMouseUp = (event) => {\r\n        event.preventDefault();\r\n        dispatch(actions.mouseUp());\r\n    };\r\n\r\n    const handleScroll = (event) => {        \r\n        resizeCanvas();\r\n    };\r\n\r\n    const handleMouseLeave = (event) => {\r\n        dispatch(actions.setHoverCell({rowIndex: -1, colIndex: -1}));\r\n    };\r\n\r\n    const resizeCanvas = useCallback(() => {\r\n        const width = scrollRef.current ? scrollRef.current.clientWidth : 0;\r\n        const height = scrollRef.current ? scrollRef.current.clientHeight : 0;\r\n        const scrollX = scrollRef.current ? scrollRef.current.scrollLeft : undefined;\r\n        const scrollY = scrollRef.current ? scrollRef.current.scrollTop : undefined;\r\n        if( canvasRef.current && (canvasRef.current.width !== width || canvasRef.current.height !== height)) {\r\n            canvasRef.current.width = width;\r\n            canvasRef.current.height = height;\r\n        }\r\n        console.log( {width, height, scrollX, scrollY });\r\n        dispatch(actions.setViewport(width, height, scrollX, scrollY));\r\n    }, [dispatch]);\r\n\r\n\r\n    const handleKeyPress = (event) => {\r\n\r\n        console.log('test');\r\n        \r\n        if( event.ctrlKey ){\r\n            const key = event.key.toLowerCase();\r\n\r\n            if( key === 'v') {\r\n                // Paste event - do nothing, this will allow the onPaste event to fire\r\n            }\r\n            else if( key === 'c') {\r\n                dispatch( actions.copy());\r\n                event.preventDefault();\r\n            }\r\n            else if( key === 'x' ) {\r\n                dispatch( actions.cut());\r\n                event.preventDefault();\r\n            }\r\n            \r\n        }\r\n        else {\r\n            event.preventDefault();\r\n            dispatch(actions.keyDown({ \r\n                key: event.key, \r\n                isShiftDown: event.shiftKey, \r\n                callback: props.config.events.onKeyDown\r\n            }));\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(actions.setText(props.config.text))\r\n    }, [dispatch, props.config.text]);\r\n\r\n    useEffect(() => {\r\n        dispatch(actions.setCellSize(props.config.cellWidth, props.config.cellHeight));\r\n    }, [dispatch, props.config.cellWidth, props.config.cellHeight]);\r\n\r\n    useLayoutEffect(() => {       \r\n\r\n        if( canvasRef.current ) {\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            let requestAnimFrameObj = {};\r\n            const renderLoopFn = () => {\r\n                TextGridCanvasRender(canvas, ctx, store.getState().textGrid);\r\n                requestAnimFrameObj.handle = requestAnimationFrame(renderLoopFn);\r\n            };\r\n            renderLoopFn();\r\n            \r\n            return () => {\r\n                console.log('cleanup');\r\n                cancelAnimationFrame(requestAnimFrameObj.handle)\r\n            }\r\n        }\r\n        \r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        resizeCanvas();\r\n    }, [resizeCanvas, props.dimensions]); \r\n\r\n    return(\r\n        <div ref={scrollRef} className=\"customScrollbars\" onScroll={handleScroll} style={{position: 'relative', width: '100%', height: '100%', overflow: 'auto'}}>\r\n        <canvas ref={canvasRef}\r\n            style={{position: 'sticky', left: 0, top: 0, display: 'block'}}\r\n            tabIndex='0'\r\n            onKeyDown={handleKeyPress}\r\n            onMouseMove={handleMouseMove} \r\n            onMouseUp={handleMouseUp}\r\n            onMouseDown={handleMouseDown}\r\n            onMouseLeave={handleMouseLeave}></canvas>\r\n        <div style={{position: 'absolute', width: fullWidth, height: fullHeight, pointerEvents: 'none', left: 0, top: 0}}></div>\r\n        </div>\r\n    );\r\n});\r\n\r\n// /**\r\n//  * This component renders the text grid and handles\r\n//  */\r\n// export const TextGrid = forwardRef((props, ref) => {\r\n\r\n//     useImperativeHandle(ref, () => ({\r\n//         getCells: () => store.getState().textGrid.cells\r\n//     }), []);\r\n\r\n//     const dispatch = useDispatch();\r\n\r\n//     const isInitialised = useSelector(state => state.textGrid.initialised);\r\n//     const vRows = useSelector(state => state.textGrid.viewport.rows);\r\n//     const vXOffset = useSelector(state => state.textGrid.viewport.xOffset);\r\n//     const vYOffset = useSelector(state => state.textGrid.viewport.yOffset);\r\n//     const rowsArr = vRows > 0 ? new Array(vRows).fill('') : [];\r\n\r\n//     const elementRef = useRef(null);\r\n//     useEffect(() => {\r\n//         if( !isInitialised ) {\r\n//             const width = elementRef.current ? elementRef.current.offsetWidth : 0;\r\n//             const height = elementRef.current ? elementRef.current.offsetHeight: 0;\r\n\r\n//             dispatch(actions.setupGrid(width, height, props.config.text, props.config.cellWidth, props.config.cellHeight));\r\n//         }\r\n//         const onPasteEvent = document.addEventListener('paste', (event) => {\r\n//             dispatch(actions.paste(event.clipboardData.getData('text')));\r\n//         });\r\n\r\n//         return () => {\r\n//             document.removeEventListener('paste', onPasteEvent);\r\n//         };\r\n\r\n//     }, [isInitialised, props, dispatch]);\r\n\r\n//     const handleMouseMove = (event) => {\r\n        \r\n//         // calculate the mouse position relative to the position of this component.\r\n//         let bounds = event.currentTarget.getBoundingClientRect();\r\n//         let mouseX = event.clientX - bounds.left;\r\n//         let mouseY = event.clientY - bounds.top;\r\n        \r\n//         dispatch(actions.mouseMoved({mouseX, mouseY}));\r\n//     };\r\n\r\n//     const handleKeyPress = (event) => {\r\n        \r\n//         if( event.ctrlKey ){\r\n//             const key = event.key.toLowerCase();\r\n\r\n//             if( key === 'v') {\r\n//                 // Paste event - do nothing, this will allow the onPaste event to fire\r\n//             }\r\n//             else if( key === 'c') {\r\n//                 dispatch( actions.copy());\r\n//                 event.preventDefault();\r\n//             }\r\n//             else if( key === 'x' ) {\r\n//                 dispatch( actions.cut());\r\n//                 event.preventDefault();\r\n//             }\r\n            \r\n//         }\r\n//         else {\r\n//             event.preventDefault();\r\n//             dispatch(actions.keyDown({ \r\n//                 key: event.key, \r\n//                 isShiftDown: event.shiftKey, \r\n//                 callback: props.config.events.onKeyDown\r\n//             }));\r\n//         }\r\n        \r\n//     };\r\n\r\n//     const handleMouseDown = (event) => {\r\n//         event.preventDefault();\r\n//         event.currentTarget.focus();\r\n//         dispatch(actions.mouseDown());\r\n//     };\r\n\r\n//     const handleMouseUp = (event) => {\r\n//         event.preventDefault();\r\n//         dispatch(actions.mouseUp());\r\n//     };\r\n\r\n//     const handleScroll = (event) => {\r\n//         event.preventDefault();\r\n//         dispatch(actions.scrollView(event.target.scrollLeft, event.target.scrollTop));\r\n//     };\r\n\r\n//     const handleMouseLeave = (event) => {\r\n//         dispatch(actions.setHoverCell({rowIndex: -1, colIndex: -1}));\r\n//     };\r\n\r\n\r\n//     if( elementRef.current ) {\r\n//         // set the scrollposition\r\n//         // this.refs.messages.scrollTop = this.refs.messages.scrollHeight\r\n//         elementRef.current.scrollLeft = vXOffset * props.config.cellWidth;\r\n//         elementRef.current.scrollTop = vYOffset * props.config.cellHeight;\r\n//     }\r\n\r\n//     return(\r\n//         <div ref={elementRef} className=\"text-grid-area\"\r\n//             onScroll={handleScroll}\r\n//             draggable\r\n//             tabIndex='0'\r\n//             onKeyDown={handleKeyPress}\r\n//             onMouseMove={handleMouseMove} \r\n//             onMouseUp={handleMouseUp}\r\n//             onMouseDown={handleMouseDown}\r\n//             onMouseLeave={handleMouseLeave}>\r\n//             <div  className=\"text-grid\">\r\n\r\n//                 {rowsArr.map((cr, rowIndex) =>\r\n//                     <TextGridRow key={`gridRow-${rowIndex}`} rowId={rowIndex + vYOffset}></TextGridRow> \r\n//                 )}\r\n//                 <TextGridRangeSelection></TextGridRangeSelection>\r\n//             </div>\r\n//             <div style={{width: 10000, height: 10000, position: 'absolute'}}></div>\r\n//         </div>\r\n//     );\r\n// });\r\n\r\n\r\n// /**\r\n//  * Rhis component renders each row of cells\r\n//  */\r\n// function TextGridRow(props) {\r\n    \r\n//     const rowId = props.rowId;\r\n//     const cellHeight = useSelector(state => state.textGrid.cellHeight);\r\n//     const vCols = useSelector(state => state.textGrid.viewport.cols);\r\n//     const vXOffset = useSelector(state => state.textGrid.viewport.xOffset);\r\n//     const cellArr = vCols > 0 ? new Array(vCols).fill('') : [];\r\n\r\n//     return(<div className={'text-grid-row'} style={{height: cellHeight, maxHeight: cellHeight, minHeight: cellHeight}}>\r\n//         {cellArr.map((cell, colId) => {\r\n//             const colIndex = colId + vXOffset;\r\n//             return (<TextGridCell key={'cell-'+rowId+'-'+colIndex} rowId={rowId} colId={colIndex} ></TextGridCell>);\r\n//         })}\r\n//     </div>);\r\n// }\r\n\r\n// /**\r\n//  * This component renders an individual cell within the table.\r\n//  */\r\n// function TextGridCell(props) {\r\n\r\n\r\n//     const rowId = props.rowId;\r\n//     const colId = props.colId;\r\n\r\n//     const cell = useSelector(state => {\r\n//         if(rowId < state.textGrid.cells.length && colId < state.textGrid.cells[rowId].length)\r\n//             return state.textGrid.cells[rowId][colId];\r\n//         return '';\r\n//     });\r\n    \r\n//     const cellWidth = useSelector(state => state.textGrid.cellWidth);\r\n\r\n//     const isRowHovered = useSelector (state => state.textGrid.hover.rowIndex === rowId );\r\n//     const isColHovered = useSelector (state => state.textGrid.hover.colIndex === colId );\r\n//     const isCellSelected = useSelector (state => state.textGrid.target.rowIndex === rowId && state.textGrid.target.colIndex === colId);\r\n//     const isBottomEdge = useSelector( state => state.textGrid.rows-1 === rowId );\r\n//     const isRightEdge = useSelector( state => state.textGrid.cols-1 === colId);\r\n\r\n//     // the isCellSelected ternary is used to prevent re-rendering of every cell when the direction changes\r\n//     const textDirX = useSelector(state => isCellSelected ? state.textGrid.target.dir.x : 0);\r\n//     const textDirY = useSelector(state => isCellSelected ? state.textGrid.target.dir.y : 0);\r\n\r\n//     const isCellHovered =  isRowHovered && isColHovered;\r\n    \r\n    \r\n\r\n//     const getClassNames = () => {\r\n\r\n//         const classNames = ['text-grid-cell'];\r\n\r\n//         if( isCellHovered ) classNames.push( 'cell-hover' );\r\n//         if( isRowHovered )  classNames.push('row-hover');\r\n//         if( isColHovered ) classNames.push('col-hover');\r\n//         if( isCellSelected ) classNames.push('active-override');\r\n//         if( isCellSelected && textDirX > 0 ) classNames.push('active-override-left');\r\n//         if( isCellSelected && textDirX < 0 ) classNames.push('active-override-right');\r\n//         if( isCellSelected && textDirY > 0 ) classNames.push('active-override-top');\r\n//         if( isBottomEdge ) classNames.push('bottom-edge');\r\n//         if( isRightEdge ) classNames.push('right-edge');\r\n\r\n//         return classNames.join(' ');\r\n//     }\r\n\r\n    \r\n\r\n//     return(<span className={getClassNames()}  style={{width: cellWidth, maxWidth: cellWidth, minWidth: cellWidth}} >\r\n//         <div className=\"text-grid-cell-content\">\r\n//             {cell}\r\n//         </div>\r\n//     </span>);\r\n// }\r\n\r\n// /**\r\n//  * This component renders the text selection area\r\n//  */\r\n// function TextGridRangeSelection() {\r\n\r\n//     const selection = useSelector(state => state.textGrid.selection );\r\n//     const cellWidth = useSelector(state => state.textGrid.cellWidth);\r\n//     const cellHeight = useSelector(state => state.textGrid.cellHeight);\r\n//     const viewport = useSelector(state => state.textGrid.viewport);\r\n\r\n//     // with the viewport in place, we need to calculate the relative position of the selction box\r\n//     let sci = selection.startColIndex - viewport.xOffset;\r\n//     const eci = selection.endColIndex - viewport.xOffset;\r\n//     let sri = selection.startRowIndex - viewport.yOffset;\r\n//     const eri = selection.endRowIndex - viewport.yOffset;\r\n\r\n//     // if we are dragging upward, than our selection needs to start from the\r\n//     // top of the next row.\r\n//     if(eri < sri) { sri += 1; }\r\n//     if(eci < sci) { sci += 1; }\r\n\r\n//     // calculate the size and position of the selection box\r\n//     // position is relative to the top left of the TextGrid component\r\n//     const width = ((eci - sci) * (cellWidth-1));\r\n//     const height = (eri- sri + 1) * (cellHeight-1) + ((eri - sri) < 0 ? -(cellHeight-1) : 0);\r\n//     const left = (sci * (cellWidth-1)) + Math.min(width, 0);\r\n//     const top = (sri * (cellHeight-1)) + Math.min(height, 0);\r\n//     let style={ width: Math.abs(width), height: Math.abs(height), left, top };\r\n\r\n//     if(width === 0 || height === 0)\r\n//         style.display = 'none';\r\n\r\n//     // render the selection grid.\r\n//     return(<div className='text-grid-selection' style={style}></div>);\r\n// }\r\n\r\n\r\n/**\r\n * \r\n */\r\nexport function TextGridStatusBar() {\r\n    const state = useSelector(state => state.textGrid );\r\n\r\n    return(<div className=\"text-grid-status-bar\">\r\n        <ul>\r\n            <li>Rows: {state.rows}</li>\r\n            <li>Cols: {state.cols}</li>            \r\n        </ul>\r\n    </div>);\r\n}\r\n\r\n\r\n\r\n","export const initialState = {\r\n    readOnlyPos: 2,\r\n    consoleText: '> '\r\n};\r\n\r\nexport const reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'BEGIN_USER_INPIT': {\r\n            const consoleText = state.consoleText += '> ';\r\n            const readOnlyPos = consoleText.length;\r\n            return {...state, consoleText, readOnlyPos };\r\n        }\r\n        case 'SET_CONSOLE_TEXT': {\r\n            const consoleText = action.payload;\r\n            return {...state, consoleText };\r\n        }\r\n        case 'END_USER_INPUT': {\r\n            const readOnlyPos = state.consoleText.length;\r\n            const consoleText = state.consoleText.length > 0 ? state.consoleText += '\\n' : '';\r\n            return {...state, readOnlyPos, consoleText };\r\n        }\r\n        case 'APPEND_PROGRAM_INPUT': {\r\n            const consoleText = state.consoleText + action.payload;\r\n            const readOnlyPos = consoleText.length;\r\n            return {...state, consoleText, readOnlyPos };\r\n        }\r\n        case 'CLEAR_TERMINAL': {\r\n            const consoleText = '';\r\n            const readOnlyPos = 0;\r\n            return {...state, consoleText, readOnlyPos };\r\n        }\r\n        case 'SET_STATE': {\r\n            return {...state, ...action.payload };\r\n        }\r\n        default: {\r\n            console.warn('UNHANDELED ACTION');\r\n            return state;\r\n        }\r\n    }\r\n};","\r\nexport const actions = {\r\n    beginUserInput: () => ({ type: 'BEGIN_USER_INPIT' }),\r\n    endUserInput: () => ({ type: 'END_USER_INPUT' }),\r\n    setConsoleText: (text) => ({ type: 'SET_CONSOLE_TEXT', payload: text }),\r\n    appendProgramInput: (text) => ({ type: 'APPEND_PROGRAM_INPUT', payload: text }),\r\n    clear: () => ({ type: 'CLEAR_TERMINAL' }),\r\n    setState: (state) => ({ type: 'SET_STATE', payload: state })\r\n};","import './Terminal.scss';\r\nimport React, {useReducer, useCallback, forwardRef, useImperativeHandle} from 'react';\r\nimport { actions, reducer, initialState } from './store';\r\n\r\n\r\n/**\r\n * This is a basic terminal window component\r\n */\r\nexport const Terminal = forwardRef((props, ref) => {\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    // collection of commands to run when the user types stuff into the terminal.\r\n    // the command are extended by props.commands.\r\n    const commands = {\r\n        clear: (args) => { \r\n            dispatch(actions.clear());\r\n        },\r\n        echo: (args) => { \r\n            dispatch(actions.appendProgramInput(args.join(' ') + '\\n'));\r\n        },\r\n        ...props.commands\r\n    };\r\n\r\n    const submitLine = useCallback((line) => {\r\n        \r\n        // the onEnter method should return true to prevent default behaviour\r\n        if( props.onEnter && props.onEnter(line) ) {\r\n            return;\r\n        }\r\n        \r\n        const lineItems = line.split(' ');\r\n\r\n        if(lineItems.length === 0)\r\n            return;\r\n\r\n        const [cmd, ...args] = lineItems;\r\n\r\n        if(commands[cmd] !== undefined){\r\n            commands[cmd](args);\r\n        }\r\n\r\n        dispatch(actions.endUserInput());\r\n        dispatch(actions.beginUserInput());\r\n\r\n    }, [props, commands]);\r\n    \r\n\r\n    // handle key press within the text area\r\n    // for characters like backspace and delete, additional checks need to be made to \r\n    // to ensure we dont delete anything within the readonly area.\r\n    // NOTE: there may be more cases to handle, but this works for us for now.\r\n    const handleKeyDown = (event) => {\r\n\r\n        if (event.key.length === 1) {\r\n            // allow printable characters\r\n        }\r\n        else if(event.key === 'Enter') {\r\n            const userInput = state.consoleText.substr(state.readOnlyPos);\r\n            submitLine(userInput);\r\n            event.preventDefault();\r\n        }\r\n        else if(event.key === 'Backspace') {\r\n            if(event.target.selectionStart <= state.readOnlyPos)\r\n                event.preventDefault();\r\n        }\r\n        else if(event.key === 'Delete') {\r\n            if(event.target.selectionStart < state.readOnlyPos)\r\n                event.preventDefault();\r\n        }\r\n    }\r\n\r\n    // the event is fired when the cursor position changes in the text area\r\n    // if we select an area within the readOnlyPos, than we re-position the cursor\r\n    // allowing us to simulate a kind of terminal experience.\r\n    // text entered into the terminal after the readOnlyPos is considered user input\r\n    // and can be freely edited.\r\n    const handleSelect = (event) => {\r\n        if(event.target.selectionStart === state.readOnlyPos-1){\r\n            event.target.setSelectionRange(state.readOnlyPos, state.readOnlyPos);\r\n        }\r\n        else if(event.target.selectionStart < state.readOnlyPos-1){\r\n            event.target.setSelectionRange(event.target.value.length, event.target.value.length);\r\n        }\r\n    }\r\n\r\n    // change event for the text area, when the input changes, we need to update the state.\r\n    const handleChange = (event) => {\r\n        dispatch(actions.setConsoleText(event.target.value));\r\n    }\r\n\r\n    // This allows us to provide an api via ref to our parent component\r\n    // the below methods can be called by the parent\r\n    useImperativeHandle(ref, () => ({\r\n        print: (text) => {\r\n            dispatch(actions.appendProgramInput(text));\r\n        },\r\n        submitInput: () => {\r\n            const userInput = state.consoleText.substr(state.readOnlyPos);\r\n            submitLine(userInput);\r\n        }\r\n    }), [state.consoleText, state.readOnlyPos, submitLine] );\r\n\r\n\r\n    return(<div className=\"terminal\">\r\n        \r\n        <textarea wrap=\"off\" spellCheck=\"false\" value={state.consoleText}\r\n            onChange={handleChange}\r\n            onKeyDown={handleKeyDown}\r\n            onSelect={handleSelect}>\r\n        </textarea>\r\n    </div>);\r\n});","import React from 'react';\r\nimport './Toolbar.scss';\r\n\r\nexport function Toolbar(props) {\r\n\r\n\r\n    const items = props.items || [];\r\n    \r\n\r\n    return(<div className=\"toolbar\">\r\n        <ul>\r\n            {items.map( (item, index) => {\r\n                return(<li key={'tbitem-'+index} className={item.classNames} onClick={item.onClick}>{item.text}</li>);\r\n            })}\r\n        </ul>\r\n    </div>);\r\n}","import { BehaviorSubject } from 'rxjs';\r\n\r\nexport default class BefungeInterpreter {\r\n    \r\n    constructor(program) {\r\n        \r\n        this.program = program;\r\n        this.numRows = 25;\r\n        this.numCols = 80;\r\n\r\n        // add the required amount of rows\r\n        while(this.program.length < this.numRows)\r\n            this.program.push([]);\r\n\r\n        // for each row, add the required amount of columns\r\n        for(let rowIndex = 0; rowIndex < this.numRows; rowIndex++){\r\n            while(this.program[rowIndex].length < this.numCols)\r\n                this.program[rowIndex].push('');\r\n        }\r\n        \r\n        this.stack = [];\r\n        this.stack$ = new BehaviorSubject([]);\r\n\r\n        this.onInstructionExecutedCb = null;\r\n        this.onConsoleOutCb = null;\r\n        this.onProgramTerminateCb = null;\r\n        this.onRequestConsoleInputCb = null;\r\n        \r\n        this.currentInstruction = null;\r\n        this.nextInstruction = { x: 0, y: 0, i: program[0][0], ...this.getInstructionDir(1, 0, program[0][0]) };\r\n        this.stringMode = false;\r\n\r\n        this.waitingForInput = false;\r\n\r\n        this.inputStack = [];\r\n        this.skipCount = 0;\r\n    }\r\n\r\n    destroy() {\r\n        \r\n    }\r\n\r\n    instructionInfo = {\r\n        '0-9': 'Push this number on the stack',\r\n        '+': 'Addition: Pop a and b, then push a+b',\r\n        '-':'Subtraction: Pop a and b, then push b-a',\r\n        '*': 'Multiplication: Pop a and b, then push a*b',\r\n        '/': 'Integer division: Pop a and b, then push b/a, rounded towards 0',\r\n        '%': 'Modulo: Pop a and b, then push the remainder of the integer division of b/a',\r\n        '!': 'Logical NOT: Pop a value. If the value is zero, push 1; otherwise, push zero',\r\n        '`': 'Greater than: Pop a and b, then push 1 if b>a, otherwise zero',\r\n        '>': 'Start moving right',\r\n        '<': 'Start moving left',\r\n        '^': 'Start moving up',\r\n        'v': 'Start moving down',\r\n        '?': 'Start moving in a random cardinal direction',\r\n        '_': 'Pop a value; move right if value=0, left otherwise',\r\n        '|': 'Pop a value; move down if value=0, up otherwise',\r\n        '\"': 'Start string mode: push each character\\'s ASCII value all the way up to the next\"',\r\n        ':': 'Duplicate value on top of the stack',\r\n        '\\\\': 'Swap two values on top of the stack',\r\n        '$': 'Pop value from the stack and discard it',\r\n        '.': 'Pop value and output as an integer followed by a space',\r\n        ',': 'Pop value and output as ASCII character',\r\n        '#': 'Bridge: Skip next cell',\r\n        'p': 'A \"put\" call (a way to store a value for later use). Pop y, x, and v, then change the character at (x,y) in the program to the character with ASCII value v',\r\n        'g': 'A \"get\" call (a way to retrieve data in storage). Pop y and x, then push ASCII value of the character at that position in the program',\r\n        '&': 'Ask user for a number and push it',\r\n        '~': 'Ask user for a character and push its ASCII value',\r\n        '@': 'End program',\r\n        \"StringMode\": 'all characters are pushed onto the stack'\r\n    }\r\n\r\n    step() {\r\n\r\n        if(this.waitingForInput)\r\n            return;\r\n        \r\n        this.currentInstruction = this.nextInstruction;\r\n        let ci = this.currentInstruction;\r\n\r\n\r\n        if(ci === null)\r\n            return;\r\n\r\n        if(this.stringMode) {\r\n            if( ci.i === '\"') {\r\n                this.stringMode = false;\r\n            }\r\n            else {\r\n                let c = ci.i;\r\n                if( c === '' ) c = ' ';\r\n                this.pushStack(c.charCodeAt(0));\r\n            }\r\n        }\r\n        else if( ci.i.includes(['>', '<', 'v', '^', '?']) ) {\r\n            // direction modifiers already calculated\r\n        }\r\n        else if( ci.i >= '0' && ci.i <= '9') {\r\n            // push the number onto the stack\r\n            this.pushStack(parseInt(ci.i));\r\n        }\r\n        else if( ci.i === '+') {\r\n            // Addition: Pop a and b, then push a+b\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(a + b);\r\n        }\r\n        else if( ci.i === '-') {\r\n            // Subtraction: Pop a and b, then push b-a\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(b - a);\r\n        }\r\n        else if( ci.i === '*') {\r\n            // Multiplication: Pop a and b, then push a*b\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(a * b);\r\n        }\r\n        else if( ci.i === '/') {\r\n            // Integer division: Pop a and b, then push b/a, rounded towards 0.\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(b / a);\r\n        }\r\n        else if( ci.i === '%') {\r\n            // Modulo: Pop a and b, then push the remainder of the integer division of b/a.\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(b % a);\r\n        }\r\n        else if( ci.i === '!') {\r\n            // Logical NOT: Pop a value. If the value is zero, push 1; otherwise, push zero.\r\n            const a = this.popStack();\r\n            this.pushStack(a === 0 ? 1 : 0);\r\n        }\r\n        else if( ci.i === '`') {\r\n            // yes, its the grave character!\r\n            // Greater than: Pop a and b, then push 1 if b>a, otherwise zero.\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(b > a ? 1 : 0);\r\n        }\r\n        else if( ci.i === '_') {\r\n            // Pop a value; move right if value=0, left otherwise\r\n            // the direction was already calculated when we fetched this instruction, so we just need to pop off the value\r\n            this.popStack(); \r\n        }\r\n        else if( ci.i === '|') {\r\n            // Pop a value; move down if value=0, up otherwise\r\n            // the direction was already calculated when we fetched this instruction, so we just need to pop off the value\r\n            this.popStack(); \r\n        }\r\n        else if(ci.i === '\"') {\r\n            // Start string mode: push each character's ASCII value all the way up to the next \" quote character\r\n            this.stringMode = !this.stringMode;\r\n        }\r\n        else if( ci.i === ':') {\r\n            // Duplicate value on top of the stack\r\n            if(this.stack.length > 0)\r\n                this.pushStack( this.stack[this.stack.length -1]);\r\n        }\r\n        else if( ci.i === '\\\\') {\r\n            // Swap two values on top of the stack\r\n            const a = this.popStack();\r\n            const b = this.popStack();\r\n            this.pushStack(a);\r\n            this.pushStack(b);\r\n        }\r\n        else if( ci.i === '$') {\r\n            // Pop value from the stack and discard it\r\n            this.popStack();\r\n        }\r\n        else if( ci.i === '.' ) {\r\n            // Pop value and output as an integer followed by a space\r\n            const a = this.popStack();\r\n            this.onConsoleOutCb( a );\r\n        }\r\n        else if( ci.i === ',' ) {\r\n            // Pop value and output as ASCII character\r\n            const a = this.popStack();\r\n            this.onConsoleOutCb( String.fromCharCode(a) );\r\n        }\r\n        else if( ci.i === '#' ) {\r\n            // Bridge: Skip next cell\r\n            // ci.dirX *= 2;\r\n            // ci.dirY *= 2\r\n            this.skipCount += 1;\r\n        }\r\n        else if( ci.i === 'p' ) {\r\n            // A \"put\" call (a way to store a value for later use). Pop y, x, and v, then change the character at (x,y) in the program to the character with ASCII value v\r\n            const y = this.popStack();\r\n            const x = this.popStack();\r\n            const v = this.popStack();\r\n            const newInstruction = String.fromCharCode(v);\r\n            this.program[y][x] = newInstruction;\r\n            // TODO: update the editor text\r\n        }\r\n\r\n        else if( ci.i === 'g') {\r\n            // A \"get\" call (a way to retrieve data in storage). Pop y and x, then push ASCII value of the character at that position in the program\r\n            const y = this.popStack();\r\n            const x = this.popStack();\r\n\r\n            if( x >= 0 && x < this.numCols && y >= 0 && y < this.numRows ) {\r\n                const val = this.program[y][x]; \r\n                this.pushStack(val);\r\n            }\r\n            else {\r\n                this.pushStack(0);\r\n            }\r\n        }\r\n        else if( ci.i === '&' ) {\r\n            // Ask user for a number and push it\r\n            // TODO: ask the user for a number\r\n            if(this.inputStack.length === 0) {\r\n                this.waitingForInput = true;\r\n                if( this.onRequestConsoleInputCb ) {\r\n                    this.onRequestConsoleInputCb();\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                const val = this.inputStack.shift();\r\n                this.pushStack(parseInt(val));\r\n            }\r\n        }\r\n        else if( ci.i === '~' ) {\r\n            // Ask user for a character and push its ASCII value\r\n            if(this.inputStack.length === 0) {\r\n                this.waitingForInput = true;\r\n                if( this.onRequestConsoleInputCb ) {\r\n                    this.onRequestConsoleInputCb();\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                const val = this.inputStack.shift();\r\n                this.pushStack(val.charCodeAt(0));\r\n            }\r\n        }\r\n        else if( ci.i === '@') {\r\n            // End of program\r\n            ci.dirX = 0;\r\n            ci.dirY = 0;\r\n\r\n            if(this.onProgramTerminateCb){\r\n                this.onProgramTerminateCb();\r\n            }\r\n        }\r\n\r\n        const ni = this.getNextInstruction();\r\n        this.nextInstruction = ni;\r\n\r\n        \r\n        if( this.onInstructionExecutedCb )\r\n            this.onInstructionExecutedCb(ci, ni);\r\n    }\r\n\r\n    pushStack(val) {\r\n        this.stack.push(val);\r\n        this.stack$.next(this.stack);\r\n    }\r\n    popStack() {\r\n        const val = this.stack.length > 0 ? this.stack.pop() : 0;\r\n        this.stack$.next(this.stack);\r\n        return val;\r\n    }\r\n\r\n    getNextInstruction() {\r\n        const ci = this.currentInstruction;\r\n        let nx = ci.x;\r\n        let ny = ci.y;\r\n        do {\r\n            this.skipCount -= 1;\r\n\r\n            nx = nx + ci.dirX;\r\n            ny = ny + ci.dirY;\r\n\r\n            // wrap the instructions\r\n            if( ny < 0 ) ny = this.numRows - 1;\r\n            if( nx < 0 ) nx = this.numCols - 1;\r\n            if( ny >= this.numRows ) ny = 0;\r\n            if( nx >= this.numCols ) nx = 0;\r\n            \r\n            \r\n        } while(this.skipCount >= 0)\r\n        this.skipCount = 0;\r\n            \r\n    \r\n        const instruction = (nx < this.program[ny].length) ? this.program[ny][nx] : '';\r\n        const instructionDir = this.getInstructionDir(ci.dirX, ci.dirY, instruction);\r\n        \r\n        return {x: nx, y: ny, i: instruction, ...instructionDir };\r\n    }\r\n\r\n    getInstructionDir(cDirX, cDirY, instruction) {\r\n        let dirX = cDirX;\r\n        let dirY = cDirY;\r\n\r\n        if(this.stringMode)\r\n            return {dirX, dirY};\r\n\r\n        switch(instruction) {\r\n            case '>': { dirX = 1; dirY = 0; break; }\r\n            case '<': { dirX =-1; dirY = 0; break; }\r\n            case '^': { dirX = 0; dirY =-1; break; }\r\n            case 'v': { dirX = 0; dirY = 1; break; }\r\n            case '?': { \r\n                const dir = Math.floor(Math.random() * 4);\r\n                if( dir === 0 ) { dirX = 1; dirY = 0 } // left\r\n                if( dir === 1 ) { dirX = 0; dirY = 1 } // down\r\n                if( dir === 2 ) { dirX =-1; dirY = 0 } // right\r\n                if( dir === 3 ) { dirX = 0; dirY =-1 } // up\r\n                break;\r\n            }\r\n            case '_': {\r\n                const a = this.stack.length > 0 ? this.stack[this.stack.length - 1] : 0;\r\n                dirY = 0;\r\n                dirX = a === 0 ? 1 : -1;\r\n                break;\r\n            }\r\n            case '|': {\r\n                const a = this.stack.length > 0 ? this.stack[this.stack.length - 1] : 0;\r\n                dirY = a === 0 ? 1 : -1;\r\n                dirX = 0;\r\n                break;\r\n            }\r\n            default: break;\r\n        }\r\n\r\n        return {dirX, dirY};\r\n    }\r\n\r\n    input(val) {\r\n        this.inputStack.push(val);\r\n        this.waitingForInput = false;\r\n        \r\n    }\r\n\r\n    onInstructionExecuted(callback) {\r\n        this.onInstructionExecutedCb = callback;\r\n    }\r\n    onConsoleOut(callback) {\r\n        this.onConsoleOutCb = callback;\r\n    }\r\n    onRequestConsoleInput(callback) {\r\n        this.onRequestConsoleInputCb = callback;\r\n    }\r\n\r\n    onProgramTerminate(callback) {\r\n        this.onProgramTerminateCb = callback;\r\n    }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nexport function BefungeStackVivew(props) {\r\n\r\n    const [stack, setStack] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let onStackChangeSubscription = null; \r\n        \r\n        if(props.program) {\r\n            onStackChangeSubscription = props.program.stack$.subscribe((s) => {\r\n                setStack([...s]);\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            if(onStackChangeSubscription)\r\n                onStackChangeSubscription.unsubscribe();\r\n            setStack([]);\r\n        };\r\n    }, [props.program]);\r\n\r\n    return (\r\n    <ul className=\"befunge-stack-view\">\r\n        { stack.reverse().map((item, index) => <li key={'bfstack-'+index}>\r\n            <span style={{float:'left'}}>{item}</span>\r\n            <span style={{float:'right'}}>{String.fromCharCode(item)}</span>\r\n        </li> ) }\r\n    </ul>);\r\n}","\r\nimport 'react-reflex/styles.css';\r\nimport React, {useRef, forwardRef, useState} from 'react';\r\nimport { TextGridStatusBar, actions, TextGridCanvas} from '../TextGrid';\r\nimport { Terminal } from '../Terminal';\r\nimport { Toolbar } from '../Toolbar';\r\nimport BefungeInterpreter from './BefungeInterpreter';\r\nimport { store as textGridStore } from '../../store';\r\nimport { ReflexContainer, ReflexSplitter, ReflexElement } from 'react-reflex';\r\nimport './BefungeIde.scss';\r\nimport { BefungeStackVivew } from './BefungeStackView';\r\n\r\nlet runIntervilleTimer = null;\r\n\r\nconst BefungeIde = forwardRef((props, ref) => {\r\n\r\n    let [befungeInterpreter, setBefungeInterpreter] = useState(null);\r\n    \r\n    const handleKeyPress = (store, key) => {\r\n        if( key === 'v') return { preventDefault: false, actions: [actions.setTypeingDir( 0, 1)] };\r\n        if( key === '>') return { preventDefault: false, actions: [actions.setTypeingDir( 1, 0)] };\r\n        if( key === '<') return { preventDefault: false, actions: [actions.setTypeingDir(-1, 0)] };\r\n        if( key === '^') return { preventDefault: false, actions: [actions.setTypeingDir( 0,-1)] };\r\n        return { };\r\n    }\r\n\r\n    const setCursorPos = (rowIndex, colIndex) => {\r\n        textGridStore.dispatch(actions.setTargetCell(rowIndex, colIndex));\r\n    };\r\n\r\n    const setCursorDir = (xDir, yDir) => {\r\n        textGridStore.dispatch(actions.setTypeingDir(xDir, yDir));\r\n    }\r\n\r\n    const initProgram = () => {\r\n        const cells = textGridRef.current.getCells();\r\n        const interpreter = new BefungeInterpreter(cells);\r\n        \r\n        interpreter.onInstructionExecuted((li, ni) => {\r\n            if(ni !== null ) {\r\n                textGridStore.dispatch(actions.setTargetCell( ni.y, ni.x ));\r\n                textGridStore.dispatch(actions.setTypeingDir( ni.dirX, ni.dirY ));\r\n            }\r\n        });\r\n        \r\n        interpreter.onConsoleOut(text => {\r\n            if(terminalRef.current)\r\n                terminalRef.current.print(text);\r\n        });\r\n        interpreter.onProgramTerminate(() => {\r\n            stopProgram();            \r\n        });\r\n        interpreter.onRequestConsoleInput(() => {\r\n            const input = window.prompt(\"Enter a value\", \"\");\r\n            if(befungeInterpreter && befungeInterpreter.waitingForInput && input)\r\n                befungeInterpreter.input(input);\r\n        });\r\n\r\n        befungeInterpreter = interpreter; // hack\r\n        setBefungeInterpreter(interpreter);\r\n\r\n        textGridStore.dispatch(actions.setTargetCell( 0, 0 ));\r\n        textGridStore.dispatch(actions.setTypeingDir( 1, 0 ));\r\n    }\r\n\r\n    const debugProgram = () => {\r\n        initProgram();\r\n    };\r\n\r\n    \r\n    const runProgram = () => {\r\n        if(befungeInterpreter === null && runIntervilleTimer === null) {\r\n            initProgram();\r\n            runIntervilleTimer = setInterval(() => {\r\n                \r\n                    stepProgram();\r\n            }, 1);\r\n        }\r\n    };\r\n\r\n    const stopProgram = () => {\r\n        clearInterval(runIntervilleTimer);\r\n        runIntervilleTimer = null;\r\n        setBefungeInterpreter(null);\r\n        if(terminalRef.current) {\r\n            terminalRef.current.print('\\nProgram Terminated!\\n');\r\n            terminalRef.current.submitInput();\r\n        }\r\n    }\r\n\r\n    const stepProgram = () => {\r\n        befungeInterpreter.step();\r\n    };\r\n\r\n    const terminalCommands = {\r\n        'set-cursor-pos': (args) => { setCursorPos(parseInt(args[0]), parseInt(args[1])); },\r\n        'set-cursor-dir': (args) => { setCursorDir(parseInt(args[0]), parseInt(args[1])); },\r\n        'run': (args) => { runProgram() },\r\n        'next': (args) => { stepProgram(); },\r\n        'stack': (args) => { console.log( befungeInterpreter.stack); }\r\n    };\r\n\r\n    const terminalOnEnter = (input) => {\r\n        if(befungeInterpreter && befungeInterpreter.waitingForInput)\r\n            befungeInterpreter.input(input);\r\n    }\r\n\r\n//     const prog = \r\n// `\"v\r\n//  a\r\n//  a\r\n//  a\r\n//  @`;\r\n\r\n// let prog = \r\n// `>              v\r\n// v  ,,,,,\"Hello\"<\r\n// >48*,          v\r\n// v,,,,,,\"World!\"<\r\n// >25*,@`;\r\n\r\nconst prog = `<v\"]^_\"abc%u$#d%t$#e%s$#f%r$#g%q$#h%ponmlkji\"\r\n3<_@#:,-*9`;\r\n\r\n// const prog = \r\n// `64+\"!dlroW ,olleH\">:#,_@`;\r\n\r\n// const prog = \r\n// `~:1+!#@_,`;\r\n\r\n// const prog = \r\n// `64*>:00p258**44$$^>4$,1-:#v_v\r\n// 4$#^; BEFUNGE97 ;^#_@#:-1$>#<\r\n// 4*2-*26g00*:-*58:<vg3/*48+*:$\r\n// #@@@ooo:::...  .    .     .  `;\r\n\r\n// const prog = \r\n// `1-0g:\"Z\"-#v_$91+\"sparw tup/teG\">:#,_$               v                          Z\r\n//           >:\" \"-#v_$91+\"ecaps snruter teg BOO\">:#,_$v\r\n// v                >0\" snruter teg BOO\">:#,_$.91+,    >\r\n// >8:+:*11p11g#v_91+\"tib 8 dengis\"01-11p11g!#v_\"nu\">\" era slleC\">:#,_v\r\n// vv           >91+\"tib 8>\"                  >     ^                 >91+\"krow \" #\r\n//  >        >\"spmuj egdE\">:#,_   91+\"krow \"04-3%1+#v_        >\"sredniamer evitag\"v\r\n// >\"ton od \"^                                      >\"ton od \"^\r\n// \"eN\">:#,_  91+\"skrow edomgnirts ni @\">:#,_@                                    >`;\r\n\r\n//const prog = `>  #12#  <`;\r\n\r\n    const config = {\r\n        cellWidth: 20,\r\n        cellHeight: 20,\r\n        text: prog,\r\n        events: {\r\n            onKeyDown: handleKeyPress\r\n        },\r\n        terminalCommands\r\n    }\r\n\r\n    const textGridRef = useRef();\r\n    const terminalRef = useRef();\r\n\r\n    const toolbar = [];\r\n    if( befungeInterpreter === null ) {\r\n        toolbar.push({ text: 'Run', classNames: 'button', onClick: () => runProgram() });\r\n        toolbar.push({ text: 'Debug', classNames: 'button', onClick: () => debugProgram() },);\r\n    }\r\n    else {\r\n        toolbar.push({ text: 'Stop', classNames: 'button', onClick: () => stopProgram() });\r\n        toolbar.push({ text: 'Step', classNames: 'button', onClick: () => stepProgram() });\r\n    }\r\n\r\n    return(\r\n    <div className=\"befungeIde\">\r\n        <ReflexContainer orientation=\"horizontal\">\r\n            {/* TOP MENU BAR */}\r\n            <ReflexElement style={{overflow:'hidden'}} minSize={24} maxSize={24}>\r\n                <Toolbar items={toolbar}></Toolbar>\r\n            </ReflexElement>\r\n\r\n            {/* MAIN AREA */}\r\n            <ReflexElement>\r\n                <ReflexContainer orientation=\"vertical\">\r\n                    <ReflexElement flex=\"1\">\r\n                        <ReflexContainer orientation=\"horizontal\">\r\n                            <ReflexElement propagateDimensions={true} style={{overflow:'hidden'}}>\r\n                                <TextGridCanvas ref={textGridRef} config={config}></TextGridCanvas>\r\n                            </ReflexElement>\r\n                            <ReflexSplitter />\r\n                            <ReflexElement minSize=\"200\" maxSize=\"400\" style={{overflow:'hidden'}}>\r\n                                <Terminal ref={terminalRef} commands={terminalCommands} onEnter={terminalOnEnter}></Terminal>\r\n                            </ReflexElement>\r\n                        </ReflexContainer>\r\n                    </ReflexElement>\r\n                    <ReflexSplitter />\r\n                    <ReflexElement style={{overflow:'hidden'}} minSize=\"200\" maxSize=\"400\">\r\n                    <div className=\"asside\">\r\n                        <div className=\"asside-header\">Debug Stack</div>\r\n                        <div className=\"asside-section\" style={{maxHeight: 200}}>\r\n                            <BefungeStackVivew program={befungeInterpreter}></BefungeStackVivew>            \r\n                        </div>\r\n                    </div>\r\n                    </ReflexElement>\r\n                </ReflexContainer>\r\n            </ReflexElement>\r\n\r\n            {/* STATUS BAR */}\r\n            <ReflexElement style={{overflow:'hidden'}} minSize={24} maxSize={24}>\r\n                <TextGridStatusBar></TextGridStatusBar>\r\n            </ReflexElement>\r\n\r\n        </ReflexContainer>\r\n    </div>);\r\n});\r\n\r\nexport default BefungeIde;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.scss';\nimport BefungeIde from './Components/BefungeIde/BefungeIde';\nimport { store } from './store';\n\n\nexport default function App() {\n\n    return (\n        <Provider store={store}>\n            <div className=\"App\" style={{width: 'calc(100%)', height: 'calc(100% )', overflow: 'hidden'}}>    \n                <BefungeIde></BefungeIde>\n            </div>\n        </Provider>\n    );\n}\n"],"sourceRoot":""}